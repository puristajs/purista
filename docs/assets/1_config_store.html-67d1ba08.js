import{_ as e,W as o,X as p,Z as n,$ as s,a0 as t,Y as c,D as i}from"./framework-d89ed822.js";const l={},u=n("p",null,[s("A configuration passed into the service creation, should focus on technical configurations and for the service itself."),n("br"),s(" As an example, defining urls, ports, timeouts and similar, are technical configurations."),n("br"),s(" Configurations, related to business logic, like feature flags and values for business calculations, should be separated from pure technical configurations. This allows to manage configuration, without the need to restart instances, and to use solutions like AWS Parameter Store, without directly coupling vendor specific solutions to business code.")],-1),r=n("p",null,"Also, if a command or subscriptions needs further configurations like urls of external services, than the config store is a good place to persist this information.",-1),k=n("p",null,"The config store is a simple interface to a key-value-store. They key must be a string and the value can be any type which can be serialized via JSON stringify/parse.",-1),d=n("h2",{id:"available-config-stores",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#available-config-stores","aria-hidden":"true"},"#"),s(" Available config stores")],-1),v=n("thead",null,[n("tr",null,[n("th",null,"vendor"),n("th",null,"package")])],-1),m={href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/sebastianwessel/purista/issues/104",target:"_blank",rel:"noopener noreferrer"},b={href:"https://azure.microsoft.com/en-us/products/app-configuration",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/sebastianwessel/purista/issues/105",target:"_blank",rel:"noopener noreferrer"},h=c(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>The config store is provided inside the <code>context</code> of command functions and subscription functions.<br> It can be used like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">setCommandFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// set a config</span>
  <span class="token keyword">await</span> context<span class="token punctuation">.</span>configs<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token string">&#39;port&#39;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>

  <span class="token comment">// get a config</span>
  <span class="token keyword">const</span> myConfig <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>configs<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token string">&#39;hostUrl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;port&#39;</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span> <span class="token comment">// outputs: { hostUrl: &quot;http://example.com&quot;, port: 8080 }</span>

  <span class="token comment">// remove a config</span>
  <span class="token keyword">await</span> context<span class="token punctuation">.</span>configs<span class="token punctuation">.</span><span class="token function">removeConfig</span><span class="token punctuation">(</span><span class="token string">&#39;port&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><strong>Use schemas to validate</strong><br> A production ready approach is, to validate the result of store getters against a schema.<br> It validates the returned values and gives you proper types for further usage in one step.<br> As an example:</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">setCommandFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> configSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    hostUrl<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">99999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>configs<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token string">&#39;hostUrl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;port&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// myConfig now has proper types and is technical valid</span>
  <span class="token keyword">const</span> myConfig <span class="token operator">=</span> configSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span> <span class="token comment">// outputs: { hostUrl: &quot;http://example.com&quot;, port: 8080 }</span>
 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>Config stores per default have:</p><ul><li>enabled getter</li><li>disabled setter</li><li>disabled removal</li></ul><p>You need to explicit enable via config if needed</p></div><h2 id="default-config-store" tabindex="-1"><a class="header-anchor" href="#default-config-store" aria-hidden="true">#</a> Default config store</h2><p>PURISTA comes with a default config store, which can be used as placeholder or connector to config files and environment variables.<br> In the constructor config, you can add a <code>config</code> property. The property must be from type object.</p><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConfigStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  enableGet<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  enableRemove<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  enableSet<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  config<span class="token operator">:</span> <span class="token punctuation">{</span>
    initialValue<span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;initialValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// outputs: initial</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-config-store" tabindex="-1"><a class="header-anchor" href="#custom-config-store" aria-hidden="true">#</a> Custom config store</h2><p>It is quite simple to build a custom config store.<br> You can simply extend the <code>ConfigStoreBaseClass</code> with type parameter of your custom store config.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigStoreBaseClass<span class="token punctuation">,</span> UnhandledError<span class="token punctuation">,</span> StatusCode<span class="token punctuation">,</span> StoreBaseConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">CustomStoreConfig</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomStore</span> <span class="token keyword">extends</span> <span class="token class-name">ConfigStoreBaseClass<span class="token operator">&lt;</span>CustomStoreConfig<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> client

  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">?</span><span class="token operator">:</span> StoreBaseConfig<span class="token operator">&lt;</span>CustomStoreConfig<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;CustomStoreName&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> customCLient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token operator">...</span>configNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>enableGet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">,</span> <span class="token string">&#39;get config from store is disabled by config&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> result<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">of</span> configNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// your custom logic goes here:</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error in config store getting value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result

  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">removeConfig</span><span class="token punctuation">(</span>configName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>enableRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">,</span> <span class="token string">&#39;remove config from store is disabled by config&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// your custom logic goes here:</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>configName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error in config store removing value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>configName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">setConfig</span><span class="token punctuation">(</span>configName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> configValue<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>enableSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">,</span> <span class="token string">&#39;set config at store is disabled by config&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// your custom logic goes here:</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>configName<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>configValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error in config store setting value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>configName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function y(w,C){const a=i("ExternalLinkIcon");return o(),p("div",null,[u,r,k,d,n("table",null,[v,n("tbody",null,[n("tr",null,[n("td",null,[n("a",m,[s("AWS Systems Manager Parameter Store"),t(a)])]),n("td",null,[n("a",g,[s("planned"),t(a)])])]),n("tr",null,[n("td",null,[n("a",b,[s("Azure App Configuration"),t(a)])]),n("td",null,[n("a",f,[s("planned"),t(a)])])])])]),h])}const S=e(l,[["render",y],["__file","1_config_store.html.vue"]]);export{S as default};
