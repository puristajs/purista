import{_ as t,c as i,o as e,ag as a}from"./chunks/framework.U_AETC1W.js";const k=JSON.parse('{"title":"Add Configuration","description":"How to add a custom service config to your PURISTA service","frontmatter":{"title":"Add Configuration","description":"How to add a custom service config to your PURISTA service","order":201020},"headers":[],"relativePath":"handbook/2_building_business-logic/service/add-a-service-config.md","filePath":"handbook/2_building_business-logic/service/add-a-service-config.md","lastUpdated":1739467938000}'),n={name:"handbook/2_building_business-logic/service/add-a-service-config.md"};function d(o,s,r,l,h,p){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="custom-service-configuration" tabindex="-1">Custom service configuration <a class="header-anchor" href="#custom-service-configuration" aria-label="Permalink to &quot;Custom service configuration&quot;">‚Äã</a></h1><p>A custom configuration relates to your business logic and your requirements. It is not used by PURISTA itself. The custom service config will be available in all commands and subscriptions of this service via <code>this.config</code>. Custom service configurations are one option to pass configuration values to commands and subscriptions. But, you can also use stores.</p><p>Service configuration and stores addressing different data. Here is a table, that will help you to understand the differences.</p><table tabindex="0"><thead><tr><th></th><th>custom config</th><th><a href="./../stores/config-stores.html">Config Store</a></th><th><a href="./../stores/secret-stores.html">Secret store</a></th></tr></thead><tbody><tr><td>provided/managed by</td><td>infrastructure &amp; deployment</td><td>database or vendor solution</td><td>vendor solution</td></tr><tr><td>addresses</td><td>technical configuration</td><td>business configuration</td><td>secrets &amp; confidential data</td></tr><tr><td>value</td><td>is set once, during instance creation</td><td>fetched per usage</td><td>fetched per usage</td></tr><tr><td>change effects</td><td>instance restart/next deployment</td><td>on next usage</td><td>on next usage</td></tr><tr><td>value type</td><td>object (nested)</td><td>object, string, number, boolean (key-value)</td><td>string (key-value)</td></tr><tr><td>can be set <em>(</em>)*</td><td>üõë no</td><td>‚úÖ yes</td><td>‚úÖ yes</td></tr><tr><td>can be deleted <em>(</em>)*</td><td>üõë no</td><td>‚úÖ yes</td><td>‚úÖ yes</td></tr><tr><td>use for confidential data</td><td>üôèüèª please no, technically possible</td><td>üôèüèª please no, technically possible</td><td>‚úÖ yes</td></tr><tr><td>use cases</td><td>third-party url, ports, timeout settings</td><td>feature flag, business data like currency exchange values</td><td>passwords, auth tokens, certificates</td></tr></tbody></table><p><em>(*)</em> by commands and subscriptions</p><p>For a custom configuration, you must define a <a href="https://zod.dev" target="_blank" rel="noreferrer">zod schema</a>. Example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userServiceV1ConfigSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myOption: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;something&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserServiceV1Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userServiceV1ConfigSchema&gt;</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userV1ServiceBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServiceBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userServiceInfo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConfigSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userServiceV1ConfigSchema)</span></span></code></pre></div><p>As you can see, in the example an optional string entry <code>myOption</code> is added. This field is marked as optional. Because of this, in the generated type <code>UserServiceV1Config</code>, the <code>myOption</code> is also optional.</p><p>The schema also contains a default value for <code>myOption</code>. If no value is provided during configuration, the default value will be used.</p>`,10)]))}const g=t(n,[["render",d]]);export{k as __pageData,g as default};
