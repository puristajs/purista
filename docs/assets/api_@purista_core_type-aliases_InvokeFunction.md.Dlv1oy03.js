import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.U_AETC1W.js";const c=JSON.parse('{"title":"Type Alias: InvokeFunction()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/InvokeFunction.md","filePath":"api/@purista/core/type-aliases/InvokeFunction.md","lastUpdated":1740066608000}'),n={name:"api/@purista/core/type-aliases/InvokeFunction.md"};function p(r,a,l,o,h,d){return i(),e("div",null,a[0]||(a[0]=[t(`<p><a href="./../README.html"><strong>@purista/core v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / InvokeFunction</p><h1 id="type-alias-invokefunction" tabindex="-1">Type Alias: InvokeFunction() <a class="header-anchor" href="#type-alias-invokefunction" aria-label="Permalink to &quot;Type Alias: InvokeFunction()&quot;">​</a></h1><blockquote><p><strong>InvokeFunction</strong>: &lt;<code>InvokeResponseType</code>, <code>PayloadType</code>, <code>ParameterType</code>&gt;(<code>address</code>, <code>payload</code>, <code>parameter</code>) =&gt; <code>Promise</code>&lt;<code>InvokeResponseType</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/types/InvokeFunction.ts#L23" target="_blank" rel="noreferrer">packages/core/src/core/types/InvokeFunction.ts:23</a></p><p>Invokes a command and returns the result. It is recommended to validate the result against a schema which only contains the data you actually need.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>InvokeResponseType</strong> = <code>unknown</code></p><p>• <strong>PayloadType</strong> = <code>unknown</code></p><p>• <strong>ParameterType</strong> <em>extends</em> <a href="./EmptyObject.html"><code>EmptyObject</code></a> = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="address" tabindex="-1">address <a class="header-anchor" href="#address" aria-label="Permalink to &quot;address&quot;">​</a></h3><p><a href="./EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h3 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h3><p><code>PayloadType</code></p><h3 id="parameter" tabindex="-1">parameter <a class="header-anchor" href="#parameter" aria-label="Permalink to &quot;parameter&quot;">​</a></h3><p><code>ParameterType</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Promise</code>&lt;<code>InvokeResponseType</code>&gt;</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EBMessageAddress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serviceName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name-of-service-to-invoke&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serviceVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serviceTarget: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;command-name-to-invoke&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputPayload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { my: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputParameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { search: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;for_me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyResultType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(address, inputPayload inputParameter )</span></span></code></pre></div>`,22)]))}const y=s(n,[["render",p]]);export{c as __pageData,y as default};
