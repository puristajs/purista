import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,b as e,e as n,w as d,d as t,a as r}from"./app-9aedf0b4.js";const h={},p=r(`<h1 id="module-purista-amqpbridge" tabindex="-1"><a class="header-anchor" href="#module-purista-amqpbridge" aria-hidden="true">#</a> Module: @purista/amqpbridge</h1><p>Package for using a AMQP broker like rabbitMQ as event bridge.</p><p>Example usage:</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AmqpBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/amqpbridge&#39;</span>

<span class="token comment">// create and init our eventbridge</span>
  <span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmqpBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="type-aliases" tabindex="-1"><a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a> Type Aliases</h3>`,7),u=e("h3",{id:"variables",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),t(" Variables")],-1),g=e("h3",{id:"functions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),t(" Functions")],-1),f=e("h3",{id:"event-bridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#event-bridge","aria-hidden":"true"},"#"),t(" Event bridge")],-1),_=r('<h2 id="type-aliases-1" tabindex="-1"><a class="header-anchor" href="#type-aliases-1" aria-hidden="true">#</a> Type Aliases</h2><h3 id="amqpbridgeconfig" tabindex="-1"><a class="header-anchor" href="#amqpbridgeconfig" aria-hidden="true">#</a> AmqpBridgeConfig</h3><p>Ƭ <strong>AmqpBridgeConfig</strong>: <code>Object</code></p><p>AmqpBridge bridge config</p><p><strong><code>See</code></strong></p>',5),m={href:"https://amqp-node.github.io/amqplib/",target:"_blank",rel:"noopener noreferrer"},b=e("h4",{id:"type-declaration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-declaration","aria-hidden":"true"},"#"),t(" Type declaration")],-1),y=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),x=e("td",{style:{"text-align":"left"}},[e("code",null,"encoder?")],-1),q={style:{"text-align":"left"}},k=e("code",null,"Encoder",-1),v=e("td",{style:{"text-align":"left"}},[t("the encoder(s) to be used for AMQP messages "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts jsonEncoder ")],-1),A=e("td",{style:{"text-align":"left"}},[e("code",null,"encrypter?")],-1),E={style:{"text-align":"left"}},F=e("code",null,"Encrypter",-1),B=e("td",{style:{"text-align":"left"}},[t("the encrypter(s) to be used for AMQP messages "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts plain ")],-1),C=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"exchangeName?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the AMQP exchage name to be used "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts purista ")])],-1),D=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"exchangeOptions?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Options.AssertExchange")]),e("td",{style:{"text-align":"left"}},"the AMQP exchange options")],-1),P=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"namePrefix?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the queue prefix to be used for all PURISTA queues except short living queues created by the broker on request "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts purista ")])],-1),w=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"socketOptions?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"any")]),e("td",{style:{"text-align":"left"}},"socket options")],-1),T=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"url?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string"),t(" | "),e("code",null,"Options.Connect")]),e("td",{style:{"text-align":"left"}},[t("the AMQP broker url "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts amqp://localhost ")])],-1),O=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),z={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/types/AmqpBridgeConfig.ts#L11",target:"_blank",rel:"noopener noreferrer"},L=e("hr",null,null,-1),N=e("h3",{id:"encoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encoder","aria-hidden":"true"},"#"),t(" Encoder")],-1),R=e("strong",null,"Encoder",-1),H=e("code",null,"Record",-1),M=e("code",null,"string",-1),V=e("code",null,"EncoderFunctions",-1),Q=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),I={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/types/Encoder.ts#L3",target:"_blank",rel:"noopener noreferrer"},j=r('<hr><h3 id="encoderfunctions" tabindex="-1"><a class="header-anchor" href="#encoderfunctions" aria-hidden="true">#</a> EncoderFunctions</h3><p>Ƭ <strong>EncoderFunctions</strong>: <code>Object</code></p><h4 id="type-declaration-1" tabindex="-1"><a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>decode</code></td><td style="text-align:left;">&lt;T&gt;(<code>input</code>: <code>Buffer</code>) =&gt; <code>Promise</code>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>encode</code></td><td style="text-align:left;">&lt;T&gt;(<code>input</code>: <code>T</code>) =&gt; <code>Promise</code>&lt;<code>Buffer</code>&gt;</td></tr></tbody></table><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4>',6),S={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/types/EncoderFunctions.ts#L1",target:"_blank",rel:"noopener noreferrer"},U=r('<hr><h3 id="encryptfunctions" tabindex="-1"><a class="header-anchor" href="#encryptfunctions" aria-hidden="true">#</a> EncryptFunctions</h3><p>Ƭ <strong>EncryptFunctions</strong>: <code>Object</code></p><h4 id="type-declaration-2" tabindex="-1"><a class="header-anchor" href="#type-declaration-2" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>decrypt</code></td><td style="text-align:left;">(<code>input</code>: <code>Buffer</code>) =&gt; <code>Promise</code>&lt;<code>Buffer</code>&gt;</td></tr><tr><td style="text-align:left;"><code>encrypt</code></td><td style="text-align:left;">(<code>input</code>: <code>Buffer</code>) =&gt; <code>Promise</code>&lt;<code>Buffer</code>&gt;</td></tr></tbody></table><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4>',6),G={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/types/EncryptFunctions.ts#L1",target:"_blank",rel:"noopener noreferrer"},J=e("hr",null,null,-1),K=e("h3",{id:"encrypter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encrypter","aria-hidden":"true"},"#"),t(" Encrypter")],-1),W=e("strong",null,"Encrypter",-1),X=e("code",null,"Record",-1),Y=e("code",null,"string",-1),Z=e("code",null,"EncryptFunctions",-1),$=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),ee={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/types/Encrypter.ts#L3",target:"_blank",rel:"noopener noreferrer"},te=r('<h2 id="variables-1" tabindex="-1"><a class="header-anchor" href="#variables-1" aria-hidden="true">#</a> Variables</h2><h3 id="puristaversion" tabindex="-1"><a class="header-anchor" href="#puristaversion" aria-hidden="true">#</a> puristaVersion</h3><p>• <code>Const</code> <strong>puristaVersion</strong>: <code>&quot;1.7.0&quot;</code></p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4>',4),ne={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/version.ts#L1",target:"_blank",rel:"noopener noreferrer"},ae=r('<h2 id="functions-1" tabindex="-1"><a class="header-anchor" href="#functions-1" aria-hidden="true">#</a> Functions</h2><h3 id="deserializeotpfromamqpheader" tabindex="-1"><a class="header-anchor" href="#deserializeotpfromamqpheader" aria-hidden="true">#</a> deserializeOtpFromAmqpHeader</h3><p>▸ <strong>deserializeOtpFromAmqpHeader</strong>(<code>logger</code>, <code>message</code>, <code>encrypter</code>, <code>encoder</code>): <code>Promise</code>&lt;<code>undefined</code> | <code>Context</code>&gt;</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',4),de=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),se=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"logger")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Logger")])],-1),re=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"message")]),e("td",{style:{"text-align":"left"}},[e("code",null,"null"),t(" | "),e("code",null,"ConsumeMessage")])],-1),oe=e("td",{style:{"text-align":"left"}},[e("code",null,"encrypter")],-1),ie={style:{"text-align":"left"}},le=e("code",null,"Encrypter",-1),ce=e("td",{style:{"text-align":"left"}},[e("code",null,"encoder")],-1),he={style:{"text-align":"left"}},pe=e("code",null,"Encoder",-1),ue=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),ge=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"undefined"),t(" | "),e("code",null,"Context"),t(">")],-1),fe=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),_e={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/deserializeOtpFromAmqpHeader.impl.ts#L8",target:"_blank",rel:"noopener noreferrer"},me=e("hr",null,null,-1),be=e("h3",{id:"getdefaultconfig",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getdefaultconfig","aria-hidden":"true"},"#"),t(" getDefaultConfig")],-1),ye=e("strong",null,"getDefaultConfig",-1),xe=e("code",null,"Complete",-1),qe=e("code",null,"AmqpBridgeConfig",-1),ke=e("code",null,"exchangeName",-1),ve=e("code",null,"string",-1),Ae=e("code",null,"url",-1),Ee=e("code",null,"string",-1),Fe=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),Be=e("code",null,"Complete",-1),Ce=e("code",null,"AmqpBridgeConfig",-1),De=e("code",null,"exchangeName",-1),Pe=e("code",null,"string",-1),we=e("code",null,"url",-1),Te=e("code",null,"string",-1),Oe=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),ze={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/getDefaultConfig.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"},Le=r('<hr><h3 id="serializeotpforamqpheader" tabindex="-1"><a class="header-anchor" href="#serializeotpforamqpheader" aria-hidden="true">#</a> serializeOtpForAmqpHeader</h3><p>▸ <strong>serializeOtpForAmqpHeader</strong>(<code>header</code>): <code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>string</code>&gt;</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>header</code></td><td style="text-align:left;"><code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>string</code>&gt;</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>string</code>&gt;</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4>',8),Ne={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/serializeOtpForAmqpHeader.impl.ts#L3",target:"_blank",rel:"noopener noreferrer"};function Re(He,Me){const a=o("RouterLink"),s=o("ExternalLinkIcon");return l(),c("div",null,[e("p",null,[n(a,{to:"/api/"},{default:d(()=>[t("PURISTA API")]),_:1}),t(" / "),n(a,{to:"/api/modules.html"},{default:d(()=>[t("Modules")]),_:1}),t(" / @purista/amqpbridge")]),p,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:d(()=>[t("AmqpBridgeConfig")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:d(()=>[t("Encoder")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoderfunctions"},{default:d(()=>[t("EncoderFunctions")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encryptfunctions"},{default:d(()=>[t("EncryptFunctions")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:d(()=>[t("Encrypter")]),_:1})])]),u,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#puristaversion"},{default:d(()=>[t("puristaVersion")]),_:1})])]),g,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#deserializeotpfromamqpheader"},{default:d(()=>[t("deserializeOtpFromAmqpHeader")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#getdefaultconfig"},{default:d(()=>[t("getDefaultConfig")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#serializeotpforamqpheader"},{default:d(()=>[t("serializeOtpForAmqpHeader")]),_:1})])]),f,e("ul",null,[e("li",null,[n(a,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html"},{default:d(()=>[t("AmqpBridge")]),_:1})])]),_,e("p",null,[e("a",m,[t("amqplib documentation"),n(s)])]),b,e("table",null,[y,e("tbody",null,[e("tr",null,[x,e("td",q,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:d(()=>[k]),_:1})]),v]),e("tr",null,[A,e("td",E,[n(a,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:d(()=>[F]),_:1})]),B]),C,D,P,w,T])]),O,e("p",null,[e("a",z,[t("amqpbridge/src/types/AmqpBridgeConfig.ts:11"),n(s)])]),L,N,e("p",null,[t("Ƭ "),R,t(": "),H,t("<"),M,t(", "),n(a,{to:"/api/modules/purista_amqpbridge.html#encoderfunctions"},{default:d(()=>[V]),_:1}),t(">")]),Q,e("p",null,[e("a",I,[t("amqpbridge/src/types/Encoder.ts:3"),n(s)])]),j,e("p",null,[e("a",S,[t("amqpbridge/src/types/EncoderFunctions.ts:1"),n(s)])]),U,e("p",null,[e("a",G,[t("amqpbridge/src/types/EncryptFunctions.ts:1"),n(s)])]),J,K,e("p",null,[t("Ƭ "),W,t(": "),X,t("<"),Y,t(", "),n(a,{to:"/api/modules/purista_amqpbridge.html#encryptfunctions"},{default:d(()=>[Z]),_:1}),t(">")]),$,e("p",null,[e("a",ee,[t("amqpbridge/src/types/Encrypter.ts:3"),n(s)])]),te,e("p",null,[e("a",ne,[t("amqpbridge/src/version.ts:1"),n(s)])]),ae,e("table",null,[de,e("tbody",null,[se,re,e("tr",null,[oe,e("td",ie,[n(a,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:d(()=>[le]),_:1})])]),e("tr",null,[ce,e("td",he,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:d(()=>[pe]),_:1})])])])]),ue,ge,fe,e("p",null,[e("a",_e,[t("amqpbridge/src/deserializeOtpFromAmqpHeader.impl.ts:8"),n(s)])]),me,be,e("p",null,[t("▸ "),ye,t("(): "),xe,t("<"),n(a,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:d(()=>[qe]),_:1}),t("> & { "),ke,t(": "),ve,t(" ; "),Ae,t(": "),Ee,t(" }")]),Fe,e("p",null,[Be,t("<"),n(a,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:d(()=>[Ce]),_:1}),t("> & { "),De,t(": "),Pe,t(" ; "),we,t(": "),Te,t(" }")]),Oe,e("p",null,[e("a",ze,[t("amqpbridge/src/getDefaultConfig.impl.ts:5"),n(s)])]),Le,e("p",null,[e("a",Ne,[t("amqpbridge/src/serializeOtpForAmqpHeader.impl.ts:3"),n(s)])])])}const Ie=i(h,[["render",Re],["__file","purista_amqpbridge.html.vue"]]);export{Ie as default};
