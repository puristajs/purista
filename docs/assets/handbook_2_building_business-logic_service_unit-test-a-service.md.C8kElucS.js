import{_ as i,c as e,o as t,ag as a}from"./chunks/framework.U_AETC1W.js";const d=JSON.parse('{"title":"Unit Test","description":"How to unit test a PURISTA service","frontmatter":{"title":"Unit Test","description":"How to unit test a PURISTA service","order":201030},"headers":[],"relativePath":"handbook/2_building_business-logic/service/unit-test-a-service.md","filePath":"handbook/2_building_business-logic/service/unit-test-a-service.md","lastUpdated":1725104509000}'),n={name:"handbook/2_building_business-logic/service/unit-test-a-service.md"};function l(h,s,p,r,o,c){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="unit-test-the-service" tabindex="-1">Unit test the service <a class="header-anchor" href="#unit-test-the-service" aria-label="Permalink to &quot;Unit test the service&quot;">â€‹</a></h1><p>A service itself does not contain any logic which needs to be tested. It a container/group for commands and subscriptions.</p><p>If you use the CLI to generate a service, a simple unit test is generated. This test does not need any changes and only tests for valid configurations.</p><p>If you use an custom domain class, you might need to test this class. But be aware, that a service class <strong>should not</strong> contain business logic.<br> Use custom classes to provide something like database connections.</p><p>The generated test file might look like this:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userV1Service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./userV1Service.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;service user version 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;has valid setup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testServiceSetup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you have the need to write some unit test for your custom service class implementation, you should not extend the generated file. Instead create your own test file.</p></div>`,7)]))}const u=i(n,[["render",l]]);export{d as __pageData,u as default};
