import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as l,b as e,e as d,w as a,d as t,a as r}from"./app-2c9217f0.js";const h={},p=e("h1",{id:"class-dapreventbridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-dapreventbridge","aria-hidden":"true"},"#"),t(" Class: DaprEventBridge")],-1),u=e("p",null,"The DaprEventBridge connects to the Dapr sidecar container. It provides endpoints for invoking commands, triggering subscriptions and emitting event messages. The sidecar container invokes commands and subscriptions of the service connected to the event bridge. A DaprClient (http fetch) is used for communication from the service/event bridge to the sidecar container.",-1),g=e("p",null,"Names for services, commands, subscriptions and events are converted to kebab-case. If the event bridge is configured to expose REST endpoints defined in command builder, the endpoints are generated as defined in the command builder.",-1),f=e("p",null,[t("The event bridge is using Hono under the hood. You need to provide a "),e("code",null,"serve"),t(" function. Depending on your runtime (Node, Bun, Deno) an adapter might be needed.")],-1),m=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),b={href:"https://hono.dev",target:"_blank",rel:"noopener noreferrer"},v=r(`<p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> DaprConfigStore<span class="token punctuation">,</span> DaprEventBridge<span class="token punctuation">,</span> DaprSecretStore<span class="token punctuation">,</span> DaprStateStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/dapr-sdk&#39;</span>

<span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DaprEventBridge</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   serve<span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// start the services first ...</span>

<span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a> Hierarchy</h2>`,3),y=e("code",null,"HttpEventBridge",-1),x=e("code",null,"DaprEventBridgeConfig",-1),_=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"DaprEventBridge")])],-1),E=r('<h2 id="implements" tabindex="-1"><a class="header-anchor" href="#implements" aria-hidden="true">#</a> Implements</h2><ul><li><code>EventBridge</code></li></ul><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',4),B=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),k=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),D=r('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new DaprEventBridge</strong>(<code>config</code>)</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',4),I=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),T=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Object")]),e("td",{style:{"text-align":"left"}},"-")],-1),P=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.apiPrefix?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the prefix to be used if the command is configured as REST api endpoint according to the OpenAPI defintion needs to "),e("code",null,"enableRestApiExpose"),t(" set to "),e("code",null,"true")])],-1),H=e("td",{style:{"text-align":"left"}},[e("code",null,"config.clientConfig?")],-1),S={style:{"text-align":"left"}},w=e("code",null,"DaprClientConfig",-1),C=e("td",{style:{"text-align":"left"}},"-",-1),q=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.commandPayloadAsCloudEvent?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"boolean")]),e("td",{style:{"text-align":"left"}},[t("command invocations are wrapped in CloudEvent "),e("strong",null,[e("code",null,"Link")]),t(" https://github.com/cloudevents/spec/tree/v1.0")])],-1),R=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.defaultCommandTimeout?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},"Overwrite the hardcoded default timeout of command invocations")],-1),N=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.enableRestApiExpose?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"boolean")]),e("td",{style:{"text-align":"left"}},"expose commands as regular REST endpoints when they are configured as endpoints")],-1),A=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.instanceId?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The instance id of the event bridge. If not set, a id will generated each time a instance is created. Use this if there is a need to always have the same instance id.")],-1),M=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.logLevel?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"LogLevelName")]),e("td",{style:{"text-align":"left"}},"If no logger instance is given, use this log level")],-1),L=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.logger?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Logger")]),e("td",{style:{"text-align":"left"}},"A logger instance")],-1),O=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.name?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"name of the bridge")],-1),K=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.pathPrefix?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"the prefix to be used for exposing commands as endpoints expecting a event bus message")],-1),F=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.serve")]),e("td",{style:{"text-align":"left"}},[t("("),e("code",null,"options"),t(": { "),e("code",null,"fetch"),t(": ("),e("code",null,"request"),t(": "),e("code",null,"Request"),t(") => "),e("code",null,"unknown"),t(" ; "),e("code",null,"hostname?"),t(": "),e("code",null,"string"),t(" ; "),e("code",null,"port?"),t(": "),e("code",null,"number"),t(" }) => "),e("code",null,"Server"),t("<typeof "),e("code",null,"IncomingMessage"),t(", typeof "),e("code",null,"ServerResponse"),t(">")]),e("td",{style:{"text-align":"left"}},[t("The serve function is depending on the runtime. - Bun: "),e("code",null,"Bun.serve"),t(" - Node.js: "),e("code",null,"serve"),t(" function from additional package "),e("code",null,"@hono/hono-node-server"),t(" - Deno: "),e("code",null,"serve"),t(" function from package "),e("code",null,"https://deno.land/std/http/server.ts"),t(),e("strong",null,[e("code",null,"See")]),t(" https://hono.dev")])],-1),j=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.serverHost?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"Host of the server.")],-1),G=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.serverPort?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},"Port of the server.")],-1),U=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.spanProcessor?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"SpanProcessor")]),e("td",{style:{"text-align":"left"}},"A OpenTelemetry span processor")],-1),V=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.subscriptionPayloadAsCloudEvent?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"boolean")]),e("td",{style:{"text-align":"left"}},[t("subscription invocations are wrapped in CloudEvent "),e("strong",null,[e("code",null,"Link")]),t(" https://github.com/cloudevents/spec/tree/v1.0")])],-1),Q=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),Y=e("p",null,"HttpEventBridge<DaprEventBridgeConfig&gt;.constructor",-1),z=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),J={href:"https://github.com/sebastianwessel/purista/blob/master/packages/dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts#L54",target:"_blank",rel:"noopener noreferrer"},W=r('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="app" tabindex="-1"><a class="header-anchor" href="#app" aria-hidden="true">#</a> app</h3><p>• <strong>app</strong>: <code>Hono</code>&lt;<code>Env</code>, {}, <code>&quot;&quot;</code>&gt;</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.app</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:23</p><hr><h3 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> client</h3><p>• <strong>client</strong>: <code>HttpEventBridgeClient</code></p><h4 id="inherited-from-1" tabindex="-1"><a class="header-anchor" href="#inherited-from-1" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.client</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:26</p><hr><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3>',16),X=e("strong",null,"config",-1),Z=e("code",null,"Complete",-1),$=e("code",null,"apiPrefix?",-1),ee=e("code",null,"string",-1),te=e("code",null,"clientConfig?",-1),de=e("code",null,"DaprClientConfig",-1),ne=e("code",null,"commandPayloadAsCloudEvent?",-1),ae=e("code",null,"boolean",-1),re=e("code",null,"defaultCommandTimeout?",-1),oe=e("code",null,"number",-1),ie=e("code",null,"enableRestApiExpose?",-1),se=e("code",null,"boolean",-1),ce=e("code",null,"instanceId?",-1),le=e("code",null,"string",-1),he=e("code",null,"logLevel?",-1),pe=e("code",null,"LogLevelName",-1),ue=e("code",null,"logger?",-1),ge=e("code",null,"Logger",-1),fe=e("code",null,"name?",-1),me=e("code",null,"string",-1),be=e("code",null,"pathPrefix?",-1),ve=e("code",null,"string",-1),ye=e("code",null,"serve",-1),xe=e("code",null,"options",-1),_e=e("code",null,"fetch",-1),Ee=e("code",null,"request",-1),Be=e("code",null,"Request",-1),ke=e("code",null,"unknown",-1),De=e("code",null,"hostname?",-1),Ie=e("code",null,"string",-1),Te=e("code",null,"port?",-1),Pe=e("code",null,"number",-1),He=e("code",null,"Server",-1),Se=e("code",null,"IncomingMessage",-1),we=e("code",null,"ServerResponse",-1),Ce=e("code",null,"serverHost?",-1),qe=e("code",null,"string",-1),Re=e("code",null,"serverPort?",-1),Ne=e("code",null,"number",-1),Ae=e("code",null,"spanProcessor?",-1),Me=e("code",null,"SpanProcessor",-1),Le=e("code",null,"subscriptionPayloadAsCloudEvent?",-1),Oe=e("code",null,"boolean",-1),Ke=r('<h4 id="inherited-from-2" tabindex="-1"><a class="header-anchor" href="#inherited-from-2" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.config</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:13</p><hr><h3 id="defaultcommandtimeout" tabindex="-1"><a class="header-anchor" href="#defaultcommandtimeout" aria-hidden="true">#</a> defaultCommandTimeout</h3><p>• <strong>defaultCommandTimeout</strong>: <code>number</code></p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.defaultCommandTimeout</p><h4 id="inherited-from-3" tabindex="-1"><a class="header-anchor" href="#inherited-from-3" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.defaultCommandTimeout</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:16</p><hr><h3 id="instanceid" tabindex="-1"><a class="header-anchor" href="#instanceid" aria-hidden="true">#</a> instanceId</h3><p>• <strong>instanceId</strong>: <code>string</code></p><h4 id="inherited-from-4" tabindex="-1"><a class="header-anchor" href="#inherited-from-4" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.instanceId</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:15</p><hr><h3 id="isshuttingdown" tabindex="-1"><a class="header-anchor" href="#isshuttingdown" aria-hidden="true">#</a> isShuttingDown</h3><p>• <strong>isShuttingDown</strong>: <code>boolean</code></p><h4 id="inherited-from-5" tabindex="-1"><a class="header-anchor" href="#inherited-from-5" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.isShuttingDown</p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:24</p><hr><h3 id="isstarted" tabindex="-1"><a class="header-anchor" href="#isstarted" aria-hidden="true">#</a> isStarted</h3><p>• <strong>isStarted</strong>: <code>boolean</code></p><h4 id="inherited-from-6" tabindex="-1"><a class="header-anchor" href="#inherited-from-6" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.isStarted</p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:25</p><hr><h3 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> logger</h3><p>• <strong>logger</strong>: <code>Logger</code></p><h4 id="inherited-from-7" tabindex="-1"><a class="header-anchor" href="#inherited-from-7" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.logger</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:11</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <strong>name</strong>: <code>string</code></p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.name</p><h4 id="inherited-from-8" tabindex="-1"><a class="header-anchor" href="#inherited-from-8" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.name</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:14</p><hr><h3 id="pubsubsubscriptions" tabindex="-1"><a class="header-anchor" href="#pubsubsubscriptions" aria-hidden="true">#</a> pubSubSubscriptions</h3>',52),Fe=e("code",null,"Private",-1),je=e("strong",null,"pubSubSubscriptions",-1),Ge=e("code",null,"DaprPubSubType",-1),Ue=e("code",null,"[]",-1),Ve=e("h4",{id:"defined-in-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-10","aria-hidden":"true"},"#"),t(" Defined in")],-1),Qe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts#L52",target:"_blank",rel:"noopener noreferrer"},Ye=r('<hr><h3 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h3><p>• <strong>server</strong>: <code>undefined</code> | <code>Server</code>&lt;typeof <code>IncomingMessage</code>, typeof <code>ServerResponse</code>&gt;</p><h4 id="inherited-from-9" tabindex="-1"><a class="header-anchor" href="#inherited-from-9" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.server</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:22</p><hr><h3 id="traceprovider" tabindex="-1"><a class="header-anchor" href="#traceprovider" aria-hidden="true">#</a> traceProvider</h3><p>• <strong>traceProvider</strong>: <code>NodeTracerProvider</code></p><h4 id="inherited-from-10" tabindex="-1"><a class="header-anchor" href="#inherited-from-10" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.traceProvider</p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:12</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>▸ <strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Shut down event bridge as gracefully as possible</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.destroy</p><h4 id="inherited-from-11" tabindex="-1"><a class="header-anchor" href="#inherited-from-11" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.destroy</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:40</p><hr><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><p>▸ <strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>parameter?</code>): <code>void</code></p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>parameter?</code></td><td style="text-align:left;">{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-12" tabindex="-1"><a class="header-anchor" href="#inherited-from-12" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.emit</p><h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:13</p><hr><h3 id="emitmessage" tabindex="-1"><a class="header-anchor" href="#emitmessage" aria-hidden="true">#</a> emitMessage</h3><p>▸ <strong>emitMessage</strong>&lt;<code>T</code>&gt;(<code>message</code>): <code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>EBMessage</code></td></tr></tbody></table><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>message</code></td><td style="text-align:left;"><code>Omit</code>&lt;<code>EBMessage</code>, <code>&quot;id&quot;</code> | <code>&quot;instanceId&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.emitMessage</p><h4 id="inherited-from-13" tabindex="-1"><a class="header-anchor" href="#inherited-from-13" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.emitMessage</p><h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:29</p><hr><h3 id="gettracer" tabindex="-1"><a class="header-anchor" href="#gettracer" aria-hidden="true">#</a> getTracer</h3><p>▸ <strong>getTracer</strong>(): <code>Tracer</code></p><p>Returns open telemetry tracer of this service</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>Tracer</code></p><p>Tracer</p><h4 id="inherited-from-14" tabindex="-1"><a class="header-anchor" href="#inherited-from-14" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.getTracer</p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:23</p><hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>▸ <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>ttl?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;messageType&quot;</code> | <code>&quot;instanceId&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td></tr><tr><td style="text-align:left;"><code>ttl?</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.invoke</p><h4 id="inherited-from-15" tabindex="-1"><a class="header-anchor" href="#inherited-from-15" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.invoke</p><h4 id="defined-in-17" tabindex="-1"><a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:30</p><hr><h3 id="ishealthy" tabindex="-1"><a class="header-anchor" href="#ishealthy" aria-hidden="true">#</a> isHealthy</h3><p>▸ <strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-5" tabindex="-1"><a class="header-anchor" href="#implementation-of-5" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isHealthy</p><h4 id="inherited-from-16" tabindex="-1"><a class="header-anchor" href="#inherited-from-16" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.isHealthy</p><h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:36</p><hr><h3 id="isready" tabindex="-1"><a class="header-anchor" href="#isready" aria-hidden="true">#</a> isReady</h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-6" tabindex="-1"><a class="header-anchor" href="#implementation-of-6" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isReady</p><h4 id="inherited-from-17" tabindex="-1"><a class="header-anchor" href="#inherited-from-17" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.isReady</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:35</p><hr><h3 id="off" tabindex="-1"><a class="header-anchor" href="#off" aria-hidden="true">#</a> off</h3><p>▸ <strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-18" tabindex="-1"><a class="header-anchor" href="#inherited-from-18" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.off</p><h4 id="defined-in-20" tabindex="-1"><a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:12</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>▸ <strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-19" tabindex="-1"><a class="header-anchor" href="#inherited-from-19" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.on</p><h4 id="defined-in-21" tabindex="-1"><a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:11</p><hr><h3 id="registercommand" tabindex="-1"><a class="header-anchor" href="#registercommand" aria-hidden="true">#</a> registerCommand</h3><p>▸ <strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;<code>Readonly</code>&lt;<code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;instanceId&quot;</code>&gt;&gt; | <code>Readonly</code>&lt;<code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;instanceId&quot;</code>&gt;&gt;&gt;</td></tr><tr><td style="text-align:left;"><code>metadata</code></td><td style="text-align:left;"><code>Object</code></td></tr><tr><td style="text-align:left;"><code>metadata.expose</code></td><td style="text-align:left;">{ <code>contentEncodingRequest?</code>: <code>string</code> ; <code>contentEncodingResponse?</code>: <code>string</code> ; <code>contentTypeRequest?</code>: <code>string</code> ; <code>contentTypeResponse?</code>: <code>string</code> ; <code>deprecated?</code>: <code>boolean</code> ; <code>inputPayload?</code>: <code>SchemaObject</code> ; <code>outputPayload?</code>: <code>SchemaObject</code> ; <code>parameter?</code>: <code>SchemaObject</code> } &amp; { <code>http</code>: { <code>method</code>: <code>&quot;GET&quot;</code> | <code>&quot;POST&quot;</code> | <code>&quot;PATCH&quot;</code> | <code>&quot;PUT&quot;</code> | <code>&quot;DELETE&quot;</code> ; <code>openApi?</code>: { <code>additionalStatusCodes?</code>: <code>StatusCode</code>[] ; <code>description</code>: <code>string</code> ; <code>isSecure</code>: <code>boolean</code> ; <code>operationId?</code>: <code>string</code> ; <code>query?</code>: <code>QueryParameter</code>&lt;{}&gt;[] ; <code>summary</code>: <code>string</code> ; <code>tags?</code>: <code>string</code>[] } ; <code>path</code>: <code>string</code> } }</td></tr><tr><td style="text-align:left;"><code>eventBridgeConfig</code></td><td style="text-align:left;"><code>DefinitionEventBridgeConfig</code></td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-7" tabindex="-1"><a class="header-anchor" href="#implementation-of-7" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerCommand</p><h4 id="inherited-from-20" tabindex="-1"><a class="header-anchor" href="#inherited-from-20" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.registerCommand</p><h4 id="defined-in-22" tabindex="-1"><a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:31</p><hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>▸ <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>subscription</code></td><td style="text-align:left;"><code>Subscription</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: <code>EBMessage</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;instanceId&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-8" tabindex="-1"><a class="header-anchor" href="#implementation-of-8" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerSubscription</p><h4 id="overrides-1" tabindex="-1"><a class="header-anchor" href="#overrides-1" aria-hidden="true">#</a> Overrides</h4><p>HttpEventBridge.registerSubscription</p><h4 id="defined-in-23" tabindex="-1"><a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a> Defined in</h4>',153),ze={href:"https://github.com/sebastianwessel/purista/blob/master/packages/dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts#L106",target:"_blank",rel:"noopener noreferrer"},Je=r('<hr><h3 id="removealllisteners" tabindex="-1"><a class="header-anchor" href="#removealllisteners" aria-hidden="true">#</a> removeAllListeners</h3><p>▸ <strong>removeAllListeners</strong>(): <code>void</code></p><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-21" tabindex="-1"><a class="header-anchor" href="#inherited-from-21" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.removeAllListeners</p><h4 id="defined-in-24" tabindex="-1"><a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:14</p><hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>▸ <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-9" tabindex="-1"><a class="header-anchor" href="#implementation-of-9" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.start</p><h4 id="overrides-2" tabindex="-1"><a class="header-anchor" href="#overrides-2" aria-hidden="true">#</a> Overrides</h4><p>HttpEventBridge.start</p><h4 id="defined-in-25" tabindex="-1"><a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a> Defined in</h4>',19),We={href:"https://github.com/sebastianwessel/purista/blob/master/packages/dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts#L89",target:"_blank",rel:"noopener noreferrer"},Xe=r('<hr><h3 id="startactivespan" tabindex="-1"><a class="header-anchor" href="#startactivespan" aria-hidden="true">#</a> startActiveSpan</h3><p>▸ <strong>startActiveSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start a child span for opentelemetry tracking</p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>context</code></td><td style="text-align:left;"><code>undefined</code> | <code>Context</code></td><td style="text-align:left;">optional context</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function to be executed within the span</td></tr></tbody></table><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-22" tabindex="-1"><a class="header-anchor" href="#inherited-from-22" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.startActiveSpan</p><h4 id="defined-in-26" tabindex="-1"><a class="header-anchor" href="#defined-in-26" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:32</p><hr><h3 id="unregistercommand" tabindex="-1"><a class="header-anchor" href="#unregistercommand" aria-hidden="true">#</a> unregisterCommand</h3><p>▸ <strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-10" tabindex="-1"><a class="header-anchor" href="#implementation-of-10" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterCommand</p><h4 id="inherited-from-23" tabindex="-1"><a class="header-anchor" href="#inherited-from-23" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.unregisterCommand</p><h4 id="defined-in-27" tabindex="-1"><a class="header-anchor" href="#defined-in-27" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:32</p><hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>▸ <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-11" tabindex="-1"><a class="header-anchor" href="#implementation-of-11" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterSubscription</p><h4 id="inherited-from-24" tabindex="-1"><a class="header-anchor" href="#inherited-from-24" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.unregisterSubscription</p><h4 id="defined-in-28" tabindex="-1"><a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/HttpEventBridge/HttpEventBridge.impl.d.ts:34</p><hr><h3 id="wrapinspan" tabindex="-1"><a class="header-anchor" href="#wrapinspan" aria-hidden="true">#</a> wrapInSpan</h3><p>▸ <strong>wrapInSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context?</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start span for opentelemetry tracking on same level. The created span will not become the &quot;active&quot; span within opentelemetry!</p><p>This means during logging and similar the spanId of parent span is logged.</p><p>Use wrapInSpan for marking points in flow of one bigger function, but not to trace the program flow itself</p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function te be executed in the span</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>Context</code></td><td style="text-align:left;">span context</td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-25" tabindex="-1"><a class="header-anchor" href="#inherited-from-25" aria-hidden="true">#</a> Inherited from</h4><p>HttpEventBridge.wrapInSpan</p><h4 id="defined-in-29" tabindex="-1"><a class="header-anchor" href="#defined-in-29" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:48</p>',58);function Ze($e,et){const n=i("RouterLink"),o=i("ExternalLinkIcon");return c(),l("div",null,[e("p",null,[d(n,{to:"/api/"},{default:a(()=>[t("PURISTA API")]),_:1}),t(" / "),d(n,{to:"/api/modules.html"},{default:a(()=>[t("Modules")]),_:1}),t(" / "),d(n,{to:"/api/modules/purista_dapr_sdk.html"},{default:a(()=>[t("@purista/dapr-sdk")]),_:1}),t(" / DaprEventBridge")]),p,e("p",null,[d(n,{to:"/api/modules/purista_dapr_sdk.html"},{default:a(()=>[t("@purista/dapr-sdk")]),_:1}),t(".DaprEventBridge")]),u,g,f,m,e("p",null,[e("a",b,[t("Hono website"),d(o)])]),v,e("ul",null,[e("li",null,[e("p",null,[y,t("<"),d(n,{to:"/api/modules/purista_dapr_sdk.html#dapreventbridgeconfig"},{default:a(()=>[x]),_:1}),t(">")]),_])]),E,e("ul",null,[e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#constructor"},{default:a(()=>[t("constructor")]),_:1})])]),B,e("ul",null,[e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#app"},{default:a(()=>[t("app")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#client"},{default:a(()=>[t("client")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#config"},{default:a(()=>[t("config")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#defaultcommandtimeout"},{default:a(()=>[t("defaultCommandTimeout")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#instanceid"},{default:a(()=>[t("instanceId")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#isshuttingdown"},{default:a(()=>[t("isShuttingDown")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#isstarted"},{default:a(()=>[t("isStarted")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#logger"},{default:a(()=>[t("logger")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#name"},{default:a(()=>[t("name")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#pubsubsubscriptions"},{default:a(()=>[t("pubSubSubscriptions")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#server"},{default:a(()=>[t("server")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#traceprovider"},{default:a(()=>[t("traceProvider")]),_:1})])]),k,e("ul",null,[e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#destroy"},{default:a(()=>[t("destroy")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#emit"},{default:a(()=>[t("emit")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#emitmessage"},{default:a(()=>[t("emitMessage")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#gettracer"},{default:a(()=>[t("getTracer")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#invoke"},{default:a(()=>[t("invoke")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#ishealthy"},{default:a(()=>[t("isHealthy")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#isready"},{default:a(()=>[t("isReady")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#off"},{default:a(()=>[t("off")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#on"},{default:a(()=>[t("on")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#registercommand"},{default:a(()=>[t("registerCommand")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#registersubscription"},{default:a(()=>[t("registerSubscription")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#removealllisteners"},{default:a(()=>[t("removeAllListeners")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#start"},{default:a(()=>[t("start")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#startactivespan"},{default:a(()=>[t("startActiveSpan")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#unregistercommand"},{default:a(()=>[t("unregisterCommand")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#unregistersubscription"},{default:a(()=>[t("unregisterSubscription")]),_:1})]),e("li",null,[d(n,{to:"/api/classes/purista_dapr_sdk.DaprEventBridge.html#wrapinspan"},{default:a(()=>[t("wrapInSpan")]),_:1})])]),D,e("table",null,[I,e("tbody",null,[T,P,e("tr",null,[H,e("td",S,[d(n,{to:"/api/modules/purista_dapr_sdk.html#daprclientconfig"},{default:a(()=>[w]),_:1})]),C]),q,R,N,A,M,L,O,K,F,j,G,U,V])]),Q,Y,z,e("p",null,[e("a",J,[t("dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts:54"),d(o)])]),W,e("p",null,[t("• "),X,t(": "),Z,t("<{ "),$,t(": "),ee,t(" ; "),te,t(": "),d(n,{to:"/api/modules/purista_dapr_sdk.html#daprclientconfig"},{default:a(()=>[de]),_:1}),t(" ; "),ne,t(": "),ae,t(" ; "),re,t(": "),oe,t(" ; "),ie,t(": "),se,t(" ; "),ce,t(": "),le,t(" ; "),he,t(": "),pe,t(" ; "),ue,t(": "),ge,t(" ; "),fe,t(": "),me,t(" ; "),be,t(": "),ve,t(" ; "),ye,t(": ("),xe,t(": { "),_e,t(": ("),Ee,t(": "),Be,t(") => "),ke,t(" ; "),De,t(": "),Ie,t(" ; "),Te,t(": "),Pe,t(" }) => "),He,t("<typeof "),Se,t(", typeof "),we,t("> ; "),Ce,t(": "),qe,t(" ; "),Re,t(": "),Ne,t(" ; "),Ae,t(": "),Me,t(" ; "),Le,t(": "),Oe,t(" }>")]),Ke,e("p",null,[t("• "),Fe,t(),je,t(": "),d(n,{to:"/api/modules/purista_dapr_sdk.html#daprpubsubtype"},{default:a(()=>[Ge]),_:1}),t("[] = "),Ue]),Ve,e("p",null,[e("a",Qe,[t("dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts:52"),d(o)])]),Ye,e("p",null,[e("a",ze,[t("dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts:106"),d(o)])]),Je,e("p",null,[e("a",We,[t("dapr-sdk/src/DaprEventBridge/DaprEventBridge.impl.ts:89"),d(o)])]),Xe])}const nt=s(h,[["render",Ze],["__file","purista_dapr_sdk.DaprEventBridge.html.vue"]]);export{nt as default};
