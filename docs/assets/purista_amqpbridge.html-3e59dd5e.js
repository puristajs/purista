import{_ as l,W as o,X as c,Z as e,a0 as n,a1 as s,$ as t,Y as r,D as i}from"./framework-d89ed822.js";const p={},h=r(`<h1 id="module-purista-amqpbridge" tabindex="-1"><a class="header-anchor" href="#module-purista-amqpbridge" aria-hidden="true">#</a> Module: @purista/amqpbridge</h1><p>Package for using a AMQP broker like rabbitMQ as event bridge.</p><p>Example usage:</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AmqpBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/amqpbridge&#39;</span>

<span class="token comment">// create and init our eventbridge</span>
  <span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmqpBridge</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="namespaces" tabindex="-1"><a class="header-anchor" href="#namespaces" aria-hidden="true">#</a> Namespaces</h3>`,7),u=e("h3",{id:"classes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#classes","aria-hidden":"true"},"#"),t(" Classes")],-1),g=e("h3",{id:"type-aliases",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-aliases","aria-hidden":"true"},"#"),t(" Type Aliases")],-1),_=e("h3",{id:"variables",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),t(" Variables")],-1),f=e("h3",{id:"functions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),t(" Functions")],-1),m=r('<h2 id="type-aliases-1" tabindex="-1"><a class="header-anchor" href="#type-aliases-1" aria-hidden="true">#</a> Type Aliases</h2><h3 id="amqpbridgeconfig" tabindex="-1"><a class="header-anchor" href="#amqpbridgeconfig" aria-hidden="true">#</a> AmqpBridgeConfig</h3><p>Ƭ <strong>AmqpBridgeConfig</strong>: <code>Object</code></p><p>AmqpBridge bridge config</p><p><strong><code>See</code></strong></p>',5),b={href:"https://amqp-node.github.io/amqplib/",target:"_blank",rel:"noopener noreferrer"},y=e("h4",{id:"type-declaration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-declaration","aria-hidden":"true"},"#"),t(" Type declaration")],-1),x=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),q=e("td",{style:{"text-align":"left"}},[e("code",null,"encoder?")],-1),k={style:{"text-align":"left"}},v=e("code",null,"Encoder",-1),A=e("td",{style:{"text-align":"left"}},[t("the encoder(s) to be used for AMQP messages "),e("strong",null,[e("code",null,"Default")]),t(" jsonEncoder")],-1),E=e("td",{style:{"text-align":"left"}},[e("code",null,"encrypter?")],-1),C={style:{"text-align":"left"}},B=e("code",null,"Encrypter",-1),D=e("td",{style:{"text-align":"left"}},[t("the encrypter(s) to be used for AMQP messages "),e("strong",null,[e("code",null,"Default")]),t(" plain")],-1),F=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"exchangeName?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the AMQP exchage name to be used "),e("strong",null,[e("code",null,"Default")]),t(" purista")])],-1),w=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"exchangeOptions?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Options.AssertExchange")]),e("td",{style:{"text-align":"left"}},"the AMQP exchange options")],-1),P=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"namePrefix?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the queue prefix to be used for all PURISTA queues except short living queues created by the broker on request "),e("strong",null,[e("code",null,"Default")]),t(" purista")])],-1),z=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"socketOptions?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"any")]),e("td",{style:{"text-align":"left"}},"socket options")],-1),O=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"url?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string"),t(" | "),e("code",null,"Options.Connect")]),e("td",{style:{"text-align":"left"}},[t("the AMQP broker url "),e("strong",null,[e("code",null,"Default")]),t(" amqp://localhost")])],-1),L=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),N={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/types/AmqpBridgeConfig.ts#L11",target:"_blank",rel:"noopener noreferrer"},R=e("hr",null,null,-1),T=e("h3",{id:"encoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encoder","aria-hidden":"true"},"#"),t(" Encoder")],-1),H=e("strong",null,"Encoder",-1),M=e("code",null,"Record",-1),V=e("code",null,"string",-1),Q=e("code",null,"EncoderFunctions",-1),I=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),S={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/types/Encoder.ts#L3",target:"_blank",rel:"noopener noreferrer"},j=r('<hr><h3 id="encryptfunctions" tabindex="-1"><a class="header-anchor" href="#encryptfunctions" aria-hidden="true">#</a> EncryptFunctions</h3><p>Ƭ <strong>EncryptFunctions</strong>: <code>Object</code></p><h4 id="type-declaration-1" tabindex="-1"><a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>decrypt</code></td><td style="text-align:left;">(<code>input</code>: <code>Buffer</code>) =&gt; <code>Promise</code>&lt;<code>Buffer</code>&gt;</td></tr><tr><td style="text-align:left;"><code>encrypt</code></td><td style="text-align:left;">(<code>input</code>: <code>Buffer</code>) =&gt; <code>Promise</code>&lt;<code>Buffer</code>&gt;</td></tr></tbody></table><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4>',6),U={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/types/EncryptFunctions.ts#L1",target:"_blank",rel:"noopener noreferrer"},W=e("hr",null,null,-1),X=e("h3",{id:"encrypter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encrypter","aria-hidden":"true"},"#"),t(" Encrypter")],-1),Y=e("strong",null,"Encrypter",-1),Z=e("code",null,"Record",-1),$=e("code",null,"string",-1),G=e("code",null,"EncryptFunctions",-1),J=e("h4",{id:"defined-in-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-3","aria-hidden":"true"},"#"),t(" Defined in")],-1),K={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/types/Encrypter.ts#L3",target:"_blank",rel:"noopener noreferrer"},ee=r('<h2 id="variables-1" tabindex="-1"><a class="header-anchor" href="#variables-1" aria-hidden="true">#</a> Variables</h2><h3 id="puristaversion" tabindex="-1"><a class="header-anchor" href="#puristaversion" aria-hidden="true">#</a> puristaVersion</h3><p>• <code>Const</code> <strong>puristaVersion</strong>: <code>&quot;1.4.9&quot;</code></p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4>',4),te={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/version.ts#L1",target:"_blank",rel:"noopener noreferrer"},ne=r('<h2 id="functions-1" tabindex="-1"><a class="header-anchor" href="#functions-1" aria-hidden="true">#</a> Functions</h2><h3 id="deserializeotpfromamqpheader" tabindex="-1"><a class="header-anchor" href="#deserializeotpfromamqpheader" aria-hidden="true">#</a> deserializeOtpFromAmqpHeader</h3><p>▸ <strong>deserializeOtpFromAmqpHeader</strong>(<code>logger</code>, <code>message</code>, <code>encrypter</code>, <code>encoder</code>): <code>Promise</code>&lt;<code>undefined</code> | <code>Context</code>&gt;</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',4),ae=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),se=e("td",{style:{"text-align":"left"}},[e("code",null,"logger")],-1),de={style:{"text-align":"left"}},re=e("code",null,"Logger",-1),ie=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"message")]),e("td",{style:{"text-align":"left"}},[e("code",null,"null"),t(" | "),e("code",null,"ConsumeMessage")])],-1),le=e("td",{style:{"text-align":"left"}},[e("code",null,"encrypter")],-1),oe={style:{"text-align":"left"}},ce=e("code",null,"Encrypter",-1),pe=e("td",{style:{"text-align":"left"}},[e("code",null,"encoder")],-1),he={style:{"text-align":"left"}},ue=e("code",null,"Encoder",-1),ge=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),_e=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"undefined"),t(" | "),e("code",null,"Context"),t(">")],-1),fe=e("h4",{id:"defined-in-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-5","aria-hidden":"true"},"#"),t(" Defined in")],-1),me={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/deserializeOtpFromAmqpHeader.impl.ts#L8",target:"_blank",rel:"noopener noreferrer"},be=e("hr",null,null,-1),ye=e("h3",{id:"getdefaultconfig",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getdefaultconfig","aria-hidden":"true"},"#"),t(" getDefaultConfig")],-1),xe=e("strong",null,"getDefaultConfig",-1),qe=e("code",null,"Complete",-1),ke=e("code",null,"AmqpBridgeConfig",-1),ve=e("code",null,"exchangeName",-1),Ae=e("code",null,"string",-1),Ee=e("code",null,"url",-1),Ce=e("code",null,"string",-1),Be=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),De=e("code",null,"Complete",-1),Fe=e("code",null,"AmqpBridgeConfig",-1),we=e("code",null,"exchangeName",-1),Pe=e("code",null,"string",-1),ze=e("code",null,"url",-1),Oe=e("code",null,"string",-1),Le=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),Ne={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/getDefaultConfig.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"},Re=r('<hr><h3 id="serializeotpforamqpheader" tabindex="-1"><a class="header-anchor" href="#serializeotpforamqpheader" aria-hidden="true">#</a> serializeOtpForAmqpHeader</h3><p>▸ <strong>serializeOtpForAmqpHeader</strong>(<code>header</code>): <code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>string</code>&gt;</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>header</code></td><td style="text-align:left;"><code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>string</code>&gt;</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>string</code>&gt;</p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4>',8),Te={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/serializeOtpForAmqpHeader.impl.ts#L3",target:"_blank",rel:"noopener noreferrer"};function He(Me,Ve){const a=i("RouterLink"),d=i("ExternalLinkIcon");return o(),c("div",null,[e("p",null,[n(a,{to:"/api/"},{default:s(()=>[t("PURISTA API - v1.4.9")]),_:1}),t(" / "),n(a,{to:"/api/modules.html"},{default:s(()=>[t("Modules")]),_:1}),t(" / @purista/amqpbridge")]),h,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.internal.html"},{default:s(()=>[t("internal")]),_:1})])]),u,e("ul",null,[e("li",null,[n(a,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html"},{default:s(()=>[t("AmqpBridge")]),_:1})])]),g,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:s(()=>[t("AmqpBridgeConfig")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:s(()=>[t("Encoder")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encryptfunctions"},{default:s(()=>[t("EncryptFunctions")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:s(()=>[t("Encrypter")]),_:1})])]),_,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#puristaversion"},{default:s(()=>[t("puristaVersion")]),_:1})])]),f,e("ul",null,[e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#deserializeotpfromamqpheader"},{default:s(()=>[t("deserializeOtpFromAmqpHeader")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#getdefaultconfig"},{default:s(()=>[t("getDefaultConfig")]),_:1})]),e("li",null,[n(a,{to:"/api/modules/purista_amqpbridge.html#serializeotpforamqpheader"},{default:s(()=>[t("serializeOtpForAmqpHeader")]),_:1})])]),m,e("p",null,[e("a",b,[t("amqplib documentation"),n(d)])]),y,e("table",null,[x,e("tbody",null,[e("tr",null,[q,e("td",k,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:s(()=>[v]),_:1})]),A]),e("tr",null,[E,e("td",C,[n(a,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:s(()=>[B]),_:1})]),D]),F,w,P,z,O])]),L,e("p",null,[e("a",N,[t("packages/amqpbridge/src/types/AmqpBridgeConfig.ts:11"),n(d)])]),R,T,e("p",null,[t("Ƭ "),H,t(": "),M,t("<"),V,t(", "),n(a,{to:"/api/modules/purista_amqpbridge.internal.html#encoderfunctions"},{default:s(()=>[Q]),_:1}),t(">")]),I,e("p",null,[e("a",S,[t("packages/amqpbridge/src/types/Encoder.ts:3"),n(d)])]),j,e("p",null,[e("a",U,[t("packages/amqpbridge/src/types/EncryptFunctions.ts:1"),n(d)])]),W,X,e("p",null,[t("Ƭ "),Y,t(": "),Z,t("<"),$,t(", "),n(a,{to:"/api/modules/purista_amqpbridge.html#encryptfunctions"},{default:s(()=>[G]),_:1}),t(">")]),J,e("p",null,[e("a",K,[t("packages/amqpbridge/src/types/Encrypter.ts:3"),n(d)])]),ee,e("p",null,[e("a",te,[t("packages/amqpbridge/src/version.ts:1"),n(d)])]),ne,e("table",null,[ae,e("tbody",null,[e("tr",null,[se,e("td",de,[n(a,{to:"/api/classes/purista_amqpbridge.internal.Logger.html"},{default:s(()=>[re]),_:1})])]),ie,e("tr",null,[le,e("td",oe,[n(a,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:s(()=>[ce]),_:1})])]),e("tr",null,[pe,e("td",he,[n(a,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:s(()=>[ue]),_:1})])])])]),ge,_e,fe,e("p",null,[e("a",me,[t("packages/amqpbridge/src/deserializeOtpFromAmqpHeader.impl.ts:8"),n(d)])]),be,ye,e("p",null,[t("▸ "),xe,t("(): "),n(a,{to:"/api/modules/purista_amqpbridge.internal.html#complete"},{default:s(()=>[qe]),_:1}),t("<"),n(a,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:s(()=>[ke]),_:1}),t("> & { "),ve,t(": "),Ae,t(" ; "),Ee,t(": "),Ce,t(" }")]),Be,e("p",null,[n(a,{to:"/api/modules/purista_amqpbridge.internal.html#complete"},{default:s(()=>[De]),_:1}),t("<"),n(a,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:s(()=>[Fe]),_:1}),t("> & { "),we,t(": "),Pe,t(" ; "),ze,t(": "),Oe,t(" }")]),Le,e("p",null,[e("a",Ne,[t("packages/amqpbridge/src/getDefaultConfig.impl.ts:5"),n(d)])]),Re,e("p",null,[e("a",Te,[t("packages/amqpbridge/src/serializeOtpForAmqpHeader.impl.ts:3"),n(d)])])])}const Ie=l(p,[["render",He],["__file","purista_amqpbridge.html.vue"]]);export{Ie as default};
