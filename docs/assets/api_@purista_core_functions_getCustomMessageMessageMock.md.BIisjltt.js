import{_ as o,c,o as d,ag as a}from"./chunks/framework.U_AETC1W.js";const l=JSON.parse('{"title":"Function: getCustomMessageMessageMock()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/functions/getCustomMessageMessageMock.md","filePath":"api/@purista/core/functions/getCustomMessageMessageMock.md","lastUpdated":1739900666000}'),s={name:"api/@purista/core/functions/getCustomMessageMessageMock.md"};function t(r,e,n,i,g,m){return d(),c("div",null,e[0]||(e[0]=[a('<p><a href="./../README.html"><strong>@purista/core v1.11.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / getCustomMessageMessageMock</p><h1 id="function-getcustommessagemessagemock" tabindex="-1">Function: getCustomMessageMessageMock() <a class="header-anchor" href="#function-getcustommessagemessagemock" aria-label="Permalink to &quot;Function: getCustomMessageMessageMock()&quot;">​</a></h1><blockquote><p><strong>getCustomMessageMessageMock</strong>&lt;<code>PayloadType</code>&gt;(<code>eventName</code>, <code>payload</code>, <code>input</code>?): <code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#custommessage"><code>CustomMessage</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>PayloadType</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/mocks/messages/getCustomMessage.mock.ts#L15" target="_blank" rel="noreferrer">packages/core/src/mocks/messages/getCustomMessage.mock.ts:15</a></p><p>A function that returns a mocked custom message.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>PayloadType</strong></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="eventname" tabindex="-1">eventName <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName&quot;">​</a></h3><p><code>string</code></p><h3 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h3><p><code>PayloadType</code></p><h3 id="input" tabindex="-1">input? <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input?&quot;">​</a></h3><p><code>Partial</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#custommessage"><code>CustomMessage</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>PayloadType</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#custommessage"><code>CustomMessage</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>PayloadType</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p>',18)]))}const u=o(s,[["render",t]]);export{l as __pageData,u as default};
