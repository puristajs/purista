import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,a as e}from"./app.414c019c.js";const t={},p=e(`<h1 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h1><p>Testing is one of the most love-hate-stories for developers.<br> It&#39;s always balancing between quick delivery, highly automated tests and catching each edge case and of course available time/money.</p><p>Testing does not come for free, and you need time for it, and as we all know: time is money.</p><p>So, how can PURISTA help here?</p><p>First, because of it&#39;s concept and core design.<br> As there are schema validations in each service function for input and output, we avoid a lot of edge cases upfront.<br> You do not need to test, what happens, if there is some wrong input.<br> Also, you do not need to take care to prevent data leaks if something fails. It&#39;s clear, it&#39;s defined, and nothing a developer needs to implement and test over and over again. So, just put a \u2705 on this topic.</p><p>We can be pretty sure, that there is no wrong input data cascaded through the system.</p><p>Plus: We use typescript and types generated out of schema.<br> So we avoid a lot of issues again.<br> We do not struggle if there is one change on the one end, that unexpectedly something breaks at the other end.<br> Linter and typescript are your friend.<br> Next \u2705 we have.</p><p>Second big thing to point out here:<br> We can build real complex systems, but we write most of the time only simple, encapsulated functions, which are following the same design pattern.<br> We have always defined, validated input and always defined, validated output. Input and Output validation + proper error response = \u2705</p><p>We also do not need to think about edge cases like &quot;what happens if something inside a function throws&quot;.<br> We already know it - it&#39;s caught, logged and handled with a defined error response. Unhandled, unexpected errors = \u2705</p><p>This means we can more focus on testing single functions.<br> Just prove the business logic, instead of proving correct code.</p><h2 id="mocks" tabindex="-1"><a class="header-anchor" href="#mocks" aria-hidden="true">#</a> Mocks</h2><p>PURISTA comes with some simple mocks, which should developers help to write tests fast and simple.</p><p>Currently, there are mocks available for:</p><ul><li>FunctionContext</li><li>SubscriptionContext</li><li>Eventbridge</li><li>Logger</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Service function to test:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder</span> <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> invoke <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token comment">// your logic does some stuff with payload and extract parameters</span>

      <span class="token keyword">const</span> invokePayload <span class="token operator">=</span> <span class="token punctuation">{</span>
        complex<span class="token operator">:</span> <span class="token punctuation">{</span>
          payload<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> invokeParameter <span class="token operator">=</span> <span class="token punctuation">{</span>
        paramOne<span class="token operator">:</span> <span class="token string">&#39;value param 1&#39;</span><span class="token punctuation">,</span>
        paramTwo<span class="token operator">:</span> <span class="token string">&#39;value param 2&#39;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// invoke some other service function</span>
      <span class="token keyword">const</span> invokeResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span>InvokeResultPayloadType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        receiver<span class="token operator">:</span> <span class="token punctuation">{</span>
          serviceName<span class="token operator">:</span> <span class="token string">&#39;OtherService&#39;</span><span class="token punctuation">,</span>
          serviceVersion<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
          serviceTarget<span class="token operator">:</span> <span class="token string">&#39;otherServiceFunction&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        command<span class="token operator">:</span> <span class="token punctuation">{</span>
          payload<span class="token operator">:</span> invokePayload<span class="token punctuation">,</span>
          parameter<span class="token operator">:</span> invokeParameter<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// do stuff with in invokeResult</span>
      <span class="token comment">// ... </span>
      <span class="token comment">// return the result of our function</span>
      <span class="token keyword">return</span> result
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be tested this way:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getEventBridgeMock<span class="token punctuation">,</span> getFunctionContextMock<span class="token punctuation">,</span> getLoggerMock<span class="token punctuation">,</span> HandledError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> functionDefinition <span class="token keyword">from</span> <span class="token string">&#39;./index&#39;</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> functionDefinition<span class="token punctuation">.</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token function">getLoggerMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mock<span class="token punctuation">,</span> <span class="token function">getEventBridgeMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mock<span class="token punctuation">)</span>
<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;returns a new user id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// the function input payload</span>
  <span class="token comment">// this is the result of all hooks &amp; transformations</span>
  <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token string">&#39;mail@example.com&#39;</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">&#39;the_password&#39;</span><span class="token punctuation">,</span>
    test<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// the function input parameter</span>
  <span class="token comment">// this is the result of all hooks &amp; transformations</span>
  <span class="token keyword">const</span> parameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// the original input before any hook, validation/transformation is done</span>
  <span class="token keyword">const</span> messagePayload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>payload<span class="token punctuation">}</span>
  <span class="token keyword">const</span> messageParameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>parameter<span class="token punctuation">}</span>

  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">getFunctionContextMock</span><span class="token punctuation">(</span>messagePayload<span class="token punctuation">,</span> messageParameter<span class="token punctuation">)</span>

  context<span class="token punctuation">.</span>stubs<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span><span class="token function">resolves</span><span class="token punctuation">(</span> 
    <span class="token comment">// pass your invoke result data here</span>
    <span class="token string">&#39;return some mocked data here&#39;</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>mock<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>stubs<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">.</span><span class="token function">calledWith</span><span class="token punctuation">(</span>initialPayload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// if you handle invocation errors within your function, you might want to test this unhappy path.</span>
<span class="token comment">// here is an example on how to let a invocation fail in tests</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;throws because invocation failed&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token string">&#39;mail@example.com&#39;</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">&#39;the_password&#39;</span><span class="token punctuation">,</span>
    test<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> parameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">const</span> messagePayload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>payload<span class="token punctuation">}</span>
  <span class="token keyword">const</span> messageParameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>parameter<span class="token punctuation">}</span>

  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">getFunctionContextMock</span><span class="token punctuation">(</span>messagePayload<span class="token punctuation">,</span> messageParameter<span class="token punctuation">)</span>

  context<span class="token punctuation">.</span>stubs<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span><span class="token function">rejects</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;something went wrong&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>mock<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&#39;Did not throw&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, you just need to call your function with some input values and maybe mock invocations of other functions.</p><p>There are no unknowns, dependency injections you need to take care of, side effects from other functions if you keep your functions as simple as possible, stateless and separated into many little pieces.</p><p>The correct types for your function in-/output are already set.</p><p>With this approach, testing becomes real simple, powerful and reduces the time/costs to a minimum.</p><p>The same way you can test subscription functions:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createTestCommandMsg<span class="token punctuation">,</span> getEventBridgeMock<span class="token punctuation">,</span> getLoggerMock<span class="token punctuation">,</span> getSubscriptionContextMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> functionDefinition <span class="token keyword">from</span> <span class="token string">&#39;./index&#39;</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> functionDefinition<span class="token punctuation">.</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token function">getLoggerMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mock<span class="token punctuation">,</span> <span class="token function">getEventBridgeMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mock<span class="token punctuation">)</span>
<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;returns a new user id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span>
    email<span class="token operator">:</span> <span class="token string">&#39;mail@example.com&#39;</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">&#39;the_password&#39;</span><span class="token punctuation">,</span>
    test<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> parameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">const</span> messagePayload <span class="token operator">=</span> <span class="token punctuation">{</span> payload<span class="token operator">:</span> <span class="token punctuation">{</span> payload<span class="token punctuation">,</span> parameter <span class="token punctuation">}</span> <span class="token punctuation">}</span>

  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">getSubscriptionContextMock</span><span class="token punctuation">(</span><span class="token function">createTestCommandMsg</span><span class="token punctuation">(</span>messagePayload<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// as we have a subscription here.</span>
  <span class="token comment">// the function has only payload as second parameter.</span>
  <span class="token comment">// if your subscription is listening on command</span>
  <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>mock<span class="token punctuation">,</span> messagePayload <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>stubs<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">.</span>called<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are some test helper functions to create propper messages:</p><ul><li>createTestCommandMsg</li><li>createTestCommandResponseMsg</li><li>createTestCommandErrorResponseMsg</li><li>createTestCommandMsg</li></ul>`,27),o=[p];function c(i,l){return s(),a("div",null,o)}var d=n(t,[["render",c],["__file","6_testing.html.vue"]]);export{d as default};
