import{_ as t,c as n,o as r,ag as o}from"./chunks/framework.U_AETC1W.js";const p=JSON.parse('{"title":"Type Alias: EventBridgeEventsBasic","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/EventBridgeEventsBasic.md","filePath":"api/@purista/core/type-aliases/EventBridgeEventsBasic.md","lastUpdated":1740066608000}'),a={name:"api/@purista/core/type-aliases/EventBridgeEventsBasic.md"};function i(c,e,d,s,l,g){return r(),n("div",null,e[0]||(e[0]=[o('<p><a href="./../README.html"><strong>@purista/core v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / EventBridgeEventsBasic</p><h1 id="type-alias-eventbridgeeventsbasic" tabindex="-1">Type Alias: EventBridgeEventsBasic <a class="header-anchor" href="#type-alias-eventbridgeeventsbasic" aria-label="Permalink to &quot;Type Alias: EventBridgeEventsBasic&quot;">​</a></h1><blockquote><p><strong>EventBridgeEventsBasic</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/EventBridge/types/EventBridgeEvents.ts#L20" target="_blank" rel="noreferrer">packages/core/src/core/EventBridge/types/EventBridgeEvents.ts:20</a></p><p>Events which can be emitted by a event bridge</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="eventbridge-connected" tabindex="-1">eventbridge-connected <a class="header-anchor" href="#eventbridge-connected" aria-label="Permalink to &quot;eventbridge-connected&quot;">​</a></h3><blockquote><p><strong>eventbridge-connected</strong>: <code>never</code></p></blockquote><p>emitted when then connection to event bridge is established</p><h3 id="eventbridge-connection-error" tabindex="-1">eventbridge-connection-error <a class="header-anchor" href="#eventbridge-connection-error" aria-label="Permalink to &quot;eventbridge-connection-error&quot;">​</a></h3><blockquote><p><strong>eventbridge-connection-error</strong>: <code>undefined</code> | <code>unknown</code> | <code>Error</code></p></blockquote><p>emitted when the connection to event bridge can not be established or a connection has issues or gets closed unexpectedly</p><h3 id="eventbridge-disconnected" tabindex="-1">eventbridge-disconnected <a class="header-anchor" href="#eventbridge-disconnected" aria-label="Permalink to &quot;eventbridge-disconnected&quot;">​</a></h3><blockquote><p><strong>eventbridge-disconnected</strong>: <code>never</code></p></blockquote><p>emitted when the connection to event bridge closed</p><h3 id="eventbridge-error" tabindex="-1">eventbridge-error <a class="header-anchor" href="#eventbridge-error" aria-label="Permalink to &quot;eventbridge-error&quot;">​</a></h3><blockquote><p><strong>eventbridge-error</strong>: <a href="./../classes/UnhandledError.html"><code>UnhandledError</code></a> | <code>unknown</code></p></blockquote><p>emitted on internal event bridge error</p><h3 id="eventbridge-reconnecting" tabindex="-1">eventbridge-reconnecting <a class="header-anchor" href="#eventbridge-reconnecting" aria-label="Permalink to &quot;eventbridge-reconnecting&quot;">​</a></h3><blockquote><p><strong>eventbridge-reconnecting</strong>: <code>never</code></p></blockquote><p>emitted on retry to connect to event bridge</p>',23)]))}const v=t(a,[["render",i]]);export{p as __pageData,v as default};
