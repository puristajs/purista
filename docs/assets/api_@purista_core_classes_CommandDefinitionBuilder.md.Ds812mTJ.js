import{_ as o,c as t,o as a,ag as d}from"./chunks/framework.U_AETC1W.js";const p=JSON.parse('{"title":"Class: CommandDefinitionBuilder<S, C>","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/classes/CommandDefinitionBuilder.md","filePath":"api/@purista/core/classes/CommandDefinitionBuilder.md","lastUpdated":1740066608000}'),c={name:"api/@purista/core/classes/CommandDefinitionBuilder.md"};function r(n,e,s,i,l,u){return a(),t("div",null,e[0]||(e[0]=[d(`<p><a href="./../README.html"><strong>@purista/core v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / CommandDefinitionBuilder</p><h1 id="class-commanddefinitionbuilder-s-c" tabindex="-1">Class: CommandDefinitionBuilder&lt;S, C&gt; <a class="header-anchor" href="#class-commanddefinitionbuilder-s-c" aria-label="Permalink to &quot;Class: CommandDefinitionBuilder\\&lt;S, C\\&gt;&quot;">​</a></h1><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L44" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:44</a></p><p>Command definition builder is a helper to create and define a command for a service. It helps to set all needed information like schemas and hooks. With these information, the types are automatically set and extended.</p><p>A working schema definition needs at least a command name, a short description and the function implementation.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>S</strong> <em>extends</em> <a href="./Service.html"><code>Service</code></a></p><p>• <strong>C</strong> <em>extends</em> <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a> = <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a></p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="new-commanddefinitionbuilder" tabindex="-1">new CommandDefinitionBuilder() <a class="header-anchor" href="#new-commanddefinitionbuilder" aria-label="Permalink to &quot;new CommandDefinitionBuilder()&quot;">​</a></h3><blockquote><p><strong>new CommandDefinitionBuilder</strong>&lt;<code>S</code>, <code>C</code>&gt;(<code>commandName</code>, <code>commandDescription</code>, <code>eventName</code>?, <code>deprecated</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L104" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:104</a></p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="commandname" tabindex="-1">commandName <a class="header-anchor" href="#commandname" aria-label="Permalink to &quot;commandName&quot;">​</a></h5><p><code>string</code></p><h5 id="commanddescription" tabindex="-1">commandDescription <a class="header-anchor" href="#commanddescription" aria-label="Permalink to &quot;commandDescription&quot;">​</a></h5><p><code>string</code></p><h5 id="eventname" tabindex="-1">eventName? <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName?&quot;">​</a></h5><p><code>string</code></p><h5 id="deprecated" tabindex="-1">deprecated? <a class="header-anchor" href="#deprecated" aria-label="Permalink to &quot;deprecated?&quot;">​</a></h5><p><code>boolean</code> = <code>false</code></p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="addopenapierrorstatuscodes" tabindex="-1">addOpenApiErrorStatusCodes() <a class="header-anchor" href="#addopenapierrorstatuscodes" aria-label="Permalink to &quot;addOpenApiErrorStatusCodes()&quot;">​</a></h3><blockquote><p><strong>addOpenApiErrorStatusCodes</strong>(...<code>codes</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L389" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:389</a></p><p>If a function can return other status codes, than the default ones, you should add them to openApi definition. Per default, 200, 204, 400, 401 and 500 can be autogenerated in most cases. Special cases or different status codes should be added with this function.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="codes" tabindex="-1">codes <a class="header-anchor" href="#codes" aria-label="Permalink to &quot;codes&quot;">​</a></h5><p>...<a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a>[]</p><p>List of status codes</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addErrorStatusCodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StatusCode.PaymentRequired, StatusCode.Conflict)</span></span></code></pre></div><hr><h3 id="addopenapitags" tabindex="-1">addOpenApiTags() <a class="header-anchor" href="#addopenapitags" aria-label="Permalink to &quot;addOpenApiTags()&quot;">​</a></h3><blockquote><p><strong>addOpenApiTags</strong>(...<code>tags</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L371" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:371</a></p><p>Add tags for openApi definition for given function. It is recommended to use some enum for tags to avoid typo issues.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="tags" tabindex="-1">tags <a class="header-anchor" href="#tags" aria-label="Permalink to &quot;tags&quot;">​</a></h5><p>...<code>string</code>[]</p><p>List of tag strings</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Public&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="addoutputschema" tabindex="-1">addOutputSchema() <a class="header-anchor" href="#addoutputschema" aria-label="Permalink to &quot;addOutputSchema()&quot;">​</a></h3><blockquote><p><strong>addOutputSchema</strong>&lt;<code>OutputSchema</code>&gt;(<code>outputSchema</code>, <code>outputContentType</code>?, <code>outputContentEncoding</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>OutputSchema</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L299" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:299</a></p><p>Add a schema for output payload validation. Types for payload of message and function payload output are generated from given schema.</p><h4 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>OutputSchema</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="outputschema" tabindex="-1">outputSchema <a class="header-anchor" href="#outputschema" aria-label="Permalink to &quot;outputSchema&quot;">​</a></h5><p><code>OutputSchema</code></p><p>The schema validation for output payload</p><h5 id="outputcontenttype" tabindex="-1">outputContentType? <a class="header-anchor" href="#outputcontenttype" aria-label="Permalink to &quot;outputContentType?&quot;">​</a></h5><p><code>string</code></p><p>optional the content type of payload</p><h5 id="outputcontentencoding" tabindex="-1">outputContentEncoding? <a class="header-anchor" href="#outputcontentencoding" aria-label="Permalink to &quot;outputContentEncoding?&quot;">​</a></h5><p><code>string</code></p><p>optional the content encoding</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>OutputSchema</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="addparameterschema" tabindex="-1">addParameterSchema() <a class="header-anchor" href="#addparameterschema" aria-label="Permalink to &quot;addParameterSchema()&quot;">​</a></h3><blockquote><p><strong>addParameterSchema</strong>&lt;<code>ParamsSchema</code>&gt;(<code>parameterSchema</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>ParamsSchema</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L273" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:273</a></p><p>Add a schema for output parameter validation. Types for parameter of message and function parameter output are generated from given schema.</p><h4 id="type-parameters-2" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>ParamsSchema</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="parameterschema" tabindex="-1">parameterSchema <a class="header-anchor" href="#parameterschema" aria-label="Permalink to &quot;parameterSchema&quot;">​</a></h5><p><code>ParamsSchema</code></p><p>The schema validation for output parameter</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>ParamsSchema</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="addpayloadschema" tabindex="-1">addPayloadSchema() <a class="header-anchor" href="#addpayloadschema" aria-label="Permalink to &quot;addPayloadSchema()&quot;">​</a></h3><blockquote><p><strong>addPayloadSchema</strong>&lt;<code>PayloadSchema</code>&gt;(<code>inputSchema</code>, <code>inputContentType</code>?, <code>inputContentEncoding</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>PayloadSchema</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L243" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:243</a></p><p>Add a schema for input payload validation. Types for payload of message and function payload input are generated from given schema.</p><h4 id="type-parameters-3" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-3" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>PayloadSchema</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="inputschema" tabindex="-1">inputSchema <a class="header-anchor" href="#inputschema" aria-label="Permalink to &quot;inputSchema&quot;">​</a></h5><p><code>PayloadSchema</code></p><p>The schema validation for input payload</p><h5 id="inputcontenttype" tabindex="-1">inputContentType? <a class="header-anchor" href="#inputcontenttype" aria-label="Permalink to &quot;inputContentType?&quot;">​</a></h5><p><code>string</code></p><p>optional the content type of payload</p><h5 id="inputcontentencoding" tabindex="-1">inputContentEncoding? <a class="header-anchor" href="#inputcontentencoding" aria-label="Permalink to &quot;inputContentEncoding?&quot;">​</a></h5><p><code>string</code></p><p>optional the content encoding</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>PayloadSchema</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="addqueryparameters" tabindex="-1">addQueryParameters() <a class="header-anchor" href="#addqueryparameters" aria-label="Permalink to &quot;addQueryParameters()&quot;">​</a></h3><blockquote><p><strong>addQueryParameters</strong>(...<code>queryParams</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L354" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:354</a></p><p>Define query parameters if you expose the function as http endpoint. Query parameters are add to openApi definition. Query parameters are add to input parameters.</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="queryparams" tabindex="-1">queryParams <a class="header-anchor" href="#queryparams" aria-label="Permalink to &quot;queryParams&quot;">​</a></h5><p>...<a href="./../type-aliases/QueryParameter.html"><code>QueryParameter</code></a>&lt;<code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;&gt;[]</p><p>Add one or more query parameter definitions</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addQueryParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;limit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="adviceautoacknowledgemessages" tabindex="-1">adviceAutoacknowledgeMessages() <a class="header-anchor" href="#adviceautoacknowledgemessages" aria-label="Permalink to &quot;adviceAutoacknowledgeMessages()&quot;">​</a></h3><blockquote><p><strong>adviceAutoacknowledgeMessages</strong>(<code>acknowledge</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L807" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:807</a></p><p>Instruct the event bridge message broker to autoacknowledge commands as soon as they arrive. This means, a message will not be resent, if the command execution fails unexpected.</p><p>If set to false, the command message will be resent from message broker to eventbridge, if:</p><ul><li>the underlaying message broker supports it</li><li>if the command execution fails unexpected</li><li>if sending of command response failed</li></ul><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="acknowledge" tabindex="-1">acknowledge <a class="header-anchor" href="#acknowledge" aria-label="Permalink to &quot;acknowledge&quot;">​</a></h5><p><code>boolean</code> = <code>true</code></p><p>Enable (true) and disable (false)</p><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinition</p><hr><h3 id="canemit" tabindex="-1">canEmit() <a class="header-anchor" href="#canemit" aria-label="Permalink to &quot;canEmit()&quot;">​</a></h3><blockquote><p><strong>canEmit</strong>&lt;<code>EventName</code>, <code>T</code>&gt;(<code>eventName</code>, <code>schema</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>] &amp; <code>Record</code>&lt;<code>EventName</code>, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>T</code>&gt;&gt;&gt;&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L201" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:201</a></p><p>Define which custom events the command can emit.</p><h4 id="type-parameters-4" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-4" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>EventName</strong> <em>extends</em> <code>string</code></p><p>• <strong>T</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="eventname-1" tabindex="-1">eventName <a class="header-anchor" href="#eventname-1" aria-label="Permalink to &quot;eventName&quot;">​</a></h5><p><code>EventName</code></p><p>The custom event name</p><h5 id="schema" tabindex="-1">schema <a class="header-anchor" href="#schema" aria-label="Permalink to &quot;schema&quot;">​</a></h5><p><code>T</code></p><p>the payload schema</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>] &amp; <code>Record</code>&lt;<code>EventName</code>, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>T</code>&gt;&gt;&gt;&gt;&gt;</p><hr><h3 id="caninvoke" tabindex="-1">canInvoke() <a class="header-anchor" href="#caninvoke" aria-label="Permalink to &quot;canInvoke()&quot;">​</a></h3><blockquote><p><strong>canInvoke</strong>&lt;<code>Output</code>, <code>Payload</code>, <code>Parameter</code>, <code>SName</code>, <code>Version</code>, <code>Fname</code>&gt;(<code>serviceName</code>, <code>serviceVersion</code>, <code>serviceTarget</code>, <code>outputSchema</code>?, <code>payloadSchema</code>?, <code>parameterSchema</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>] &amp; <code>Record</code>&lt;<code>SName</code>, <code>Record</code>&lt;<code>Version</code>, <code>Record</code>&lt;<code>Fname</code>, (<code>payload</code>, <code>parameter</code>) =&gt; <code>Promise</code>&lt;<code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>Output</code>&gt;&gt;&gt;&gt;&gt;&gt;, <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L123" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:123</a></p><p>Define a command which can be invoked by the current command</p><h4 id="type-parameters-5" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-5" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>Output</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><p>• <strong>Payload</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><p>• <strong>Parameter</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><p>• <strong>SName</strong> <em>extends</em> <code>string</code> = <code>string</code></p><p>• <strong>Version</strong> <em>extends</em> <code>string</code> = <code>string</code></p><p>• <strong>Fname</strong> <em>extends</em> <code>string</code> = <code>string</code></p><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="servicename" tabindex="-1">serviceName <a class="header-anchor" href="#servicename" aria-label="Permalink to &quot;serviceName&quot;">​</a></h5><p><code>SName</code></p><h5 id="serviceversion" tabindex="-1">serviceVersion <a class="header-anchor" href="#serviceversion" aria-label="Permalink to &quot;serviceVersion&quot;">​</a></h5><p><code>Version</code></p><h5 id="servicetarget" tabindex="-1">serviceTarget <a class="header-anchor" href="#servicetarget" aria-label="Permalink to &quot;serviceTarget&quot;">​</a></h5><p><code>Fname</code></p><h5 id="outputschema-1" tabindex="-1">outputSchema? <a class="header-anchor" href="#outputschema-1" aria-label="Permalink to &quot;outputSchema?&quot;">​</a></h5><p><code>Output</code></p><h5 id="payloadschema" tabindex="-1">payloadSchema? <a class="header-anchor" href="#payloadschema" aria-label="Permalink to &quot;payloadSchema?&quot;">​</a></h5><p><code>Payload</code></p><h5 id="parameterschema-1" tabindex="-1">parameterSchema? <a class="header-anchor" href="#parameterschema-1" aria-label="Permalink to &quot;parameterSchema?&quot;">​</a></h5><p><code>Parameter</code></p><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>] &amp; <code>Record</code>&lt;<code>SName</code>, <code>Record</code>&lt;<code>Version</code>, <code>Record</code>&lt;<code>Fname</code>, (<code>payload</code>, <code>parameter</code>) =&gt; <code>Promise</code>&lt;<code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>Output</code>&gt;&gt;&gt;&gt;&gt;&gt;, <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><hr><h3 id="disablehttpsecurity" tabindex="-1"><s>disableHttpSecurity()</s> <a class="header-anchor" href="#disablehttpsecurity" aria-label="Permalink to &quot;~~disableHttpSecurity()~~&quot;">​</a></h3><blockquote><p><strong>disableHttpSecurity</strong>(<code>disabled</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L676" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:676</a></p><p>enable or disable security for this endpoint</p><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="disabled" tabindex="-1">disabled <a class="header-anchor" href="#disabled" aria-label="Permalink to &quot;disabled&quot;">​</a></h5><p><code>boolean</code> = <code>true</code></p><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="deprecated-1" tabindex="-1">Deprecated <a class="header-anchor" href="#deprecated-1" aria-label="Permalink to &quot;Deprecated&quot;">​</a></h4><p>use makeEndpointPublic() instead</p><hr><h3 id="enablehttpsecurity" tabindex="-1">enableHttpSecurity() <a class="header-anchor" href="#enablehttpsecurity" aria-label="Permalink to &quot;enableHttpSecurity()&quot;">​</a></h3><blockquote><p><strong>enableHttpSecurity</strong>(<code>enabled</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L665" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:665</a></p><p>enable or disable security for this endpoint</p><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="enabled" tabindex="-1">enabled <a class="header-anchor" href="#enabled" aria-label="Permalink to &quot;enabled&quot;">​</a></h5><p><code>boolean</code> = <code>true</code></p><p>Defaults to true if not set means &quot;enable security&quot;</p><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="exposeashttpendpoint" tabindex="-1">exposeAsHttpEndpoint() <a class="header-anchor" href="#exposeashttpendpoint" aria-label="Permalink to &quot;exposeAsHttpEndpoint()&quot;">​</a></h3><blockquote><p><strong>exposeAsHttpEndpoint</strong>(<code>method</code>, <code>path</code>, <code>contentTypeRequest</code>?, <code>contentEncodingRequest</code>?, <code>contentTypeResponse</code>?, <code>contentEncodingResponse</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L637" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:637</a></p><p>Mark the function to be exposed as http endpoint.</p><p>Api url prefix and service version are prepended automatically</p><p>For exposing a url like: <code>/api/V1/user/login</code> simply provide <code>user/login</code>as path</p><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="method" tabindex="-1">method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;method&quot;">​</a></h5><p><a href="./../type-aliases/SupportedHttpMethod.html"><code>SupportedHttpMethod</code></a></p><p>Http method POST, PUT, PATCH, GET, DELETE</p><h5 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h5><p><code>string</code></p><p>The url path</p><h5 id="contenttyperequest" tabindex="-1">contentTypeRequest? <a class="header-anchor" href="#contenttyperequest" aria-label="Permalink to &quot;contentTypeRequest?&quot;">​</a></h5><p><code>string</code></p><p>input content type defaults to application/json</p><h5 id="contentencodingrequest" tabindex="-1">contentEncodingRequest? <a class="header-anchor" href="#contentencodingrequest" aria-label="Permalink to &quot;contentEncodingRequest?&quot;">​</a></h5><p><code>string</code></p><p>input content encoding defaults to utf-8</p><h5 id="contenttyperesponse" tabindex="-1">contentTypeResponse? <a class="header-anchor" href="#contenttyperesponse" aria-label="Permalink to &quot;contentTypeResponse?&quot;">​</a></h5><p><code>string</code></p><p>input content type defaults to application/json</p><h5 id="contentencodingresponse" tabindex="-1">contentEncodingResponse? <a class="header-anchor" href="#contentencodingresponse" aria-label="Permalink to &quot;contentEncodingResponse?&quot;">​</a></h5><p><code>string</code></p><p>input content encoding defaults to utf-8</p><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="getafterguardhook" tabindex="-1">getAfterGuardHook() <a class="header-anchor" href="#getafterguardhook" aria-label="Permalink to &quot;getAfterGuardHook()&quot;">​</a></h3><blockquote><p><strong>getAfterGuardHook</strong>(<code>name</code>): <code>void</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L608" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:608</a></p><p>Returns the after guard hook corresponding to the provided name.</p><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h5><p><code>string</code></p><p>The name of the hook.</p><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><p>The after guard hook, or undefined if not found.</p><hr><h3 id="getbeforeguardhook" tabindex="-1">getBeforeGuardHook() <a class="header-anchor" href="#getbeforeguardhook" aria-label="Permalink to &quot;getBeforeGuardHook()&quot;">​</a></h3><blockquote><p><strong>getBeforeGuardHook</strong>(<code>name</code>): <code>void</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L564" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:564</a></p><p>Get the before guard hook for this command.</p><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="name-1" tabindex="-1">name <a class="header-anchor" href="#name-1" aria-label="Permalink to &quot;name&quot;">​</a></h5><p><code>string</code></p><p>The name of the before guard to retrieve.</p><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><p>The before guard hook, or undefined if not found.</p><hr><h3 id="getcommandcontextmock" tabindex="-1">getCommandContextMock() <a class="header-anchor" href="#getcommandcontextmock" aria-label="Permalink to &quot;getCommandContextMock()&quot;">​</a></h3><blockquote><p><strong>getCommandContextMock</strong>&lt;<code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>FunctionPayloadType</code>, <code>FunctionParamsType</code>&gt;(<code>input</code>): <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L984" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:984</a></p><h4 id="type-parameters-6" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-6" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>MessagePayloadType</strong> = <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;</p><p>• <strong>MessageParamsType</strong> = <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;</p><p>• <strong>FunctionPayloadType</strong> = <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;</p><p>• <strong>FunctionParamsType</strong> = <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;</p><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h5><h6 id="message" tabindex="-1">message? <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message?&quot;">​</a></h6><p>{ <code>parameter</code>: <code>MessageParamsType</code>; <code>payload</code>: <code>MessagePayloadType</code>; }</p><h6 id="message-parameter" tabindex="-1">message.parameter <a class="header-anchor" href="#message-parameter" aria-label="Permalink to &quot;message.parameter&quot;">​</a></h6><p><code>MessageParamsType</code></p><h6 id="message-payload" tabindex="-1">message.payload <a class="header-anchor" href="#message-payload" aria-label="Permalink to &quot;message.payload&quot;">​</a></h6><p><code>MessagePayloadType</code></p><h6 id="parameter" tabindex="-1">parameter <a class="header-anchor" href="#parameter" aria-label="Permalink to &quot;parameter&quot;">​</a></h6><p><code>FunctionParamsType</code></p><h6 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h6><p><code>FunctionPayloadType</code></p><h6 id="resources" tabindex="-1">resources? <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;resources?&quot;">​</a></h6><p><code>Partial</code>&lt;<code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p><h6 id="sandbox" tabindex="-1">sandbox? <a class="header-anchor" href="#sandbox" aria-label="Permalink to &quot;sandbox?&quot;">​</a></h6><p><code>SinonSandbox</code></p><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>object</code></p><p>a mocked command context</p><h5 id="mock" tabindex="-1">mock <a class="header-anchor" href="#mock" aria-label="Permalink to &quot;mock&quot;">​</a></h5><blockquote><p><strong>mock</strong>: <code>object</code></p></blockquote><h6 id="mock-configs" tabindex="-1">mock.configs <a class="header-anchor" href="#mock-configs" aria-label="Permalink to &quot;mock.configs&quot;">​</a></h6><blockquote><p><strong>mock.configs</strong>: <code>object</code></p></blockquote><p>the config store</p><h6 id="mock-configs-getconfig" tabindex="-1">mock.configs.getConfig <a class="header-anchor" href="#mock-configs-getconfig" aria-label="Permalink to &quot;mock.configs.getConfig&quot;">​</a></h6><blockquote><p><strong>mock.configs.getConfig</strong>: <a href="./../type-aliases/ConfigGetterFunction.html"><code>ConfigGetterFunction</code></a></p></blockquote><p>get a config value from the config store</p><h6 id="mock-configs-removeconfig" tabindex="-1">mock.configs.removeConfig <a class="header-anchor" href="#mock-configs-removeconfig" aria-label="Permalink to &quot;mock.configs.removeConfig&quot;">​</a></h6><blockquote><p><strong>mock.configs.removeConfig</strong>: <a href="./../type-aliases/ConfigDeleteFunction.html"><code>ConfigDeleteFunction</code></a></p></blockquote><p>delete a config value from the config store</p><h6 id="mock-configs-setconfig" tabindex="-1">mock.configs.setConfig <a class="header-anchor" href="#mock-configs-setconfig" aria-label="Permalink to &quot;mock.configs.setConfig&quot;">​</a></h6><blockquote><p><strong>mock.configs.setConfig</strong>: <a href="./../type-aliases/ConfigSetterFunction.html"><code>ConfigSetterFunction</code></a></p></blockquote><p>set a config value in the config store</p><h6 id="mock-emit" tabindex="-1">mock.emit <a class="header-anchor" href="#mock-emit" aria-label="Permalink to &quot;mock.emit&quot;">​</a></h6><blockquote><p><strong>mock.emit</strong>: <a href="./../type-aliases/EmitCustomMessageFunction.html"><code>EmitCustomMessageFunction</code></a>&lt;<code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;</p></blockquote><p>emit a custom message</p><h6 id="mock-logger" tabindex="-1">mock.logger <a class="header-anchor" href="#mock-logger" aria-label="Permalink to &quot;mock.logger&quot;">​</a></h6><blockquote><p><strong>mock.logger</strong>: <a href="./Logger.html"><code>Logger</code></a></p></blockquote><p>the logger instance</p><h6 id="mock-message" tabindex="-1">mock.message <a class="header-anchor" href="#mock-message" aria-label="Permalink to &quot;mock.message&quot;">​</a></h6><blockquote><p><strong>mock.message</strong>: <code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#command"><code>Command</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>parameter</code>: <code>MessageParamsType</code>; <code>payload</code>: <code>MessagePayloadType</code>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p></blockquote><p>the original message</p><h6 id="mock-resources" tabindex="-1">mock.resources <a class="header-anchor" href="#mock-resources" aria-label="Permalink to &quot;mock.resources&quot;">​</a></h6><blockquote><p><strong>mock.resources</strong>: <code>C</code>[<code>&quot;Resources&quot;</code>]</p></blockquote><p>Provides resources defined in service builder and set via config during service creation</p><h6 id="mock-secrets" tabindex="-1">mock.secrets <a class="header-anchor" href="#mock-secrets" aria-label="Permalink to &quot;mock.secrets&quot;">​</a></h6><blockquote><p><strong>mock.secrets</strong>: <code>object</code></p></blockquote><p>the secret store</p><h6 id="mock-secrets-getsecret" tabindex="-1">mock.secrets.getSecret <a class="header-anchor" href="#mock-secrets-getsecret" aria-label="Permalink to &quot;mock.secrets.getSecret&quot;">​</a></h6><blockquote><p><strong>mock.secrets.getSecret</strong>: <a href="./../type-aliases/SecretGetterFunction.html"><code>SecretGetterFunction</code></a></p></blockquote><p>get a secret from the secret store</p><h6 id="mock-secrets-removesecret" tabindex="-1">mock.secrets.removeSecret <a class="header-anchor" href="#mock-secrets-removesecret" aria-label="Permalink to &quot;mock.secrets.removeSecret&quot;">​</a></h6><blockquote><p><strong>mock.secrets.removeSecret</strong>: <a href="./../type-aliases/SecretDeleteFunction.html"><code>SecretDeleteFunction</code></a></p></blockquote><p>delete a secret from the secret store</p><h6 id="mock-secrets-setsecret" tabindex="-1">mock.secrets.setSecret <a class="header-anchor" href="#mock-secrets-setsecret" aria-label="Permalink to &quot;mock.secrets.setSecret&quot;">​</a></h6><blockquote><p><strong>mock.secrets.setSecret</strong>: <a href="./../type-aliases/SecretSetterFunction.html"><code>SecretSetterFunction</code></a></p></blockquote><p>set a secret in the secret store</p><h6 id="mock-service" tabindex="-1">mock.service <a class="header-anchor" href="#mock-service" aria-label="Permalink to &quot;mock.service&quot;">​</a></h6><blockquote><p><strong>mock.service</strong>: <code>C</code>[<code>&quot;Invokes&quot;</code>]</p></blockquote><p>Invokes a command and returns the result. It is recommended to validate the result against a schema which only contains the data you actually need.</p><h6 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h6><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// define your invocation in command builder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ServiceA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, responseOutputSchema, payloadSchema, parameterSchema)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCommandFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputPayload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { my: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputParameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { search: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;for_me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.service.ServiceA[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputPayload,inputParameter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h6 id="mock-startactivespan" tabindex="-1">mock.startActiveSpan() <a class="header-anchor" href="#mock-startactivespan" aria-label="Permalink to &quot;mock.startActiveSpan()&quot;">​</a></h6><blockquote><p><strong>mock.startActiveSpan</strong>: &lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>wrap given function in an opentelemetry active span</p><h6 id="type-parameters-7" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-7" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h6><p>• <strong>F</strong></p><h6 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-label="Permalink to &quot;Parameters&quot;">​</a></h6><h6 id="name-2" tabindex="-1">name <a class="header-anchor" href="#name-2" aria-label="Permalink to &quot;name&quot;">​</a></h6><p><code>string</code></p><h6 id="opts" tabindex="-1">opts <a class="header-anchor" href="#opts" aria-label="Permalink to &quot;opts&quot;">​</a></h6><p><code>SpanOptions</code></p><h6 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>undefined</code> | <code>Context</code></p><h6 id="fn" tabindex="-1">fn <a class="header-anchor" href="#fn" aria-label="Permalink to &quot;fn&quot;">​</a></h6><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><h6 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h6><p><code>Promise</code>&lt;<code>F</code>&gt;</p><h6 id="mock-states" tabindex="-1">mock.states <a class="header-anchor" href="#mock-states" aria-label="Permalink to &quot;mock.states&quot;">​</a></h6><blockquote><p><strong>mock.states</strong>: <code>object</code></p></blockquote><p>the state store</p><h6 id="mock-states-getstate" tabindex="-1">mock.states.getState <a class="header-anchor" href="#mock-states-getstate" aria-label="Permalink to &quot;mock.states.getState&quot;">​</a></h6><blockquote><p><strong>mock.states.getState</strong>: <a href="./../type-aliases/StateGetterFunction.html"><code>StateGetterFunction</code></a></p></blockquote><p>get a state value from the state store</p><h6 id="mock-states-removestate" tabindex="-1">mock.states.removeState <a class="header-anchor" href="#mock-states-removestate" aria-label="Permalink to &quot;mock.states.removeState&quot;">​</a></h6><blockquote><p><strong>mock.states.removeState</strong>: <a href="./../type-aliases/StateDeleteFunction.html"><code>StateDeleteFunction</code></a></p></blockquote><p>delete a state value from the state store</p><h6 id="mock-states-setstate" tabindex="-1">mock.states.setState <a class="header-anchor" href="#mock-states-setstate" aria-label="Permalink to &quot;mock.states.setState&quot;">​</a></h6><blockquote><p><strong>mock.states.setState</strong>: <a href="./../type-aliases/StateSetterFunction.html"><code>StateSetterFunction</code></a></p></blockquote><p>set a state value in the state store</p><h6 id="mock-wrapinspan" tabindex="-1">mock.wrapInSpan() <a class="header-anchor" href="#mock-wrapinspan" aria-label="Permalink to &quot;mock.wrapInSpan()&quot;">​</a></h6><blockquote><p><strong>mock.wrapInSpan</strong>: &lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context</code>?) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>wrap given function in an opentelemetry span</p><h6 id="type-parameters-8" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-8" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h6><p>• <strong>F</strong></p><h6 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-label="Permalink to &quot;Parameters&quot;">​</a></h6><h6 id="name-3" tabindex="-1">name <a class="header-anchor" href="#name-3" aria-label="Permalink to &quot;name&quot;">​</a></h6><p><code>string</code></p><h6 id="opts-1" tabindex="-1">opts <a class="header-anchor" href="#opts-1" aria-label="Permalink to &quot;opts&quot;">​</a></h6><p><code>SpanOptions</code></p><h6 id="fn-1" tabindex="-1">fn <a class="header-anchor" href="#fn-1" aria-label="Permalink to &quot;fn&quot;">​</a></h6><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><h6 id="context-1" tabindex="-1">context? <a class="header-anchor" href="#context-1" aria-label="Permalink to &quot;context?&quot;">​</a></h6><p><code>Context</code></p><h6 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-label="Permalink to &quot;Returns&quot;">​</a></h6><p><code>Promise</code>&lt;<code>F</code>&gt;</p><h5 id="stubs" tabindex="-1">stubs <a class="header-anchor" href="#stubs" aria-label="Permalink to &quot;stubs&quot;">​</a></h5><blockquote><p><strong>stubs</strong>: <code>object</code></p></blockquote><h6 id="stubs-emit" tabindex="-1">stubs.emit <a class="header-anchor" href="#stubs-emit" aria-label="Permalink to &quot;stubs.emit&quot;">​</a></h6><blockquote><p><strong>stubs.emit</strong>: <a href="./../type-aliases/FromEmitToOtherType.html"><code>FromEmitToOtherType</code></a>&lt;<code>C</code>[<code>&quot;EmitList&quot;</code>], <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt; = <code>eventList</code></p></blockquote><h6 id="stubs-getconfig" tabindex="-1">stubs.getConfig <a class="header-anchor" href="#stubs-getconfig" aria-label="Permalink to &quot;stubs.getConfig&quot;">​</a></h6><blockquote><p><strong>stubs.getConfig</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-getsecret" tabindex="-1">stubs.getSecret <a class="header-anchor" href="#stubs-getsecret" aria-label="Permalink to &quot;stubs.getSecret&quot;">​</a></h6><blockquote><p><strong>stubs.getSecret</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-getstate" tabindex="-1">stubs.getState <a class="header-anchor" href="#stubs-getstate" aria-label="Permalink to &quot;stubs.getState&quot;">​</a></h6><blockquote><p><strong>stubs.getState</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-invoke" tabindex="-1">stubs.invoke <a class="header-anchor" href="#stubs-invoke" aria-label="Permalink to &quot;stubs.invoke&quot;">​</a></h6><blockquote><p><strong>stubs.invoke</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger" tabindex="-1">stubs.logger <a class="header-anchor" href="#stubs-logger" aria-label="Permalink to &quot;stubs.logger&quot;">​</a></h6><blockquote><p><strong>stubs.logger</strong>: <code>object</code> = <code>logger.stubs</code></p></blockquote><h6 id="stubs-logger-debug" tabindex="-1">stubs.logger.debug <a class="header-anchor" href="#stubs-logger-debug" aria-label="Permalink to &quot;stubs.logger.debug&quot;">​</a></h6><blockquote><p><strong>stubs.logger.debug</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-error" tabindex="-1">stubs.logger.error <a class="header-anchor" href="#stubs-logger-error" aria-label="Permalink to &quot;stubs.logger.error&quot;">​</a></h6><blockquote><p><strong>stubs.logger.error</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-fatal" tabindex="-1">stubs.logger.fatal <a class="header-anchor" href="#stubs-logger-fatal" aria-label="Permalink to &quot;stubs.logger.fatal&quot;">​</a></h6><blockquote><p><strong>stubs.logger.fatal</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-info" tabindex="-1">stubs.logger.info <a class="header-anchor" href="#stubs-logger-info" aria-label="Permalink to &quot;stubs.logger.info&quot;">​</a></h6><blockquote><p><strong>stubs.logger.info</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-trace" tabindex="-1">stubs.logger.trace <a class="header-anchor" href="#stubs-logger-trace" aria-label="Permalink to &quot;stubs.logger.trace&quot;">​</a></h6><blockquote><p><strong>stubs.logger.trace</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-warn" tabindex="-1">stubs.logger.warn <a class="header-anchor" href="#stubs-logger-warn" aria-label="Permalink to &quot;stubs.logger.warn&quot;">​</a></h6><blockquote><p><strong>stubs.logger.warn</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-removeconfig" tabindex="-1">stubs.removeConfig <a class="header-anchor" href="#stubs-removeconfig" aria-label="Permalink to &quot;stubs.removeConfig&quot;">​</a></h6><blockquote><p><strong>stubs.removeConfig</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-removesecret" tabindex="-1">stubs.removeSecret <a class="header-anchor" href="#stubs-removesecret" aria-label="Permalink to &quot;stubs.removeSecret&quot;">​</a></h6><blockquote><p><strong>stubs.removeSecret</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-removestate" tabindex="-1">stubs.removeState <a class="header-anchor" href="#stubs-removestate" aria-label="Permalink to &quot;stubs.removeState&quot;">​</a></h6><blockquote><p><strong>stubs.removeState</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-resources" tabindex="-1">stubs.resources <a class="header-anchor" href="#stubs-resources" aria-label="Permalink to &quot;stubs.resources&quot;">​</a></h6><blockquote><p><strong>stubs.resources</strong>: <code>Partial</code>&lt;<code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p></blockquote><h6 id="stubs-service" tabindex="-1">stubs.service <a class="header-anchor" href="#stubs-service" aria-label="Permalink to &quot;stubs.service&quot;">​</a></h6><blockquote><p><strong>stubs.service</strong>: <a href="./../type-aliases/FromInvokeToOtherType.html"><code>FromInvokeToOtherType</code></a>&lt;<code>C</code>[<code>&quot;Invokes&quot;</code>], <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;&gt;</p></blockquote><h6 id="stubs-setconfig" tabindex="-1">stubs.setConfig <a class="header-anchor" href="#stubs-setconfig" aria-label="Permalink to &quot;stubs.setConfig&quot;">​</a></h6><blockquote><p><strong>stubs.setConfig</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-setsecret" tabindex="-1">stubs.setSecret <a class="header-anchor" href="#stubs-setsecret" aria-label="Permalink to &quot;stubs.setSecret&quot;">​</a></h6><blockquote><p><strong>stubs.setSecret</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-setstate" tabindex="-1">stubs.setState <a class="header-anchor" href="#stubs-setstate" aria-label="Permalink to &quot;stubs.setState&quot;">​</a></h6><blockquote><p><strong>stubs.setState</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-startactivespan" tabindex="-1">stubs.startActiveSpan <a class="header-anchor" href="#stubs-startactivespan" aria-label="Permalink to &quot;stubs.startActiveSpan&quot;">​</a></h6><blockquote><p><strong>stubs.startActiveSpan</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-wrapinspan" tabindex="-1">stubs.wrapInSpan <a class="header-anchor" href="#stubs-wrapinspan" aria-label="Permalink to &quot;stubs.wrapInSpan&quot;">​</a></h6><blockquote><p><strong>stubs.wrapInSpan</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><hr><h3 id="getcommandfunction" tabindex="-1">getCommandFunction() <a class="header-anchor" href="#getcommandfunction" aria-label="Permalink to &quot;getCommandFunction()&quot;">​</a></h3><blockquote><p><strong>getCommandFunction</strong>&lt;<code>T</code>&gt;(<code>input</code>?): <a href="./../type-aliases/CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L928" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:928</a></p><p>Get the function implementation including input and output validation. Also, before hooks are triggered during execution. Before guards can be optional overwritten by optional input parameter.</p><h4 id="type-parameters-9" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-9" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong> = <code>Record</code>&lt;<code>string</code>, <a href="./../type-aliases/CommandBeforeGuardHook.html"><code>CommandBeforeGuardHook</code></a>&lt;<code>S</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><h4 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input-1" tabindex="-1">input? <a class="header-anchor" href="#input-1" aria-label="Permalink to &quot;input?&quot;">​</a></h5><p>Overwrite beforeGuards</p><h6 id="beforeguards" tabindex="-1">beforeGuards? <a class="header-anchor" href="#beforeguards" aria-label="Permalink to &quot;beforeGuards?&quot;">​</a></h6><p><code>Partial</code>&lt;<code>T</code>&gt;</p><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../type-aliases/CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;</p><p>the function</p><hr><h3 id="getcommandfunctionplain" tabindex="-1">getCommandFunctionPlain() <a class="header-anchor" href="#getcommandfunctionplain" aria-label="Permalink to &quot;getCommandFunctionPlain()&quot;">​</a></h3><blockquote><p><strong>getCommandFunctionPlain</strong>(): <a href="./../type-aliases/CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L959" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:959</a></p><p>Get the function implementation without input and output validation. No hooks are triggered during execution.</p><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../type-aliases/CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;</p><p>the function</p><hr><h3 id="getcommandtransformcontextmock" tabindex="-1">getCommandTransformContextMock() <a class="header-anchor" href="#getcommandtransformcontextmock" aria-label="Permalink to &quot;getCommandTransformContextMock()&quot;">​</a></h3><blockquote><p><strong>getCommandTransformContextMock</strong>(<code>input</code>): <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L1020" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:1020</a></p><p>Returns a mocked transform function context, which can be used in unit tests.</p><h4 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input-2" tabindex="-1">input <a class="header-anchor" href="#input-2" aria-label="Permalink to &quot;input&quot;">​</a></h5><h6 id="parameter-1" tabindex="-1">parameter <a class="header-anchor" href="#parameter-1" aria-label="Permalink to &quot;parameter&quot;">​</a></h6><p><a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;</p><h6 id="payload-1" tabindex="-1">payload <a class="header-anchor" href="#payload-1" aria-label="Permalink to &quot;payload&quot;">​</a></h6><p><a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;</p><h6 id="resources-1" tabindex="-1">resources? <a class="header-anchor" href="#resources-1" aria-label="Permalink to &quot;resources?&quot;">​</a></h6><p><code>Partial</code>&lt;<code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p><h6 id="sandbox-1" tabindex="-1">sandbox? <a class="header-anchor" href="#sandbox-1" aria-label="Permalink to &quot;sandbox?&quot;">​</a></h6><p><code>SinonSandbox</code></p><h4 id="returns-20" tabindex="-1">Returns <a class="header-anchor" href="#returns-20" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>object</code></p><p>a mocked transform function context</p><h5 id="mock-1" tabindex="-1">mock <a class="header-anchor" href="#mock-1" aria-label="Permalink to &quot;mock&quot;">​</a></h5><blockquote><p><strong>mock</strong>: <code>object</code></p></blockquote><h6 id="mock-configs-1" tabindex="-1">mock.configs <a class="header-anchor" href="#mock-configs-1" aria-label="Permalink to &quot;mock.configs&quot;">​</a></h6><blockquote><p><strong>mock.configs</strong>: <code>object</code></p></blockquote><p>the config store</p><h6 id="mock-configs-getconfig-1" tabindex="-1">mock.configs.getConfig <a class="header-anchor" href="#mock-configs-getconfig-1" aria-label="Permalink to &quot;mock.configs.getConfig&quot;">​</a></h6><blockquote><p><strong>mock.configs.getConfig</strong>: <a href="./../type-aliases/ConfigGetterFunction.html"><code>ConfigGetterFunction</code></a></p></blockquote><p>get a config value from the config store</p><h6 id="mock-configs-removeconfig-1" tabindex="-1">mock.configs.removeConfig <a class="header-anchor" href="#mock-configs-removeconfig-1" aria-label="Permalink to &quot;mock.configs.removeConfig&quot;">​</a></h6><blockquote><p><strong>mock.configs.removeConfig</strong>: <a href="./../type-aliases/ConfigDeleteFunction.html"><code>ConfigDeleteFunction</code></a></p></blockquote><p>delete a config value from the config store</p><h6 id="mock-configs-setconfig-1" tabindex="-1">mock.configs.setConfig <a class="header-anchor" href="#mock-configs-setconfig-1" aria-label="Permalink to &quot;mock.configs.setConfig&quot;">​</a></h6><blockquote><p><strong>mock.configs.setConfig</strong>: <a href="./../type-aliases/ConfigSetterFunction.html"><code>ConfigSetterFunction</code></a></p></blockquote><p>set a config value in the config store</p><h6 id="mock-logger-1" tabindex="-1">mock.logger <a class="header-anchor" href="#mock-logger-1" aria-label="Permalink to &quot;mock.logger&quot;">​</a></h6><blockquote><p><strong>mock.logger</strong>: <a href="./Logger.html"><code>Logger</code></a></p></blockquote><p>the logger instance</p><h6 id="mock-message-1" tabindex="-1">mock.message <a class="header-anchor" href="#mock-message-1" aria-label="Permalink to &quot;mock.message&quot;">​</a></h6><blockquote><p><strong>mock.message</strong>: <code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#command"><code>Command</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>parameter</code>: <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>; <code>payload</code>: <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p></blockquote><p>the original message</p><h6 id="mock-resources-1" tabindex="-1">mock.resources <a class="header-anchor" href="#mock-resources-1" aria-label="Permalink to &quot;mock.resources&quot;">​</a></h6><blockquote><p><strong>mock.resources</strong>: <code>C</code>[<code>&quot;Resources&quot;</code>]</p></blockquote><h6 id="mock-secrets-1" tabindex="-1">mock.secrets <a class="header-anchor" href="#mock-secrets-1" aria-label="Permalink to &quot;mock.secrets&quot;">​</a></h6><blockquote><p><strong>mock.secrets</strong>: <code>object</code></p></blockquote><p>the secret store</p><h6 id="mock-secrets-getsecret-1" tabindex="-1">mock.secrets.getSecret <a class="header-anchor" href="#mock-secrets-getsecret-1" aria-label="Permalink to &quot;mock.secrets.getSecret&quot;">​</a></h6><blockquote><p><strong>mock.secrets.getSecret</strong>: <a href="./../type-aliases/SecretGetterFunction.html"><code>SecretGetterFunction</code></a></p></blockquote><p>get a secret from the secret store</p><h6 id="mock-secrets-removesecret-1" tabindex="-1">mock.secrets.removeSecret <a class="header-anchor" href="#mock-secrets-removesecret-1" aria-label="Permalink to &quot;mock.secrets.removeSecret&quot;">​</a></h6><blockquote><p><strong>mock.secrets.removeSecret</strong>: <a href="./../type-aliases/SecretDeleteFunction.html"><code>SecretDeleteFunction</code></a></p></blockquote><p>delete a secret from the secret store</p><h6 id="mock-secrets-setsecret-1" tabindex="-1">mock.secrets.setSecret <a class="header-anchor" href="#mock-secrets-setsecret-1" aria-label="Permalink to &quot;mock.secrets.setSecret&quot;">​</a></h6><blockquote><p><strong>mock.secrets.setSecret</strong>: <a href="./../type-aliases/SecretSetterFunction.html"><code>SecretSetterFunction</code></a></p></blockquote><p>set a secret in the secret store</p><h6 id="mock-startactivespan-1" tabindex="-1">mock.startActiveSpan() <a class="header-anchor" href="#mock-startactivespan-1" aria-label="Permalink to &quot;mock.startActiveSpan()&quot;">​</a></h6><blockquote><p><strong>mock.startActiveSpan</strong>: &lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>wrap given function in an opentelemetry active span</p><h6 id="type-parameters-10" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-10" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h6><p>• <strong>F</strong></p><h6 id="parameters-20" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-20" aria-label="Permalink to &quot;Parameters&quot;">​</a></h6><h6 id="name-4" tabindex="-1">name <a class="header-anchor" href="#name-4" aria-label="Permalink to &quot;name&quot;">​</a></h6><p><code>string</code></p><h6 id="opts-2" tabindex="-1">opts <a class="header-anchor" href="#opts-2" aria-label="Permalink to &quot;opts&quot;">​</a></h6><p><code>SpanOptions</code></p><h6 id="context-2" tabindex="-1">context <a class="header-anchor" href="#context-2" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>undefined</code> | <code>Context</code></p><h6 id="fn-2" tabindex="-1">fn <a class="header-anchor" href="#fn-2" aria-label="Permalink to &quot;fn&quot;">​</a></h6><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><h6 id="returns-21" tabindex="-1">Returns <a class="header-anchor" href="#returns-21" aria-label="Permalink to &quot;Returns&quot;">​</a></h6><p><code>Promise</code>&lt;<code>F</code>&gt;</p><h6 id="mock-states-1" tabindex="-1">mock.states <a class="header-anchor" href="#mock-states-1" aria-label="Permalink to &quot;mock.states&quot;">​</a></h6><blockquote><p><strong>mock.states</strong>: <code>object</code></p></blockquote><p>the state store</p><h6 id="mock-states-getstate-1" tabindex="-1">mock.states.getState <a class="header-anchor" href="#mock-states-getstate-1" aria-label="Permalink to &quot;mock.states.getState&quot;">​</a></h6><blockquote><p><strong>mock.states.getState</strong>: <a href="./../type-aliases/StateGetterFunction.html"><code>StateGetterFunction</code></a></p></blockquote><p>get a state value from the state store</p><h6 id="mock-states-removestate-1" tabindex="-1">mock.states.removeState <a class="header-anchor" href="#mock-states-removestate-1" aria-label="Permalink to &quot;mock.states.removeState&quot;">​</a></h6><blockquote><p><strong>mock.states.removeState</strong>: <a href="./../type-aliases/StateDeleteFunction.html"><code>StateDeleteFunction</code></a></p></blockquote><p>delete a state value from the state store</p><h6 id="mock-states-setstate-1" tabindex="-1">mock.states.setState <a class="header-anchor" href="#mock-states-setstate-1" aria-label="Permalink to &quot;mock.states.setState&quot;">​</a></h6><blockquote><p><strong>mock.states.setState</strong>: <a href="./../type-aliases/StateSetterFunction.html"><code>StateSetterFunction</code></a></p></blockquote><p>set a state value in the state store</p><h6 id="mock-wrapinspan-1" tabindex="-1">mock.wrapInSpan() <a class="header-anchor" href="#mock-wrapinspan-1" aria-label="Permalink to &quot;mock.wrapInSpan()&quot;">​</a></h6><blockquote><p><strong>mock.wrapInSpan</strong>: &lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context</code>?) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>wrap given function in an opentelemetry span</p><h6 id="type-parameters-11" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-11" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h6><p>• <strong>F</strong></p><h6 id="parameters-21" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-21" aria-label="Permalink to &quot;Parameters&quot;">​</a></h6><h6 id="name-5" tabindex="-1">name <a class="header-anchor" href="#name-5" aria-label="Permalink to &quot;name&quot;">​</a></h6><p><code>string</code></p><h6 id="opts-3" tabindex="-1">opts <a class="header-anchor" href="#opts-3" aria-label="Permalink to &quot;opts&quot;">​</a></h6><p><code>SpanOptions</code></p><h6 id="fn-3" tabindex="-1">fn <a class="header-anchor" href="#fn-3" aria-label="Permalink to &quot;fn&quot;">​</a></h6><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><h6 id="context-3" tabindex="-1">context? <a class="header-anchor" href="#context-3" aria-label="Permalink to &quot;context?&quot;">​</a></h6><p><code>Context</code></p><h6 id="returns-22" tabindex="-1">Returns <a class="header-anchor" href="#returns-22" aria-label="Permalink to &quot;Returns&quot;">​</a></h6><p><code>Promise</code>&lt;<code>F</code>&gt;</p><h5 id="stubs-1" tabindex="-1">stubs <a class="header-anchor" href="#stubs-1" aria-label="Permalink to &quot;stubs&quot;">​</a></h5><blockquote><p><strong>stubs</strong>: <code>object</code></p></blockquote><h6 id="stubs-getconfig-1" tabindex="-1">stubs.getConfig <a class="header-anchor" href="#stubs-getconfig-1" aria-label="Permalink to &quot;stubs.getConfig&quot;">​</a></h6><blockquote><p><strong>stubs.getConfig</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-getsecret-1" tabindex="-1">stubs.getSecret <a class="header-anchor" href="#stubs-getsecret-1" aria-label="Permalink to &quot;stubs.getSecret&quot;">​</a></h6><blockquote><p><strong>stubs.getSecret</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-getstate-1" tabindex="-1">stubs.getState <a class="header-anchor" href="#stubs-getstate-1" aria-label="Permalink to &quot;stubs.getState&quot;">​</a></h6><blockquote><p><strong>stubs.getState</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-1" tabindex="-1">stubs.logger <a class="header-anchor" href="#stubs-logger-1" aria-label="Permalink to &quot;stubs.logger&quot;">​</a></h6><blockquote><p><strong>stubs.logger</strong>: <code>object</code> = <code>logger.stubs</code></p></blockquote><h6 id="stubs-logger-debug-1" tabindex="-1">stubs.logger.debug <a class="header-anchor" href="#stubs-logger-debug-1" aria-label="Permalink to &quot;stubs.logger.debug&quot;">​</a></h6><blockquote><p><strong>stubs.logger.debug</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-error-1" tabindex="-1">stubs.logger.error <a class="header-anchor" href="#stubs-logger-error-1" aria-label="Permalink to &quot;stubs.logger.error&quot;">​</a></h6><blockquote><p><strong>stubs.logger.error</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-fatal-1" tabindex="-1">stubs.logger.fatal <a class="header-anchor" href="#stubs-logger-fatal-1" aria-label="Permalink to &quot;stubs.logger.fatal&quot;">​</a></h6><blockquote><p><strong>stubs.logger.fatal</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-info-1" tabindex="-1">stubs.logger.info <a class="header-anchor" href="#stubs-logger-info-1" aria-label="Permalink to &quot;stubs.logger.info&quot;">​</a></h6><blockquote><p><strong>stubs.logger.info</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-trace-1" tabindex="-1">stubs.logger.trace <a class="header-anchor" href="#stubs-logger-trace-1" aria-label="Permalink to &quot;stubs.logger.trace&quot;">​</a></h6><blockquote><p><strong>stubs.logger.trace</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-logger-warn-1" tabindex="-1">stubs.logger.warn <a class="header-anchor" href="#stubs-logger-warn-1" aria-label="Permalink to &quot;stubs.logger.warn&quot;">​</a></h6><blockquote><p><strong>stubs.logger.warn</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-removeconfig-1" tabindex="-1">stubs.removeConfig <a class="header-anchor" href="#stubs-removeconfig-1" aria-label="Permalink to &quot;stubs.removeConfig&quot;">​</a></h6><blockquote><p><strong>stubs.removeConfig</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-removesecret-1" tabindex="-1">stubs.removeSecret <a class="header-anchor" href="#stubs-removesecret-1" aria-label="Permalink to &quot;stubs.removeSecret&quot;">​</a></h6><blockquote><p><strong>stubs.removeSecret</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-removestate-1" tabindex="-1">stubs.removeState <a class="header-anchor" href="#stubs-removestate-1" aria-label="Permalink to &quot;stubs.removeState&quot;">​</a></h6><blockquote><p><strong>stubs.removeState</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-resources-1" tabindex="-1">stubs.resources <a class="header-anchor" href="#stubs-resources-1" aria-label="Permalink to &quot;stubs.resources&quot;">​</a></h6><blockquote><p><strong>stubs.resources</strong>: <code>Partial</code>&lt;<code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p></blockquote><h6 id="stubs-setconfig-1" tabindex="-1">stubs.setConfig <a class="header-anchor" href="#stubs-setconfig-1" aria-label="Permalink to &quot;stubs.setConfig&quot;">​</a></h6><blockquote><p><strong>stubs.setConfig</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-setsecret-1" tabindex="-1">stubs.setSecret <a class="header-anchor" href="#stubs-setsecret-1" aria-label="Permalink to &quot;stubs.setSecret&quot;">​</a></h6><blockquote><p><strong>stubs.setSecret</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-setstate-1" tabindex="-1">stubs.setState <a class="header-anchor" href="#stubs-setstate-1" aria-label="Permalink to &quot;stubs.setState&quot;">​</a></h6><blockquote><p><strong>stubs.setState</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-startactivespan-1" tabindex="-1">stubs.startActiveSpan <a class="header-anchor" href="#stubs-startactivespan-1" aria-label="Permalink to &quot;stubs.startActiveSpan&quot;">​</a></h6><blockquote><p><strong>stubs.startActiveSpan</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h6 id="stubs-wrapinspan-1" tabindex="-1">stubs.wrapInSpan <a class="header-anchor" href="#stubs-wrapinspan-1" aria-label="Permalink to &quot;stubs.wrapInSpan&quot;">​</a></h6><blockquote><p><strong>stubs.wrapInSpan</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><hr><h3 id="getdefinition" tabindex="-1">getDefinition() <a class="header-anchor" href="#getdefinition" aria-label="Permalink to &quot;getDefinition()&quot;">​</a></h3><blockquote><p><strong>getDefinition</strong>(): <code>Promise</code>&lt;<a href="./../type-aliases/Complete.html"><code>Complete</code></a>&lt;<a href="./../type-aliases/CommandDefinition.html"><code>CommandDefinition</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>], <a href="./../type-aliases/CommandDefinitionMetadataBase.html"><code>CommandDefinitionMetadataBase</code></a>&gt;&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L816" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:816</a></p><p>Creates and returns the CommandDefinition used as input for the service.</p><h4 id="returns-23" tabindex="-1">Returns <a class="header-anchor" href="#returns-23" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./../type-aliases/Complete.html"><code>Complete</code></a>&lt;<a href="./../type-aliases/CommandDefinition.html"><code>CommandDefinition</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>], <a href="./../type-aliases/CommandDefinitionMetadataBase.html"><code>CommandDefinitionMetadataBase</code></a>&gt;&gt;&gt;</p><p>CommandDefinition</p><hr><h3 id="gettransforminputfunction" tabindex="-1">getTransformInputFunction() <a class="header-anchor" href="#gettransforminputfunction" aria-label="Permalink to &quot;getTransformInputFunction()&quot;">​</a></h3><blockquote><p><strong>getTransformInputFunction</strong>(): <code>undefined</code> | <a href="./../type-aliases/CommandTransformInputHook.html"><code>CommandTransformInputHook</code></a>&lt;<code>S</code>, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L449" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:449</a></p><p>Return the transform input function</p><h4 id="returns-24" tabindex="-1">Returns <a class="header-anchor" href="#returns-24" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>undefined</code> | <a href="./../type-aliases/CommandTransformInputHook.html"><code>CommandTransformInputHook</code></a>&lt;<code>S</code>, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p><p>the input transform function if defined</p><hr><h3 id="gettransformoutputfunction" tabindex="-1">getTransformOutputFunction() <a class="header-anchor" href="#gettransformoutputfunction" aria-label="Permalink to &quot;getTransformOutputFunction()&quot;">​</a></h3><blockquote><p><strong>getTransformOutputFunction</strong>(): <code>undefined</code> | <a href="./../type-aliases/CommandTransformOutputHook.html"><code>CommandTransformOutputHook</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L517" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:517</a></p><p>Return the transform output function</p><h4 id="returns-25" tabindex="-1">Returns <a class="header-anchor" href="#returns-25" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>undefined</code> | <a href="./../type-aliases/CommandTransformOutputHook.html"><code>CommandTransformOutputHook</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p><p>the transform output function if defined</p><hr><h3 id="makeendpointpublic" tabindex="-1">makeEndpointPublic() <a class="header-anchor" href="#makeendpointpublic" aria-label="Permalink to &quot;makeEndpointPublic()&quot;">​</a></h3><blockquote><p><strong>makeEndpointPublic</strong>(): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L686" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:686</a></p><p>Mark the endpoint to be public available. No security check like bearer token or basic auth is required to access the endpoint.</p><h4 id="returns-26" tabindex="-1">Returns <a class="header-anchor" href="#returns-26" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="markasdeprecated" tabindex="-1">markAsDeprecated() <a class="header-anchor" href="#markasdeprecated" aria-label="Permalink to &quot;markAsDeprecated()&quot;">​</a></h3><blockquote><p><strong>markAsDeprecated</strong>(): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L327" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:327</a></p><p>Mark this endpoint/command as deprecated</p><h4 id="returns-27" tabindex="-1">Returns <a class="header-anchor" href="#returns-27" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="setafterguardhooks" tabindex="-1">setAfterGuardHooks() <a class="header-anchor" href="#setafterguardhooks" aria-label="Permalink to &quot;setAfterGuardHooks()&quot;">​</a></h3><blockquote><p><strong>setAfterGuardHooks</strong>(<code>afterGuards</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L583" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:583</a></p><p>Set one or more after guard hook(s). If there are multiple after guard hooks, they are executed in parallel</p><h4 id="parameters-22" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-22" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="afterguards" tabindex="-1">afterGuards <a class="header-anchor" href="#afterguards" aria-label="Permalink to &quot;afterGuards&quot;">​</a></h5><p><code>Record</code>&lt;<code>string</code>, <a href="./../type-aliases/CommandAfterGuardHook.html"><code>CommandAfterGuardHook</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><h4 id="returns-28" tabindex="-1">Returns <a class="header-anchor" href="#returns-28" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="setbeforeguardhooks" tabindex="-1">setBeforeGuardHooks() <a class="header-anchor" href="#setbeforeguardhooks" aria-label="Permalink to &quot;setBeforeGuardHooks()&quot;">​</a></h3><blockquote><p><strong>setBeforeGuardHooks</strong>(<code>beforeGuards</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L539" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:539</a></p><p>Set one or more before guard hook(s). If there are multiple before guard hooks, they are executed in parallel</p><h4 id="parameters-23" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-23" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="beforeguards-1" tabindex="-1">beforeGuards <a class="header-anchor" href="#beforeguards-1" aria-label="Permalink to &quot;beforeGuards&quot;">​</a></h5><p><code>Record</code>&lt;<code>string</code>, <a href="./../type-aliases/CommandBeforeGuardHook.html"><code>CommandBeforeGuardHook</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><p>Object of key = name of guard, value = function</p><h4 id="returns-29" tabindex="-1">Returns <a class="header-anchor" href="#returns-29" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="setcommandfunction" tabindex="-1">setCommandFunction() <a class="header-anchor" href="#setcommandfunction" aria-label="Permalink to &quot;setCommandFunction()&quot;">​</a></h3><blockquote><p><strong>setCommandFunction</strong>(<code>fn</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L901" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:901</a></p><p>Required: Set the function implementation. The types should be automatically set as soon as schemas previously defined. As the function will be a a function of a service class you need to implement as function declaration. Anonymous functions do not have access to the <code>this</code> scope.</p><h4 id="parameters-24" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-24" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="fn-4" tabindex="-1">fn <a class="header-anchor" href="#fn-4" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p><a href="./../type-aliases/CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;</p><p>the function implementation</p><h4 id="returns-30" tabindex="-1">Returns <a class="header-anchor" href="#returns-30" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`the result output payload\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="setopenapioperationid" tabindex="-1">setOpenApiOperationId() <a class="header-anchor" href="#setopenapioperationid" aria-label="Permalink to &quot;setOpenApiOperationId()&quot;">​</a></h3><blockquote><p><strong>setOpenApiOperationId</strong>(<code>operationId</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L712" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:712</a></p><p>Set the operationId for openApi documentation</p><h4 id="parameters-25" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-25" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="operationid" tabindex="-1">operationId <a class="header-anchor" href="#operationid" aria-label="Permalink to &quot;operationId&quot;">​</a></h5><p><code>string</code></p><h4 id="returns-31" tabindex="-1">Returns <a class="header-anchor" href="#returns-31" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="setopenapisummary" tabindex="-1">setOpenApiSummary() <a class="header-anchor" href="#setopenapisummary" aria-label="Permalink to &quot;setOpenApiSummary()&quot;">​</a></h3><blockquote><p><strong>setOpenApiSummary</strong>(<code>summary</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L702" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:702</a></p><p>Set the function summary text used for example in openApi documentation</p><h4 id="parameters-26" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-26" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="summary" tabindex="-1">summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;summary&quot;">​</a></h5><p><code>string</code></p><p>Summary text</p><h4 id="returns-32" tabindex="-1">Returns <a class="header-anchor" href="#returns-32" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><p>CommandDefinitionBuilder</p><h4 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSummary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Some function summary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h3 id="setsuccesseventname" tabindex="-1">setSuccessEventName() <a class="header-anchor" href="#setsuccesseventname" aria-label="Permalink to &quot;setSuccessEventName()&quot;">​</a></h3><blockquote><p><strong>setSuccessEventName</strong>&lt;<code>N</code>&gt;(<code>eventName</code>): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L230" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:230</a></p><h4 id="type-parameters-12" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-12" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>N</strong> <em>extends</em> <code>string</code></p><h4 id="parameters-27" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-27" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="eventname-2" tabindex="-1">eventName <a class="header-anchor" href="#eventname-2" aria-label="Permalink to &quot;eventName&quot;">​</a></h5><p><a href="./../type-aliases/NonEmptyString.html"><code>NonEmptyString</code></a>&lt;<code>N</code>&gt;</p><h4 id="returns-33" tabindex="-1">Returns <a class="header-anchor" href="#returns-33" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <code>C</code>&gt;</p><hr><h3 id="settransforminput" tabindex="-1">setTransformInput() <a class="header-anchor" href="#settransforminput" aria-label="Permalink to &quot;setTransformInput()&quot;">​</a></h3><blockquote><p><strong>setTransformInput</strong>&lt;<code>TransformInputPayloadSchema</code>, <code>TransformInputParamsSchema</code>&gt;(<code>transformInputSchema</code>, <code>transformParameterSchema</code>, <code>transformFunction</code>, <code>inputContentType</code>?, <code>inputContentEncoding</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>TransformInputPayloadSchema</code>, <code>TransformInputParamsSchema</code>, <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L405" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:405</a></p><p>Set a transform input hook which will encode or transform the input payload and parameters. Will be executed as first step before input validation, before guard and the function itself. This will change the type of input message payload and input message parameter.</p><h4 id="type-parameters-13" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-13" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>TransformInputPayloadSchema</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><p>• <strong>TransformInputParamsSchema</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h4 id="parameters-28" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-28" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="transforminputschema" tabindex="-1">transformInputSchema <a class="header-anchor" href="#transforminputschema" aria-label="Permalink to &quot;transformInputSchema&quot;">​</a></h5><p><code>TransformInputPayloadSchema</code></p><p>Input payload validation schema</p><h5 id="transformparameterschema" tabindex="-1">transformParameterSchema <a class="header-anchor" href="#transformparameterschema" aria-label="Permalink to &quot;transformParameterSchema&quot;">​</a></h5><p><code>TransformInputParamsSchema</code></p><p>Input parameter validation schema</p><h5 id="transformfunction" tabindex="-1">transformFunction <a class="header-anchor" href="#transformfunction" aria-label="Permalink to &quot;transformFunction&quot;">​</a></h5><p><a href="./../type-aliases/CommandTransformInputHook.html"><code>CommandTransformInputHook</code></a>&lt;<code>S</code>, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>TransformInputPayloadSchema</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>TransformInputParamsSchema</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>TransformInputPayloadSchema</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>TransformInputParamsSchema</code>&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;PayloadSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p><p>Transform input function</p><h5 id="inputcontenttype-1" tabindex="-1">inputContentType? <a class="header-anchor" href="#inputcontenttype-1" aria-label="Permalink to &quot;inputContentType?&quot;">​</a></h5><p><code>string</code></p><p>optional the content type of payload</p><h5 id="inputcontentencoding-1" tabindex="-1">inputContentEncoding? <a class="header-anchor" href="#inputcontentencoding-1" aria-label="Permalink to &quot;inputContentEncoding?&quot;">​</a></h5><p><code>string</code></p><p>optional the content encoding</p><h4 id="returns-34" tabindex="-1">Returns <a class="header-anchor" href="#returns-34" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>TransformInputPayloadSchema</code>, <code>TransformInputParamsSchema</code>, <code>C</code>[<code>&quot;TransformOutputSchema&quot;</code>], <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><p>CommandDefinitionBuilder</p><hr><h3 id="settransformoutput" tabindex="-1">setTransformOutput() <a class="header-anchor" href="#settransformoutput" aria-label="Permalink to &quot;setTransformOutput()&quot;">​</a></h3><blockquote><p><strong>setTransformOutput</strong>&lt;<code>TransformOutputSchema</code>&gt;(<code>transformOutputSchema</code>, <code>transformFunction</code>, <code>outputContentType</code>?, <code>outputContentEncoding</code>?): <a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>TransformOutputSchema</code>, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts#L476" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/CommandDefinitionBuilder.impl.ts:476</a></p><p>Set a transform output hook which will encode or transform the response payload. Will be executed at very last step after function execution, output validation and after guard hooks. This will change the type of output message payload.</p><h4 id="type-parameters-14" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-14" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>TransformOutputSchema</strong> <em>extends</em> <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h4 id="parameters-29" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-29" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="transformoutputschema" tabindex="-1">transformOutputSchema <a class="header-anchor" href="#transformoutputschema" aria-label="Permalink to &quot;transformOutputSchema&quot;">​</a></h5><p><code>TransformOutputSchema</code></p><p>The output validation schema</p><h5 id="transformfunction-1" tabindex="-1">transformFunction <a class="header-anchor" href="#transformfunction-1" aria-label="Permalink to &quot;transformFunction&quot;">​</a></h5><p><a href="./../type-aliases/CommandTransformOutputHook.html"><code>CommandTransformOutputHook</code></a>&lt;<code>S</code>, <a href="./../type-aliases/GetMessagePayloadType.html"><code>GetMessagePayloadType</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>]&gt;, <a href="./../type-aliases/GetMessageParamsType.html"><code>GetMessageParamsType</code></a>&lt;<code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>]&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;OutputSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>OutputFrom</code>&lt;<code>AdapterResolver</code>, <code>C</code>[<code>&quot;ParamsSchema&quot;</code>]&gt;&gt;, <code>UnknownIfNever</code>&lt;<code>InputFrom</code>&lt;<code>AdapterResolver</code>, <code>TransformOutputSchema</code>&gt;&gt;, <code>C</code>[<code>&quot;Resources&quot;</code>]&gt;</p><p>Transform output function</p><h5 id="outputcontenttype-1" tabindex="-1">outputContentType? <a class="header-anchor" href="#outputcontenttype-1" aria-label="Permalink to &quot;outputContentType?&quot;">​</a></h5><p><code>string</code></p><p>optional the content type of payload</p><h5 id="outputcontentencoding-1" tabindex="-1">outputContentEncoding? <a class="header-anchor" href="#outputcontentencoding-1" aria-label="Permalink to &quot;outputContentEncoding?&quot;">​</a></h5><p><code>string</code></p><p>optional the content encoding</p><h4 id="returns-35" tabindex="-1">Returns <a class="header-anchor" href="#returns-35" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./CommandDefinitionBuilder.html"><code>CommandDefinitionBuilder</code></a>&lt;<code>S</code>, <a href="./../type-aliases/CommandDefinitionBuilderTypes.html"><code>CommandDefinitionBuilderTypes</code></a>&lt;<code>C</code>[<code>&quot;PayloadSchema&quot;</code>], <code>C</code>[<code>&quot;ParamsSchema&quot;</code>], <code>C</code>[<code>&quot;OutputSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputPayloadSchema&quot;</code>], <code>C</code>[<code>&quot;TransformInputParamsSchema&quot;</code>], <code>TransformOutputSchema</code>, <code>C</code>[<code>&quot;Resources&quot;</code>], <code>C</code>[<code>&quot;Invokes&quot;</code>], <code>C</code>[<code>&quot;EmitList&quot;</code>]&gt;&gt;</p><p>CommandDefinitionBuilder</p>`,740)]))}const h=o(c,[["render",r]]);export{p as __pageData,h as default};
