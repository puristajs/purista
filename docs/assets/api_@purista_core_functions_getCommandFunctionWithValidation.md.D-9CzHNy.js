import{_ as a,c as t,o,ag as s}from"./chunks/framework.U_AETC1W.js";const m=JSON.parse('{"title":"Function: getCommandFunctionWithValidation()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/functions/getCommandFunctionWithValidation.md","filePath":"api/@purista/core/functions/getCommandFunctionWithValidation.md","lastUpdated":1739900666000}'),i={name:"api/@purista/core/functions/getCommandFunctionWithValidation.md"};function c(n,e,d,r,h,l){return o(),t("div",null,e[0]||(e[0]=[s(`<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / getCommandFunctionWithValidation</p><h1 id="function-getcommandfunctionwithvalidation" tabindex="-1">Function: getCommandFunctionWithValidation() <a class="header-anchor" href="#function-getcommandfunctionwithvalidation" aria-label="Permalink to &quot;Function: getCommandFunctionWithValidation()&quot;">​</a></h1><blockquote><p><strong>getCommandFunctionWithValidation</strong>&lt;<code>S</code>&gt;(<code>fn</code>, <code>inputPayloadSchema</code>, <code>inputParameterSchema</code>, <code>outputPayloadSchema</code>, <code>beforeGuards</code>): (<code>this</code>, <code>context</code>, <code>payload</code>, <code>parameter</code>) =&gt; <code>Promise</code>&lt;<code>unknown</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/CommandDefinitionBuilder/getCommandFunctionWithValidation.impl.ts#L7" target="_blank" rel="noreferrer">packages/core/src/CommandDefinitionBuilder/getCommandFunctionWithValidation.impl.ts:7</a></p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>S</strong> <em>extends</em> <a href="./../classes/Service.html"><code>Service</code></a>&lt;<a href="./../type-aliases/ServiceClassTypes.html"><code>ServiceClassTypes</code></a>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="fn" tabindex="-1">fn <a class="header-anchor" href="#fn" aria-label="Permalink to &quot;fn&quot;">​</a></h3><p><a href="./../type-aliases/CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>&gt;</p><h3 id="inputpayloadschema" tabindex="-1">inputPayloadSchema <a class="header-anchor" href="#inputpayloadschema" aria-label="Permalink to &quot;inputPayloadSchema&quot;">​</a></h3><p><code>undefined</code> | <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h3 id="inputparameterschema" tabindex="-1">inputParameterSchema <a class="header-anchor" href="#inputparameterschema" aria-label="Permalink to &quot;inputParameterSchema&quot;">​</a></h3><p><code>undefined</code> | <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h3 id="outputpayloadschema" tabindex="-1">outputPayloadSchema <a class="header-anchor" href="#outputpayloadschema" aria-label="Permalink to &quot;outputPayloadSchema&quot;">​</a></h3><p><code>undefined</code> | <code>SchemaObject</code> | <code>Schema</code>&lt;<code>any</code>, <code>any</code>, <code>any</code>, <code>&quot;&quot;</code>&gt; | <code>ZodType</code>&lt;<code>any</code>, <code>ZodTypeDef</code>, <code>any</code>&gt;</p><h3 id="beforeguards" tabindex="-1">beforeGuards <a class="header-anchor" href="#beforeguards" aria-label="Permalink to &quot;beforeGuards&quot;">​</a></h3><p><code>Record</code>&lt;<code>string</code>, <a href="./../type-aliases/CommandBeforeGuardHook.html"><code>CommandBeforeGuardHook</code></a>&lt;<code>S</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>, <code>any</code>&gt;&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Function</code></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><h4 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h4><p><code>S</code></p><h4 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h4><h5 id="configs" tabindex="-1">configs <a class="header-anchor" href="#configs" aria-label="Permalink to &quot;configs&quot;">​</a></h5><p>{ <code>getConfig</code>: <a href="./../type-aliases/ConfigGetterFunction.html"><code>ConfigGetterFunction</code></a>; <code>removeConfig</code>: <a href="./../type-aliases/ConfigDeleteFunction.html"><code>ConfigDeleteFunction</code></a>; <code>setConfig</code>: <a href="./../type-aliases/ConfigSetterFunction.html"><code>ConfigSetterFunction</code></a>; }</p><p>the config store</p><h5 id="configs-getconfig" tabindex="-1">configs.getConfig <a class="header-anchor" href="#configs-getconfig" aria-label="Permalink to &quot;configs.getConfig&quot;">​</a></h5><p><a href="./../type-aliases/ConfigGetterFunction.html"><code>ConfigGetterFunction</code></a></p><p>get a config value from the config store</p><h5 id="configs-removeconfig" tabindex="-1">configs.removeConfig <a class="header-anchor" href="#configs-removeconfig" aria-label="Permalink to &quot;configs.removeConfig&quot;">​</a></h5><p><a href="./../type-aliases/ConfigDeleteFunction.html"><code>ConfigDeleteFunction</code></a></p><p>delete a config value from the config store</p><h5 id="configs-setconfig" tabindex="-1">configs.setConfig <a class="header-anchor" href="#configs-setconfig" aria-label="Permalink to &quot;configs.setConfig&quot;">​</a></h5><p><a href="./../type-aliases/ConfigSetterFunction.html"><code>ConfigSetterFunction</code></a></p><p>set a config value in the config store</p><h5 id="emit" tabindex="-1">emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;emit&quot;">​</a></h5><p><a href="./../type-aliases/EmitCustomMessageFunction.html"><code>EmitCustomMessageFunction</code></a>&lt;<a href="./../type-aliases/EmptyObject.html"><code>EmptyObject</code></a>&gt;</p><p>emit a custom message</p><h5 id="logger" tabindex="-1">logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;logger&quot;">​</a></h5><p><a href="./../classes/Logger.html"><code>Logger</code></a></p><p>the logger instance</p><h5 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h5><p><code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#command"><code>Command</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>parameter</code>: <code>unknown</code>; <code>payload</code>: <code>unknown</code>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p><p>the original message</p><h5 id="resources" tabindex="-1">resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;resources&quot;">​</a></h5><p><a href="./../type-aliases/EmptyObject.html"><code>EmptyObject</code></a></p><p>Provides resources defined in service builder and set via config during service creation</p><h5 id="secrets" tabindex="-1">secrets <a class="header-anchor" href="#secrets" aria-label="Permalink to &quot;secrets&quot;">​</a></h5><p>{ <code>getSecret</code>: <a href="./../type-aliases/SecretGetterFunction.html"><code>SecretGetterFunction</code></a>; <code>removeSecret</code>: <a href="./../type-aliases/SecretDeleteFunction.html"><code>SecretDeleteFunction</code></a>; <code>setSecret</code>: <a href="./../type-aliases/SecretSetterFunction.html"><code>SecretSetterFunction</code></a>; }</p><p>the secret store</p><h5 id="secrets-getsecret" tabindex="-1">secrets.getSecret <a class="header-anchor" href="#secrets-getsecret" aria-label="Permalink to &quot;secrets.getSecret&quot;">​</a></h5><p><a href="./../type-aliases/SecretGetterFunction.html"><code>SecretGetterFunction</code></a></p><p>get a secret from the secret store</p><h5 id="secrets-removesecret" tabindex="-1">secrets.removeSecret <a class="header-anchor" href="#secrets-removesecret" aria-label="Permalink to &quot;secrets.removeSecret&quot;">​</a></h5><p><a href="./../type-aliases/SecretDeleteFunction.html"><code>SecretDeleteFunction</code></a></p><p>delete a secret from the secret store</p><h5 id="secrets-setsecret" tabindex="-1">secrets.setSecret <a class="header-anchor" href="#secrets-setsecret" aria-label="Permalink to &quot;secrets.setSecret&quot;">​</a></h5><p><a href="./../type-aliases/SecretSetterFunction.html"><code>SecretSetterFunction</code></a></p><p>set a secret in the secret store</p><h5 id="service" tabindex="-1">service <a class="header-anchor" href="#service" aria-label="Permalink to &quot;service&quot;">​</a></h5><p><a href="./../type-aliases/EmptyObject.html"><code>EmptyObject</code></a></p><p>Invokes a command and returns the result. It is recommended to validate the result against a schema which only contains the data you actually need.</p><p><strong>Example</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// define your invocation in command builder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ServiceA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, responseOutputSchema, payloadSchema, parameterSchema)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCommandFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputPayload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { my: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputParameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { search: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;for_me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.service.ServiceA[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputPayload,inputParameter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h5 id="startactivespan" tabindex="-1">startActiveSpan <a class="header-anchor" href="#startactivespan" aria-label="Permalink to &quot;startActiveSpan&quot;">​</a></h5><p>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><p>wrap given function in an opentelemetry active span</p><h5 id="states" tabindex="-1">states <a class="header-anchor" href="#states" aria-label="Permalink to &quot;states&quot;">​</a></h5><p>{ <code>getState</code>: <a href="./../type-aliases/StateGetterFunction.html"><code>StateGetterFunction</code></a>; <code>removeState</code>: <a href="./../type-aliases/StateDeleteFunction.html"><code>StateDeleteFunction</code></a>; <code>setState</code>: <a href="./../type-aliases/StateSetterFunction.html"><code>StateSetterFunction</code></a>; }</p><p>the state store</p><h5 id="states-getstate" tabindex="-1">states.getState <a class="header-anchor" href="#states-getstate" aria-label="Permalink to &quot;states.getState&quot;">​</a></h5><p><a href="./../type-aliases/StateGetterFunction.html"><code>StateGetterFunction</code></a></p><p>get a state value from the state store</p><h5 id="states-removestate" tabindex="-1">states.removeState <a class="header-anchor" href="#states-removestate" aria-label="Permalink to &quot;states.removeState&quot;">​</a></h5><p><a href="./../type-aliases/StateDeleteFunction.html"><code>StateDeleteFunction</code></a></p><p>delete a state value from the state store</p><h5 id="states-setstate" tabindex="-1">states.setState <a class="header-anchor" href="#states-setstate" aria-label="Permalink to &quot;states.setState&quot;">​</a></h5><p><a href="./../type-aliases/StateSetterFunction.html"><code>StateSetterFunction</code></a></p><p>set a state value in the state store</p><h5 id="wrapinspan" tabindex="-1">wrapInSpan <a class="header-anchor" href="#wrapinspan" aria-label="Permalink to &quot;wrapInSpan&quot;">​</a></h5><p>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context</code>?) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><p>wrap given function in an opentelemetry span</p><h4 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h4><p><code>unknown</code></p><h4 id="parameter" tabindex="-1">parameter <a class="header-anchor" href="#parameter" aria-label="Permalink to &quot;parameter&quot;">​</a></h4><p><code>unknown</code></p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>`,90)]))}const u=a(i,[["render",c]]);export{m as __pageData,u as default};
