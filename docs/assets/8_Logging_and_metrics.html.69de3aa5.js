import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{o as i,c as r,b as e,e as a,d as n,a as t,r as c}from"./app.0777453f.js";const l={},d=e("h1",{id:"logging-and-metrics",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#logging-and-metrics","aria-hidden":"true"},"#"),n(" Logging and metrics")],-1),p=e("h2",{id:"logging",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#logging","aria-hidden":"true"},"#"),n(" Logging")],-1),u=n("PURISTA provides logging as integral part."),h=e("br",null,null,-1),m=n(" Per default, "),g={href:"https://tslog.js.org",target:"_blank",rel:"noopener noreferrer"},v=n("tslog"),b=n(" is used as logging library."),k=t(`<p>But you can in theory use any logging library. There is only the need to build a simple wrapper.<br> This wrapper should be a class which extends <code>Logger</code> from <code>@purista/core</code>. See <code>DefaultLogger.ts</code> in core package.</p><p>The logger is expected to log:</p><ul><li>service name</li><li>service version</li><li>service function/subscription name</li><li>trace id</li></ul><p>When messages are logged - the message payload will be removed to prevent leaking of data.</p><h2 id="metrics" tabindex="-1"><a class="header-anchor" href="#metrics" aria-hidden="true">#</a> Metrics</h2><p>PURISTA has build in functions for metrics.</p><h3 id="service-events" tabindex="-1"><a class="header-anchor" href="#service-events" aria-hidden="true">#</a> Service events</h3><p>Each service works as <code>EventEmitter</code>. This allows to decouple metrics from business logic.</p><h4 id="timings" tabindex="-1"><a class="header-anchor" href="#timings" aria-hidden="true">#</a> Timings</h4><p>A service emits events <code>metric-function-execution</code> and <code>metric-subscription-execution</code> each time a function or subscription is executed. These events containing time measures.</p><p>You are also able to add your own metrics entries within a function or subscription. The <code>context</code> object contains the <code>performance</code> array. Simply put a <code>MetricEntry</code> into it, and it will be available with the event.</p><p>Example output:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    traceId<span class="token operator">:</span> <span class="token string">&#39;oMERFQXVVrVn1Hba1YlFY&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;functionExecution&#39;</span><span class="token punctuation">,</span>
    startTime<span class="token operator">:</span> <span class="token number">1659034029070</span><span class="token punctuation">,</span>
    endTime<span class="token operator">:</span> <span class="token number">1659034029071</span><span class="token punctuation">,</span>
    duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    functionName<span class="token operator">:</span> <span class="token string">&#39;testFunction&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    traceId<span class="token operator">:</span> <span class="token string">&#39;oMERFQXVVrVn1Hba1YlFY&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span>
    startTime<span class="token operator">:</span> <span class="token number">1659034029070</span><span class="token punctuation">,</span>
    endTime<span class="token operator">:</span> <span class="token number">1659034029071</span><span class="token punctuation">,</span>
    duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    functionName<span class="token operator">:</span> <span class="token string">&#39;testFunction&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="error-tracking" tabindex="-1"><a class="header-anchor" href="#error-tracking" aria-hidden="true">#</a> Error tracking</h4>`,14),_=n("To allow a more flexible way of tracking, monitoring or alerting, you might want to use some external services like "),f={href:"https://sentry.io/",target:"_blank",rel:"noopener noreferrer"},w=n("sentry"),x=n("."),y=t('<p>To allow a flexible and decoupled way, a service emits the following events:</p><ul><li><code>handled-subscription-error</code> emitted when a subscription throws a HandledError</li><li><code>handled-function-error</code> emitted when a function throws a HandledError</li><li><code>unhandled-subscription-error</code> emitted when a subscription throws an error other than a HandledError</li><li><code>unhandled-function-error</code> emitted when a function throws an error other than a HandledError</li></ul><h4 id="events-vs-subscription" tabindex="-1"><a class="header-anchor" href="#events-vs-subscription" aria-hidden="true">#</a> Events vs subscription</h4><p>There is also the option to have a subscription for error messages. This only works for functions, but not for subscriptions, as they do not emit a response message. Also, the error handling should be close to the root cause, it works even when there is an issue with event bus, and it might be faster when it comes to alerting.</p><p>But, subscriptions should be preferred, if you like to build some (business) analytics like &quot;hourly average of...&quot;</p>',5);function T(E,V){const s=c("ExternalLinkIcon");return i(),r("div",null,[d,p,e("p",null,[u,h,m,e("a",g,[v,a(s)]),b]),k,e("p",null,[_,e("a",f,[w,a(s)]),x]),y])}var H=o(l,[["render",T],["__file","8_Logging_and_metrics.html.vue"]]);export{H as default};
