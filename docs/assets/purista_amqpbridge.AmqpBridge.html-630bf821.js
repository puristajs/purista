import{_ as l,W as o,X as c,Z as e,a0 as a,a1 as n,$ as t,Y as d,D as s}from"./framework-d89ed822.js";const h={},p=e("h1",{id:"class-amqpbridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-amqpbridge","aria-hidden":"true"},"#"),t(" Class: AmqpBridge")],-1),u=e("p",null,"A adapter to use rabbitMQ as event bridge.",-1),m=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),g=e("code",null,"EventBridgeBaseClass",-1),_=e("code",null,"AmqpBridgeConfig",-1),f=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"AmqpBridge")])],-1),b=e("h2",{id:"implements",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implements","aria-hidden":"true"},"#"),t(" Implements")],-1),x=e("code",null,"EventBridge",-1),y=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),q=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),B=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),v=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),E=d('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new AmqpBridge</strong>(<code>config</code>)</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',4),C=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),k=e("td",{style:{"text-align":"left"}},[e("code",null,"config")],-1),A={style:{"text-align":"left"}},T=e("code",null,"EventBridgeConfig",-1),P=e("code",null,"AmqpBridgeConfig",-1),I=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),D=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),w={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L86",target:"_blank",rel:"noopener noreferrer"},R=d('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h3><p>• <code>Protected</code> <code>Optional</code> <strong>channel</strong>: <code>Channel</code></p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4>',4),N={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L50",target:"_blank",rel:"noopener noreferrer"},L=e("hr",null,null,-1),S=e("h3",{id:"config",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#config","aria-hidden":"true"},"#"),t(" config")],-1),M=e("strong",null,"config",-1),K=e("code",null,"Complete",-1),F=e("code",null,"EventBridgeConfig",-1),O=e("code",null,"Complete",-1),H=e("code",null,"AmqpBridgeConfig",-1),Q=e("h4",{id:"inherited-from",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from","aria-hidden":"true"},"#"),t(" Inherited from")],-1),G=d('<h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:13</p><hr><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> connection</h3><p>• <code>Protected</code> <code>Optional</code> <strong>connection</strong>: <code>Connection</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4>',6),V={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L49",target:"_blank",rel:"noopener noreferrer"},U=d('<hr><h3 id="consumertags" tabindex="-1"><a class="header-anchor" href="#consumertags" aria-hidden="true">#</a> consumerTags</h3><p>• <code>Protected</code> <strong>consumerTags</strong>: <code>string</code>[] = <code>[]</code></p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4>',4),j={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L55",target:"_blank",rel:"noopener noreferrer"},W=e("hr",null,null,-1),X=e("h3",{id:"defaultcommandtimeout",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defaultcommandtimeout","aria-hidden":"true"},"#"),t(" defaultCommandTimeout")],-1),Y=e("p",null,[t("• "),e("strong",null,"defaultCommandTimeout"),t(": "),e("code",null,"number")],-1),Z=e("p",null,"The default time until when a command invocation automatically returns a time out error",-1),$=e("h4",{id:"implementation-of",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of","aria-hidden":"true"},"#"),t(" Implementation of")],-1),z=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1","aria-hidden":"true"},"#"),t(" Inherited from")],-1),J=e("h4",{id:"defined-in-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-5","aria-hidden":"true"},"#"),t(" Defined in")],-1),ee=e("p",null,"packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:16",-1),te=e("hr",null,null,-1),ae=e("h3",{id:"encoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encoder","aria-hidden":"true"},"#"),t(" encoder")],-1),ie=e("code",null,"Protected",-1),ne=e("strong",null,"encoder",-1),de=e("code",null,"Encoder",-1),re=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),se={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L78",target:"_blank",rel:"noopener noreferrer"},le=e("hr",null,null,-1),oe=e("h3",{id:"encrypter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encrypter","aria-hidden":"true"},"#"),t(" encrypter")],-1),ce=e("code",null,"Protected",-1),he=e("strong",null,"encrypter",-1),pe=e("code",null,"Encrypter",-1),ue=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),me={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L82",target:"_blank",rel:"noopener noreferrer"},ge=d('<hr><h3 id="healthy" tabindex="-1"><a class="header-anchor" href="#healthy" aria-hidden="true">#</a> healthy</h3><p>• <code>Protected</code> <strong>healthy</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4>',4),_e={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L52",target:"_blank",rel:"noopener noreferrer"},fe=e("hr",null,null,-1),be=e("h3",{id:"instanceid",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#instanceid","aria-hidden":"true"},"#"),t(" instanceId")],-1),xe=e("p",null,[t("• "),e("strong",null,"instanceId"),t(": "),e("code",null,"string")],-1),ye=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2","aria-hidden":"true"},"#"),t(" Inherited from")],-1),qe=e("h4",{id:"defined-in-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-9","aria-hidden":"true"},"#"),t(" Defined in")],-1),Be=e("p",null,"packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:15",-1),ve=e("hr",null,null,-1),Ee=e("h3",{id:"logger",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#logger","aria-hidden":"true"},"#"),t(" logger")],-1),Ce=e("strong",null,"logger",-1),ke=e("code",null,"Logger",-1),Ae=e("h4",{id:"inherited-from-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-3","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Te=d('<h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:11</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <strong>name</strong>: <code>string</code></p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1" aria-hidden="true">#</a> Implementation of</h4>',6),Pe=e("h4",{id:"inherited-from-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-4","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Ie=e("h4",{id:"defined-in-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-11","aria-hidden":"true"},"#"),t(" Defined in")],-1),De=e("p",null,"packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:14",-1),we=e("hr",null,null,-1),Re=e("h3",{id:"pendinginvocations",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pendinginvocations","aria-hidden":"true"},"#"),t(" pendingInvocations")],-1),Ne=e("code",null,"Protected",-1),Le=e("strong",null,"pendingInvocations",-1),Se=e("code",null,"Map",-1),Me=e("code",null,"string",-1),Ke=e("code",null,"PendigInvocation",-1),Fe=e("h4",{id:"defined-in-12",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-12","aria-hidden":"true"},"#"),t(" Defined in")],-1),Oe={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L66",target:"_blank",rel:"noopener noreferrer"},He=d('<hr><h3 id="ready" tabindex="-1"><a class="header-anchor" href="#ready" aria-hidden="true">#</a> ready</h3><p>• <code>Protected</code> <strong>ready</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4>',4),Qe={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L53",target:"_blank",rel:"noopener noreferrer"},Ge=d('<hr><h3 id="replyqueuename" tabindex="-1"><a class="header-anchor" href="#replyqueuename" aria-hidden="true">#</a> replyQueueName</h3><p>• <code>Protected</code> <code>Optional</code> <strong>replyQueueName</strong>: <code>string</code></p><h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4>',4),Ve={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L57",target:"_blank",rel:"noopener noreferrer"},Ue=d('<hr><h3 id="runningsubscriptioncount" tabindex="-1"><a class="header-anchor" href="#runningsubscriptioncount" aria-hidden="true">#</a> runningSubscriptionCount</h3><p>• <code>Protected</code> <strong>runningSubscriptionCount</strong>: <code>number</code> = <code>0</code></p><h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4>',4),je={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L68",target:"_blank",rel:"noopener noreferrer"},We=e("hr",null,null,-1),Xe=e("h3",{id:"servicefunctions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#servicefunctions","aria-hidden":"true"},"#"),t(" serviceFunctions")],-1),Ye=e("code",null,"Protected",-1),Ze=e("strong",null,"serviceFunctions",-1),$e=e("code",null,"Map",-1),ze=e("code",null,"string",-1),Je=e("code",null,"cb",-1),et=e("code",null,"message",-1),tt=e("code",null,"Command",-1),at=e("code",null,"Promise",-1),it=e("code",null,"CommandErrorResponse",-1),nt=e("code",null,"CommandSuccessResponse",-1),dt=e("code",null,"channel",-1),rt=e("code",null,"Channel",-1),st=e("h4",{id:"defined-in-16",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-16","aria-hidden":"true"},"#"),t(" Defined in")],-1),lt={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L58",target:"_blank",rel:"noopener noreferrer"},ot=e("hr",null,null,-1),ct=e("h3",{id:"subscriptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#subscriptions","aria-hidden":"true"},"#"),t(" subscriptions")],-1),ht=e("code",null,"Protected",-1),pt=e("strong",null,"subscriptions",-1),ut=e("code",null,"Map",-1),mt=e("code",null,"string",-1),gt=e("code",null,"cb",-1),_t=e("code",null,"message",-1),ft=e("code",null,"CustomMessage",-1),bt=e("code",null,"Promise",-1),xt=e("code",null,"undefined",-1),yt=e("code",null,"Omit",-1),qt=e("code",null,"CustomMessage",-1),Bt=e("code",null,'"id"',-1),vt=e("code",null,'"timestamp"',-1),Et=e("code",null,'"instanceId"',-1),Ct=e("code",null,"channel",-1),kt=e("code",null,"Channel",-1),At=e("h4",{id:"defined-in-17",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-17","aria-hidden":"true"},"#"),t(" Defined in")],-1),Tt={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L70",target:"_blank",rel:"noopener noreferrer"},Pt=e("hr",null,null,-1),It=e("h3",{id:"traceprovider",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#traceprovider","aria-hidden":"true"},"#"),t(" traceProvider")],-1),Dt=e("p",null,[t("• "),e("strong",null,"traceProvider"),t(": "),e("code",null,"NodeTracerProvider")],-1),wt=e("h4",{id:"inherited-from-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-5","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Rt=d('<h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:12</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="decodecontent" tabindex="-1"><a class="header-anchor" href="#decodecontent" aria-hidden="true">#</a> decodeContent</h3><p>▸ <code>Protected</code> <strong>decodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Decode buffer into given type</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Buffer</code></td><td style="text-align:left;">the input buffer</td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the content type of buffer content</td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the encoding type of buffer content</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4>',13),Nt={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L782",target:"_blank",rel:"noopener noreferrer"},Lt=d('<hr><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>▸ <strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Shut down event bridge as gracefully as possible</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2" aria-hidden="true">#</a> Implementation of</h4>',7),St=e("h4",{id:"overrides-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-1","aria-hidden":"true"},"#"),t(" Overrides")],-1),Mt=e("h4",{id:"defined-in-20",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-20","aria-hidden":"true"},"#"),t(" Defined in")],-1),Kt={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L797",target:"_blank",rel:"noopener noreferrer"},Ft=d('<hr><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><p>▸ <strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>parameter?</code>): <code>void</code></p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4>',4),Ot=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ht=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),Qt={style:{"text-align":"left"}},Gt=e("code",null,"EventKey",-1),Vt=e("code",null,"EventBridgeEvents",-1),Ut=e("h4",{id:"parameters-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-2","aria-hidden":"true"},"#"),t(" Parameters")],-1),jt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Wt=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"eventName")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),Xt=e("td",{style:{"text-align":"left"}},[e("code",null,"parameter?")],-1),Yt={style:{"text-align":"left"}},Zt=e("code",null,"EventBridgeEvents",-1),$t=e("code",null,"K",-1),zt=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2","aria-hidden":"true"},"#"),t(" Returns")],-1),Jt=e("p",null,[e("code",null,"void")],-1),ea=e("h4",{id:"inherited-from-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-6","aria-hidden":"true"},"#"),t(" Inherited from")],-1),ta=e("h4",{id:"defined-in-21",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-21","aria-hidden":"true"},"#"),t(" Defined in")],-1),aa=e("p",null,"packages/core/lib/core/types/GenericEventEmitter.d.ts:13",-1),ia=e("hr",null,null,-1),na=e("h3",{id:"emitmessage",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#emitmessage","aria-hidden":"true"},"#"),t(" emitMessage")],-1),da=e("strong",null,"emitMessage",-1),ra=e("code",null,"T",-1),sa=e("code",null,"message",-1),la=e("code",null,"contentType?",-1),oa=e("code",null,"contentEncoding?",-1),ca=e("code",null,"Promise",-1),ha=e("code",null,"Readonly",-1),pa=e("code",null,"EBMessage",-1),ua=e("p",null,"Emit a message to the eventbridge without awaiting a result",-1),ma=e("h4",{id:"type-parameters-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters-2","aria-hidden":"true"},"#"),t(" Type parameters")],-1),ga=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),_a=e("td",{style:{"text-align":"left"}},[e("code",null,"T")],-1),fa={style:{"text-align":"left"}},ba=e("code",null,"EBMessage",-1),xa=e("h4",{id:"parameters-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-3","aria-hidden":"true"},"#"),t(" Parameters")],-1),ya=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value"),e("th",{style:{"text-align":"left"}},"Description")])],-1),qa=e("td",{style:{"text-align":"left"}},[e("code",null,"message")],-1),Ba={style:{"text-align":"left"}},va=e("code",null,"Omit",-1),Ea=e("code",null,"EBMessage",-1),Ca=e("code",null,'"id"',-1),ka=e("code",null,'"timestamp"',-1),Aa=e("code",null,'"instanceId"',-1),Ta=e("code",null,'"correlationId"',-1),Pa=e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")],-1),Ia=e("td",{style:{"text-align":"left"}},"the message",-1),Da=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"contentType")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[e("code",null,"'application/json'")]),e("td",{style:{"text-align":"left"}},"-")],-1),wa=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"contentEncoding")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[e("code",null,"'utf-8'")]),e("td",{style:{"text-align":"left"}},"-")],-1),Ra=e("h4",{id:"returns-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-3","aria-hidden":"true"},"#"),t(" Returns")],-1),Na=e("code",null,"Promise",-1),La=e("code",null,"Readonly",-1),Sa=e("code",null,"EBMessage",-1),Ma=e("h4",{id:"implementation-of-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-3","aria-hidden":"true"},"#"),t(" Implementation of")],-1),Ka=e("h4",{id:"defined-in-22",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-22","aria-hidden":"true"},"#"),t(" Defined in")],-1),Fa={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L266",target:"_blank",rel:"noopener noreferrer"},Oa=d('<hr><h3 id="encodecontent" tabindex="-1"><a class="header-anchor" href="#encodecontent" aria-hidden="true">#</a> encodeContent</h3><p>▸ <code>Protected</code> <strong>encodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>Buffer</code>&gt;</p><p>Encode given payload to buffer</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>T</code></td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Buffer</code>&gt;</p><h4 id="defined-in-23" tabindex="-1"><a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a> Defined in</h4>',11),Ha={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L761",target:"_blank",rel:"noopener noreferrer"},Qa=d('<hr><h3 id="gettracer" tabindex="-1"><a class="header-anchor" href="#gettracer" aria-hidden="true">#</a> getTracer</h3><p>▸ <strong>getTracer</strong>(): <code>Tracer</code></p><p>Returns open telemetry tracer of this service</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Tracer</code></p><p>Tracer</p><h4 id="inherited-from-7" tabindex="-1"><a class="header-anchor" href="#inherited-from-7" aria-hidden="true">#</a> Inherited from</h4>',8),Ga=d('<h4 id="defined-in-24" tabindex="-1"><a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:23</p><hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>▸ <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>commandTimeout?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Call a command of a service and return the result of this command</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4>',9),Va=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Ua=e("td",{style:{"text-align":"left"}},[e("code",null,"input")],-1),ja={style:{"text-align":"left"}},Wa=e("code",null,"Omit",-1),Xa=e("code",null,"Command",-1),Ya=e("code",null,'"id"',-1),Za=e("code",null,'"messageType"',-1),$a=e("code",null,'"timestamp"',-1),za=e("code",null,'"instanceId"',-1),Ja=e("code",null,'"correlationId"',-1),ei=e("td",{style:{"text-align":"left"}},"a partial command message",-1),ti=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"commandTimeout")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},"the time to live (timeout) of the invocation")],-1),ai=e("h4",{id:"returns-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-6","aria-hidden":"true"},"#"),t(" Returns")],-1),ii=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),ni=e("h4",{id:"implementation-of-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-4","aria-hidden":"true"},"#"),t(" Implementation of")],-1),di=e("h4",{id:"defined-in-25",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-25","aria-hidden":"true"},"#"),t(" Defined in")],-1),ri={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L337",target:"_blank",rel:"noopener noreferrer"},si=d('<hr><h3 id="ishealthy" tabindex="-1"><a class="header-anchor" href="#ishealthy" aria-hidden="true">#</a> isHealthy</h3><p>▸ <strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>Indicates if the eventbridge is running and works correctly</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-5" tabindex="-1"><a class="header-anchor" href="#implementation-of-5" aria-hidden="true">#</a> Implementation of</h4>',7),li=e("h4",{id:"defined-in-26",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-26","aria-hidden":"true"},"#"),t(" Defined in")],-1),oi={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L109",target:"_blank",rel:"noopener noreferrer"},ci=d('<hr><h3 id="isready" tabindex="-1"><a class="header-anchor" href="#isready" aria-hidden="true">#</a> isReady</h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>Indicates if the eventbridge has been started and is connected to underlaying message broker</p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-6" tabindex="-1"><a class="header-anchor" href="#implementation-of-6" aria-hidden="true">#</a> Implementation of</h4>',7),hi=e("h4",{id:"defined-in-27",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-27","aria-hidden":"true"},"#"),t(" Defined in")],-1),pi={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L105",target:"_blank",rel:"noopener noreferrer"},ui=d('<hr><h3 id="off" tabindex="-1"><a class="header-anchor" href="#off" aria-hidden="true">#</a> off</h3><p>▸ <strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4>',4),mi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),gi=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),_i={style:{"text-align":"left"}},fi=e("code",null,"EventKey",-1),bi=e("code",null,"EventBridgeEvents",-1),xi=e("h4",{id:"parameters-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-6","aria-hidden":"true"},"#"),t(" Parameters")],-1),yi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),qi=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"eventName")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),Bi=e("td",{style:{"text-align":"left"}},[e("code",null,"fn")],-1),vi={style:{"text-align":"left"}},Ei=e("code",null,"EventReceiver",-1),Ci=e("code",null,"EventBridgeEvents",-1),ki=e("code",null,"K",-1),Ai=e("h4",{id:"returns-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),t(" Returns")],-1),Ti=e("p",null,[e("code",null,"void")],-1),Pi=e("h4",{id:"inherited-from-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-8","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Ii=d('<h4 id="defined-in-28" tabindex="-1"><a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/types/GenericEventEmitter.d.ts:12</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>▸ <strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4>',6),Di=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),wi=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),Ri={style:{"text-align":"left"}},Ni=e("code",null,"EventKey",-1),Li=e("code",null,"EventBridgeEvents",-1),Si=e("h4",{id:"parameters-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-7","aria-hidden":"true"},"#"),t(" Parameters")],-1),Mi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ki=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"eventName")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),Fi=e("td",{style:{"text-align":"left"}},[e("code",null,"fn")],-1),Oi={style:{"text-align":"left"}},Hi=e("code",null,"EventReceiver",-1),Qi=e("code",null,"EventBridgeEvents",-1),Gi=e("code",null,"K",-1),Vi=e("h4",{id:"returns-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-10","aria-hidden":"true"},"#"),t(" Returns")],-1),Ui=e("p",null,[e("code",null,"void")],-1),ji=e("h4",{id:"inherited-from-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-9","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Wi=d('<h4 id="defined-in-29" tabindex="-1"><a class="header-anchor" href="#defined-in-29" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/types/GenericEventEmitter.d.ts:11</p><hr><h3 id="registercommand" tabindex="-1"><a class="header-anchor" href="#registercommand" aria-hidden="true">#</a> registerCommand</h3><p>▸ <strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><p>Register a service function and ensure that there is a queue for all incoming command requests.</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4>',7),Xi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Yi=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),Zi={style:{"text-align":"left"}},$i=e("code",null,"EBMessageAddress",-1),zi=e("td",{style:{"text-align":"left"}},"The service function address",-1),Ji=e("td",{style:{"text-align":"left"}},[e("code",null,"cb")],-1),en={style:{"text-align":"left"}},tn=e("code",null,"message",-1),an=e("code",null,"Command",-1),nn=e("code",null,"Promise",-1),dn=e("code",null,"CommandErrorResponse",-1),rn=e("code",null,"CommandSuccessResponse",-1),sn=e("td",{style:{"text-align":"left"}},"the function to call if a matching command message arrives",-1),ln=e("td",{style:{"text-align":"left"}},[e("code",null,"metadata")],-1),on={style:{"text-align":"left"}},cn=e("code",null,"CommandDefinitionMetadataBase",-1),hn=e("td",{style:{"text-align":"left"}},"-",-1),pn=e("td",{style:{"text-align":"left"}},[e("code",null,"eventBridgeConfig")],-1),un={style:{"text-align":"left"}},mn=e("code",null,"DefinitionEventBridgeConfig",-1),gn=e("td",{style:{"text-align":"left"}},"-",-1),_n=e("h4",{id:"returns-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-11","aria-hidden":"true"},"#"),t(" Returns")],-1),fn=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"string"),t(">")],-1),bn=e("p",null,"the id of command function queue",-1),xn=e("h4",{id:"implementation-of-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-7","aria-hidden":"true"},"#"),t(" Implementation of")],-1),yn=e("h4",{id:"defined-in-30",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-30","aria-hidden":"true"},"#"),t(" Defined in")],-1),qn={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L441",target:"_blank",rel:"noopener noreferrer"},Bn=d('<hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>▸ <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><p>Register a new subscription</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4>',5),vn=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),En=e("td",{style:{"text-align":"left"}},[e("code",null,"subscription")],-1),Cn={style:{"text-align":"left"}},kn=e("code",null,"Subscription",-1),An=e("td",{style:{"text-align":"left"}},"the subscription definition",-1),Tn=e("td",{style:{"text-align":"left"}},[e("code",null,"cb")],-1),Pn={style:{"text-align":"left"}},In=e("code",null,"message",-1),Dn=e("code",null,"EBMessage",-1),wn=e("code",null,"Promise",-1),Rn=e("code",null,"undefined",-1),Nn=e("code",null,"Omit",-1),Ln=e("code",null,"CustomMessage",-1),Sn=e("code",null,'"id"',-1),Mn=e("code",null,'"timestamp"',-1),Kn=e("code",null,'"instanceId"',-1),Fn=e("td",{style:{"text-align":"left"}},"the function to be called if a matching message arrives",-1),On=e("h4",{id:"returns-12",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-12","aria-hidden":"true"},"#"),t(" Returns")],-1),Hn=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"string"),t(">")],-1),Qn=e("h4",{id:"implementation-of-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-8","aria-hidden":"true"},"#"),t(" Implementation of")],-1),Gn=e("h4",{id:"defined-in-31",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-31","aria-hidden":"true"},"#"),t(" Defined in")],-1),Vn={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L617",target:"_blank",rel:"noopener noreferrer"},Un=d('<hr><h3 id="removealllisteners" tabindex="-1"><a class="header-anchor" href="#removealllisteners" aria-hidden="true">#</a> removeAllListeners</h3><p>▸ <strong>removeAllListeners</strong>(): <code>void</code></p><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-10" tabindex="-1"><a class="header-anchor" href="#inherited-from-10" aria-hidden="true">#</a> Inherited from</h4>',6),jn=d('<h4 id="defined-in-32" tabindex="-1"><a class="header-anchor" href="#defined-in-32" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/types/GenericEventEmitter.d.ts:14</p><hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>▸ <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Connect to RabbitMQ broker, ensure exchange, call back queue</p><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-9" tabindex="-1"><a class="header-anchor" href="#implementation-of-9" aria-hidden="true">#</a> Implementation of</h4>',9),Wn=e("h4",{id:"overrides-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-2","aria-hidden":"true"},"#"),t(" Overrides")],-1),Xn=e("h4",{id:"defined-in-33",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-33","aria-hidden":"true"},"#"),t(" Defined in")],-1),Yn={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L116",target:"_blank",rel:"noopener noreferrer"},Zn=d('<hr><h3 id="startactivespan" tabindex="-1"><a class="header-anchor" href="#startactivespan" aria-hidden="true">#</a> startActiveSpan</h3><p>▸ <strong>startActiveSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start a child span for opentelemetry tracking</p><h4 id="type-parameters-7" tabindex="-1"><a class="header-anchor" href="#type-parameters-7" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>context</code></td><td style="text-align:left;"><code>undefined</code> | <code>Context</code></td><td style="text-align:left;">optional context</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function to be executed within the span</td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-11" tabindex="-1"><a class="header-anchor" href="#inherited-from-11" aria-hidden="true">#</a> Inherited from</h4>',12),$n=d('<h4 id="defined-in-34" tabindex="-1"><a class="header-anchor" href="#defined-in-34" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:32</p><hr><h3 id="unregistercommand" tabindex="-1"><a class="header-anchor" href="#unregistercommand" aria-hidden="true">#</a> unregisterCommand</h3><p>▸ <strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Unregister a service command</p><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4>',7),zn=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Jn=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),ed={style:{"text-align":"left"}},td=e("code",null,"EBMessageAddress",-1),ad=e("td",{style:{"text-align":"left"}},"The address (service name, version and command name) of the command to be de-registered",-1),id=e("h4",{id:"returns-16",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-16","aria-hidden":"true"},"#"),t(" Returns")],-1),nd=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),dd=e("h4",{id:"implementation-of-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-10","aria-hidden":"true"},"#"),t(" Implementation of")],-1),rd=e("h4",{id:"defined-in-35",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-35","aria-hidden":"true"},"#"),t(" Defined in")],-1),sd={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L598",target:"_blank",rel:"noopener noreferrer"},ld=d('<hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>▸ <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-12" tabindex="-1"><a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a> Parameters</h4>',4),od=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),cd=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),hd={style:{"text-align":"left"}},pd=e("code",null,"EBMessageAddress",-1),ud=e("h4",{id:"returns-17",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-17","aria-hidden":"true"},"#"),t(" Returns")],-1),md=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),gd=e("h4",{id:"implementation-of-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-of-11","aria-hidden":"true"},"#"),t(" Implementation of")],-1),_d=e("h4",{id:"defined-in-36",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-36","aria-hidden":"true"},"#"),t(" Defined in")],-1),fd={href:"https://github.com/sebastianwessel/purista/blob/8c66693/packages/amqpbridge/src/AmqpBridge.impl.ts#L735",target:"_blank",rel:"noopener noreferrer"},bd=d('<hr><h3 id="wrapinspan" tabindex="-1"><a class="header-anchor" href="#wrapinspan" aria-hidden="true">#</a> wrapInSpan</h3><p>▸ <strong>wrapInSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context?</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start span for opentelemetry tracking on same level. The created span will not become the &quot;active&quot; span within opentelemetry!</p><p>This means during logging and similar the spanId of parent span is logged.</p><p>Use wrapInSpan for marking points in flow of one bigger function, but not to trace the program flow itself</p><h4 id="type-parameters-8" tabindex="-1"><a class="header-anchor" href="#type-parameters-8" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-13" tabindex="-1"><a class="header-anchor" href="#parameters-13" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function te be executed in the span</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>Context</code></td><td style="text-align:left;">span context</td></tr></tbody></table><h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-12" tabindex="-1"><a class="header-anchor" href="#inherited-from-12" aria-hidden="true">#</a> Inherited from</h4>',14),xd=e("h4",{id:"defined-in-37",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-37","aria-hidden":"true"},"#"),t(" Defined in")],-1),yd=e("p",null,"packages/core/lib/core/EventBridge/EventBridgeBaseClass.impl.d.ts:48",-1);function qd(Bd,vd){const i=s("RouterLink"),r=s("ExternalLinkIcon");return o(),c("div",null,[e("p",null,[a(i,{to:"/api/"},{default:n(()=>[t("PURISTA API - v1.4.9")]),_:1}),t(" / "),a(i,{to:"/api/modules.html"},{default:n(()=>[t("Modules")]),_:1}),t(" / "),a(i,{to:"/api/modules/purista_amqpbridge.html"},{default:n(()=>[t("@purista/amqpbridge")]),_:1}),t(" / AmqpBridge")]),p,e("p",null,[a(i,{to:"/api/modules/purista_amqpbridge.html"},{default:n(()=>[t("@purista/amqpbridge")]),_:1}),t(".AmqpBridge")]),u,m,e("ul",null,[e("li",null,[e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[g]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:n(()=>[_]),_:1}),t(">")]),f])]),b,e("ul",null,[e("li",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[x]),_:1})])]),y,q,e("ul",null,[e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#constructor"},{default:n(()=>[t("constructor")]),_:1})])]),B,e("ul",null,[e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#channel"},{default:n(()=>[t("channel")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#config"},{default:n(()=>[t("config")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#connection"},{default:n(()=>[t("connection")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#consumertags"},{default:n(()=>[t("consumerTags")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#defaultcommandtimeout"},{default:n(()=>[t("defaultCommandTimeout")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#encoder"},{default:n(()=>[t("encoder")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#encrypter"},{default:n(()=>[t("encrypter")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#healthy"},{default:n(()=>[t("healthy")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#instanceid"},{default:n(()=>[t("instanceId")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#logger"},{default:n(()=>[t("logger")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#name"},{default:n(()=>[t("name")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#pendinginvocations"},{default:n(()=>[t("pendingInvocations")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#ready"},{default:n(()=>[t("ready")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#replyqueuename"},{default:n(()=>[t("replyQueueName")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#runningsubscriptioncount"},{default:n(()=>[t("runningSubscriptionCount")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#servicefunctions"},{default:n(()=>[t("serviceFunctions")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#subscriptions"},{default:n(()=>[t("subscriptions")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#traceprovider"},{default:n(()=>[t("traceProvider")]),_:1})])]),v,e("ul",null,[e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#decodecontent"},{default:n(()=>[t("decodeContent")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#destroy"},{default:n(()=>[t("destroy")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#emit"},{default:n(()=>[t("emit")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#emitmessage"},{default:n(()=>[t("emitMessage")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#encodecontent"},{default:n(()=>[t("encodeContent")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#gettracer"},{default:n(()=>[t("getTracer")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#invoke"},{default:n(()=>[t("invoke")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#ishealthy"},{default:n(()=>[t("isHealthy")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#isready"},{default:n(()=>[t("isReady")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#off"},{default:n(()=>[t("off")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#on"},{default:n(()=>[t("on")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#registercommand"},{default:n(()=>[t("registerCommand")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#registersubscription"},{default:n(()=>[t("registerSubscription")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#removealllisteners"},{default:n(()=>[t("removeAllListeners")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#start"},{default:n(()=>[t("start")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#startactivespan"},{default:n(()=>[t("startActiveSpan")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#unregistercommand"},{default:n(()=>[t("unregisterCommand")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#unregistersubscription"},{default:n(()=>[t("unregisterSubscription")]),_:1})]),e("li",null,[a(i,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#wrapinspan"},{default:n(()=>[t("wrapInSpan")]),_:1})])]),E,e("table",null,[C,e("tbody",null,[e("tr",null,[k,e("td",A,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeconfig"},{default:n(()=>[T]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:n(()=>[P]),_:1}),t(">")])])])]),I,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#constructor"},{default:n(()=>[t("constructor")]),_:1})]),D,e("p",null,[e("a",w,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:86"),a(r)])]),R,e("p",null,[e("a",N,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:50"),a(r)])]),L,S,e("p",null,[t("• "),M,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#complete"},{default:n(()=>[K]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeconfig"},{default:n(()=>[F]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#complete"},{default:n(()=>[O]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:n(()=>[H]),_:1}),t(">>>")]),Q,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#config"},{default:n(()=>[t("config")]),_:1})]),G,e("p",null,[e("a",V,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:49"),a(r)])]),U,e("p",null,[e("a",j,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:55"),a(r)])]),W,X,Y,Z,$,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#defaultcommandtimeout"},{default:n(()=>[t("defaultCommandTimeout")]),_:1})]),z,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#defaultcommandtimeout"},{default:n(()=>[t("defaultCommandTimeout")]),_:1})]),J,ee,te,ae,e("p",null,[t("• "),ie,t(),ne,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:n(()=>[de]),_:1})]),re,e("p",null,[e("a",se,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:78"),a(r)])]),le,oe,e("p",null,[t("• "),ce,t(),he,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:n(()=>[pe]),_:1})]),ue,e("p",null,[e("a",me,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:82"),a(r)])]),ge,e("p",null,[e("a",_e,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:52"),a(r)])]),fe,be,xe,ye,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#instanceid"},{default:n(()=>[t("instanceId")]),_:1})]),qe,Be,ve,Ee,e("p",null,[t("• "),Ce,t(": "),a(i,{to:"/api/classes/purista_amqpbridge.internal.Logger.html"},{default:n(()=>[ke]),_:1})]),Ae,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#logger"},{default:n(()=>[t("logger")]),_:1})]),Te,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#name"},{default:n(()=>[t("name")]),_:1})]),Pe,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#name"},{default:n(()=>[t("name")]),_:1})]),Ie,De,we,Re,e("p",null,[t("• "),Ne,t(),Le,t(": "),Se,t("<"),Me,t(", "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#pendiginvocation"},{default:n(()=>[Ke]),_:1}),t(">")]),Fe,e("p",null,[e("a",Oe,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:66"),a(r)])]),He,e("p",null,[e("a",Qe,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:53"),a(r)])]),Ge,e("p",null,[e("a",Ve,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:57"),a(r)])]),Ue,e("p",null,[e("a",je,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:68"),a(r)])]),We,Xe,e("p",null,[t("• "),Ye,t(),Ze,t(": "),$e,t("<"),ze,t(", { "),Je,t(": ("),et,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:n(()=>[tt]),_:1}),t(") => "),at,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#commanderrorresponse-1"},{default:n(()=>[it]),_:1}),t(" | "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#commandsuccessresponse-1"},{default:n(()=>[nt]),_:1}),t("> ; "),dt,t(": "),rt,t(" }>")]),st,e("p",null,[e("a",lt,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:58"),a(r)])]),ot,ct,e("p",null,[t("• "),ht,t(),pt,t(": "),ut,t("<"),mt,t(", { "),gt,t(": ("),_t,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#custommessage-1"},{default:n(()=>[ft]),_:1}),t(") => "),bt,t("<"),xt,t(" | "),yt,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#custommessage-1"},{default:n(()=>[qt]),_:1}),t(", "),Bt,t(" | "),vt,t(" | "),Et,t(">> ; "),Ct,t(": "),kt,t(" }>")]),At,e("p",null,[e("a",Tt,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:70"),a(r)])]),Pt,It,Dt,wt,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#traceprovider"},{default:n(()=>[t("traceProvider")]),_:1})]),Rt,e("p",null,[e("a",Nt,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:782"),a(r)])]),Lt,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#destroy"},{default:n(()=>[t("destroy")]),_:1})]),St,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#destroy"},{default:n(()=>[t("destroy")]),_:1})]),Mt,e("p",null,[e("a",Kt,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:797"),a(r)])]),Ft,e("table",null,[Ot,e("tbody",null,[e("tr",null,[Ht,e("td",Qt,[t("extends "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventkey"},{default:n(()=>[Gt]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:n(()=>[Vt]),_:1}),t(">")])])])]),Ut,e("table",null,[jt,e("tbody",null,[Wt,e("tr",null,[Xt,e("td",Yt,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:n(()=>[Zt]),_:1}),t("["),$t,t("]")])])])]),zt,Jt,ea,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#emit"},{default:n(()=>[t("emit")]),_:1})]),ta,aa,ia,na,e("p",null,[t("▸ "),da,t("<"),ra,t(">("),sa,t(", "),la,t(", "),oa,t("): "),ca,t("<"),ha,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:n(()=>[pa]),_:1}),t(">>")]),ua,ma,e("table",null,[ga,e("tbody",null,[e("tr",null,[_a,e("td",fa,[t("extends "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:n(()=>[ba]),_:1})])])])]),xa,e("table",null,[ya,e("tbody",null,[e("tr",null,[qa,e("td",Ba,[va,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:n(()=>[Ea]),_:1}),t(", "),Ca,t(" | "),ka,t(" | "),Aa,t(" | "),Ta,t(">")]),Pa,Ia]),Da,wa])]),Ra,e("p",null,[Na,t("<"),La,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:n(()=>[Sa]),_:1}),t(">>")]),Ma,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#emitmessage"},{default:n(()=>[t("emitMessage")]),_:1})]),Ka,e("p",null,[e("a",Fa,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:266"),a(r)])]),Oa,e("p",null,[e("a",Ha,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:761"),a(r)])]),Qa,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#gettracer"},{default:n(()=>[t("getTracer")]),_:1})]),Ga,e("table",null,[Va,e("tbody",null,[e("tr",null,[Ua,e("td",ja,[Wa,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:n(()=>[Xa]),_:1}),t(", "),Ya,t(" | "),Za,t(" | "),$a,t(" | "),za,t(" | "),Ja,t(">")]),ei]),ti])]),ai,ii,ni,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#invoke"},{default:n(()=>[t("invoke")]),_:1})]),di,e("p",null,[e("a",ri,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:337"),a(r)])]),si,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#ishealthy"},{default:n(()=>[t("isHealthy")]),_:1})]),li,e("p",null,[e("a",oi,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:109"),a(r)])]),ci,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#isready"},{default:n(()=>[t("isReady")]),_:1})]),hi,e("p",null,[e("a",pi,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:105"),a(r)])]),ui,e("table",null,[mi,e("tbody",null,[e("tr",null,[gi,e("td",_i,[t("extends "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventkey"},{default:n(()=>[fi]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:n(()=>[bi]),_:1}),t(">")])])])]),xi,e("table",null,[yi,e("tbody",null,[qi,e("tr",null,[Bi,e("td",vi,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventreceiver"},{default:n(()=>[Ei]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:n(()=>[Ci]),_:1}),t("["),ki,t("]>")])])])]),Ai,Ti,Pi,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#off"},{default:n(()=>[t("off")]),_:1})]),Ii,e("table",null,[Di,e("tbody",null,[e("tr",null,[wi,e("td",Ri,[t("extends "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventkey"},{default:n(()=>[Ni]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:n(()=>[Li]),_:1}),t(">")])])])]),Si,e("table",null,[Mi,e("tbody",null,[Ki,e("tr",null,[Fi,e("td",Oi,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventreceiver"},{default:n(()=>[Hi]),_:1}),t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:n(()=>[Qi]),_:1}),t("["),Gi,t("]>")])])])]),Vi,Ui,ji,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#on"},{default:n(()=>[t("on")]),_:1})]),Wi,e("table",null,[Xi,e("tbody",null,[e("tr",null,[Yi,e("td",Zi,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessageaddress"},{default:n(()=>[$i]),_:1})]),zi]),e("tr",null,[Ji,e("td",en,[t("("),tn,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:n(()=>[an]),_:1}),t(") => "),nn,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#commanderrorresponse-1"},{default:n(()=>[dn]),_:1}),t(" | "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#commandsuccessresponse-1"},{default:n(()=>[rn]),_:1}),t(">")]),sn]),e("tr",null,[ln,e("td",on,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#commanddefinitionmetadatabase"},{default:n(()=>[cn]),_:1})]),hn]),e("tr",null,[pn,e("td",un,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#definitioneventbridgeconfig"},{default:n(()=>[mn]),_:1})]),gn])])]),_n,fn,bn,xn,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#registercommand"},{default:n(()=>[t("registerCommand")]),_:1})]),yn,e("p",null,[e("a",qn,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:441"),a(r)])]),Bn,e("table",null,[vn,e("tbody",null,[e("tr",null,[En,e("td",Cn,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#subscription"},{default:n(()=>[kn]),_:1})]),An]),e("tr",null,[Tn,e("td",Pn,[t("("),In,t(": "),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:n(()=>[Dn]),_:1}),t(") => "),wn,t("<"),Rn,t(" | "),Nn,t("<"),a(i,{to:"/api/modules/purista_amqpbridge.internal.html#custommessage-1"},{default:n(()=>[Ln]),_:1}),t(", "),Sn,t(" | "),Mn,t(" | "),Kn,t(">>")]),Fn])])]),On,Hn,Qn,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#registersubscription"},{default:n(()=>[t("registerSubscription")]),_:1})]),Gn,e("p",null,[e("a",Vn,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:617"),a(r)])]),Un,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#removealllisteners"},{default:n(()=>[t("removeAllListeners")]),_:1})]),jn,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#start"},{default:n(()=>[t("start")]),_:1})]),Wn,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#start"},{default:n(()=>[t("start")]),_:1})]),Xn,e("p",null,[e("a",Yn,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:116"),a(r)])]),Zn,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#startactivespan"},{default:n(()=>[t("startActiveSpan")]),_:1})]),$n,e("table",null,[zn,e("tbody",null,[e("tr",null,[Jn,e("td",ed,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessageaddress"},{default:n(()=>[td]),_:1})]),ad])])]),id,nd,dd,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#unregistercommand"},{default:n(()=>[t("unregisterCommand")]),_:1})]),rd,e("p",null,[e("a",sd,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:598"),a(r)])]),ld,e("table",null,[od,e("tbody",null,[e("tr",null,[cd,e("td",hd,[a(i,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessageaddress"},{default:n(()=>[pd]),_:1})])])])]),ud,md,gd,e("p",null,[a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html"},{default:n(()=>[t("EventBridge")]),_:1}),t("."),a(i,{to:"/api/interfaces/purista_amqpbridge.internal.EventBridge.html#unregistersubscription"},{default:n(()=>[t("unregisterSubscription")]),_:1})]),_d,e("p",null,[e("a",fd,[t("packages/amqpbridge/src/AmqpBridge.impl.ts:735"),a(r)])]),bd,e("p",null,[a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html"},{default:n(()=>[t("EventBridgeBaseClass")]),_:1}),t("."),a(i,{to:"/api/classes/purista_amqpbridge.internal.EventBridgeBaseClass.html#wrapinspan"},{default:n(()=>[t("wrapInSpan")]),_:1})]),xd,yd])}const Cd=l(h,[["render",qd],["__file","purista_amqpbridge.AmqpBridge.html.vue"]]);export{Cd as default};
