import{_ as o,c as t,o as c,ag as a}from"./chunks/framework.U_AETC1W.js";const g=JSON.parse('{"title":"Function: getSubscriptionHandler()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/mqttbridge/functions/getSubscriptionHandler.md","filePath":"api/@purista/mqttbridge/functions/getSubscriptionHandler.md","lastUpdated":1739900666000}'),r={name:"api/@purista/mqttbridge/functions/getSubscriptionHandler.md"};function d(n,e,s,i,p,u){return c(),t("div",null,e[0]||(e[0]=[a('<p><a href="./../README.html"><strong>@purista/mqttbridge v1.11.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/mqttbridge</a> / getSubscriptionHandler</p><h1 id="function-getsubscriptionhandler" tabindex="-1">Function: getSubscriptionHandler() <a class="header-anchor" href="#function-getsubscriptionhandler" aria-label="Permalink to &quot;Function: getSubscriptionHandler()&quot;">​</a></h1><blockquote><p><strong>getSubscriptionHandler</strong>(<code>_subscription</code>, <code>cb</code>): <a href="./../type-aliases/IncomingMessageFunction.html"><code>IncomingMessageFunction</code></a></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/mqttbridge/src/handler/getSubscriptionHandler.impl.ts#L18" target="_blank" rel="noreferrer">mqttbridge/src/handler/getSubscriptionHandler.impl.ts:18</a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="subscription" tabindex="-1">_subscription <a class="header-anchor" href="#subscription" aria-label="Permalink to &quot;\\_subscription&quot;">​</a></h3><p><a href="./../../core/type-aliases/Subscription.html"><code>Subscription</code></a></p><h3 id="cb" tabindex="-1">cb <a class="header-anchor" href="#cb" aria-label="Permalink to &quot;cb&quot;">​</a></h3><p>(<code>message</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#custommessage"><code>CustomMessage</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>unknown</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../type-aliases/IncomingMessageFunction.html"><code>IncomingMessageFunction</code></a></p>',13)]))}const m=o(r,[["render",d]]);export{g as __pageData,m as default};
