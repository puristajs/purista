import{_ as i,c as e,o as t,ag as a}from"./chunks/framework.U_AETC1W.js";const c=JSON.parse('{"title":"Custom Event Messages","description":"How to define and use custom events within PURISTA typescript nodejs backend framework","frontmatter":{"title":"Custom Event Messages","description":"How to define and use custom events within PURISTA typescript nodejs backend framework","order":204000},"headers":[],"relativePath":"handbook/2_building_business-logic/custom_events.md","filePath":"handbook/2_building_business-logic/custom_events.md","lastUpdated":1725106538000}'),n={name:"handbook/2_building_business-logic/custom_events.md"};function h(o,s,p,l,d,r){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="custom-event-messages" tabindex="-1">Custom Event Messages <a class="header-anchor" href="#custom-event-messages" aria-label="Permalink to &quot;Custom Event Messages&quot;">â€‹</a></h1><p>To be able to build real world systems, you will need to send events, which will be consumed by subscriptions or third party providers. The sender does/should not need to know, who is consuming this information.</p><p>To define a custom event, an event name and a event schema must be set. The command and subscription builders provide the <code>canEmit</code> method, which should be used.</p><p>Emitting custom events is quite easy. The function context and the subscription context containing a helper function <code>emit</code>. This async <code>emit</code> function has two parameters. The event name and the optional payload to be sent.<br> The event name and type is automatically inherited by the definition done with <code>canEmit</code>.</p><p>Example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canEmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyEventName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ some: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCommandFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyEventName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { some: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Payload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The emitted message will have the current service (name &amp; version &amp; function/subscription-name) as sender address. But there is no receiver defined at all. Emitting a custom event will be broadcasted without a specific receiver. It is up to you, to ensure, that there is somebody who listens for this event.</p>`,7)]))}const E=i(n,[["render",h]]);export{c as __pageData,E as default};
