import{_ as n,W as s,X as a,Y as e}from"./framework-d89ed822.js";const t={},p=e(`<p>In general, a service itself should not contain any logic. It should only act as a logical container, which provides functionality defined and handled by PURISTA.</p><p>The main reason for it:<br> Command and subscription functions will become directly coupled to the service and the states of an actual service instance. This not only increases complexity and makes unit tests more difficult. It makes it very difficult, to be able to deploy single functions as FaaS and to scale things.</p><p>But, there might be some edge cases, where it makes sense to have a custom class.<br> A good example of such an edge case:<br> Your service needs to act as a kind of adapter or gateway, to some other third-party solution, and there is no straightforward way, to solve this at the infrastructure level.</p><p>In this case, you know and might accept, that your service is running as an instance 24/7, and can&#39;t be deployed as FaaS.</p><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// CustomUserClass.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CustomMessage<span class="token punctuation">,</span> EBMessageAddress<span class="token punctuation">,</span> EBMessageType<span class="token punctuation">,</span> getNewTraceId<span class="token punctuation">,</span> Service <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> customConnect<span class="token punctuation">,</span> CustomProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;custom-provider&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserServiceV1Config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./userServiceConfig&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomUserClass</span> <span class="token keyword">extends</span> <span class="token class-name">Service<span class="token operator">&lt;</span>UserServiceV1Config<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> customProvider<span class="token operator">?</span><span class="token operator">:</span> CustomProvider
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// your custom logic</span>
    <span class="token comment">// connect to a third-party provider</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>customProvider <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">customConnect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span>

    <span class="token comment">// listen for data and emit it as PURISTA custom event to the event bridge</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>customProvider<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> sender<span class="token operator">:</span> EBMessageAddress <span class="token operator">=</span> <span class="token punctuation">{</span>
        serviceName<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>serviceName<span class="token punctuation">,</span>
        serviceVersion<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>serviceVersion<span class="token punctuation">,</span>
        serviceTarget<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> message<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span>CustomMessage<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;instanceId&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;timestamp&#39;</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        messageType<span class="token operator">:</span> EBMessageType<span class="token punctuation">.</span>CustomMessage<span class="token punctuation">,</span>
        traceId<span class="token operator">:</span> <span class="token function">getNewTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        contentType<span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
        contentEncoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>
        sender<span class="token punctuation">,</span>
        eventName<span class="token operator">:</span> <span class="token string">&#39;myCustomEven&#39;</span><span class="token punctuation">,</span>
        payload<span class="token operator">:</span> data<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventBridge<span class="token punctuation">.</span><span class="token function">emitMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customProvider<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and than add it in the base service builder file:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// userV1ServiceBuilder.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServiceBuilder<span class="token punctuation">,</span> ServiceInfoType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> generalUserServiceInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../generalUserServiceInfo&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CustomUserClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./CustomUserClass&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> userServiceV1ConfigSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./userServiceConfig&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> userServiceInfo<span class="token operator">:</span> ServiceInfoType <span class="token operator">=</span> <span class="token punctuation">{</span>
  serviceVersion<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>generalUserServiceInfo<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// create a service builder instance and assign service config schema and default config.</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> userV1ServiceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceBuilder</span><span class="token punctuation">(</span>userServiceInfo<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setConfigSchema</span><span class="token punctuation">(</span>userServiceV1ConfigSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myOption<span class="token operator">:</span> <span class="token string">&#39;something&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setCustomClass</span><span class="token punctuation">(</span>CustomUserClass<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, the service acts as a gateway to push data from third-party providers into the event bridge/PURISTA part.<br> You might want to have a subscription or command here, to push data in the opposite direction.<br> To move data from the event bridge/PURISTA part to the third-party provider, create a subscription or command like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">setCommandFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_context<span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customProvider<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    response
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you need to implement a custom service class, try to avoid adding many subscriptions or commands here. Reduce it to the bare minimum, and consider an additional class for commands and subscriptions, which do not directly need the custom functionality.</p></div>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","2_custom_service_class.html.vue"]]);export{u as default};
