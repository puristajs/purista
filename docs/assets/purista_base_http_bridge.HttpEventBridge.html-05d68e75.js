import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as h,b as e,e as d,w as a,d as t,a as o}from"./app-9aedf0b4.js";const l={},p=e("h1",{id:"class-httpeventbridge-customconfig",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-httpeventbridge-customconfig","aria-hidden":"true"},"#"),t(" Class: HttpEventBridge<CustomConfig>")],-1),g=e("p",null,"The HTTP event bridge is a generic event bridge. In environments like Dapr or Knative, the communication is done via sidecar containers and via HTTP.",-1),u=e("p",null,"In these cases, it is expected, that the current instance is a HTTP server, which provides REST endpoints for commands and subscriptions. The communication from the current instance to the sidecar is also done via REST endpoints.",-1),f=e("p",null,"HTTP calls from the sidecar to the current instance might be done via CloudEvent schema, which wraps the payload into a defined structure. The HttpEventBridge can be configured to respect this, and to extract the information from CloudEvents.",-1),m=e("p",null,"To use the HttpEventBridge, you will need following peer-dependencies installed:",-1),b=e("ul",null,[e("li",null,"hono"),e("li",null,"trouter")],-1),v=e("h2",{id:"type-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters","aria-hidden":"true"},"#"),t(" Type parameters")],-1),_=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),y=e("td",{style:{"text-align":"left"}},[e("code",null,"CustomConfig")],-1),x={style:{"text-align":"left"}},E=e("code",null,"HttpEventBridgeConfig",-1),B=o('<h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a> Hierarchy</h2><ul><li><p><code>EventBridgeBaseClass</code>&lt;<code>CustomConfig</code>&gt;</p><p>↳ <strong><code>HttpEventBridge</code></strong></p></li></ul><h2 id="implements" tabindex="-1"><a class="header-anchor" href="#implements" aria-hidden="true">#</a> Implements</h2><ul><li><code>EventBridge</code></li></ul><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',6),H=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),T=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),C=o('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new HttpEventBridge</strong>&lt;<code>CustomConfig</code>&gt;(<code>config</code>, <code>client</code>)</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4>',4),I=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),k=e("td",{style:{"text-align":"left"}},[e("code",null,"CustomConfig")],-1),w={style:{"text-align":"left"}},P=e("code",null,"HttpEventBridgeConfig",-1),S=e("h4",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters","aria-hidden":"true"},"#"),t(" Parameters")],-1),N=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),q=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config")]),e("td",{style:{"text-align":"left"}},"{ [K in string | number | symbol]: (Object & CustomConfig)[K] }")],-1),R=e("td",{style:{"text-align":"left"}},[e("code",null,"client")],-1),D={style:{"text-align":"left"}},L=e("code",null,"HttpEventBridgeClient",-1),K=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),M=e("p",null,"EventBridgeBaseClass<CustomConfig&gt;.constructor",-1),A=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),O={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L73",target:"_blank",rel:"noopener noreferrer"},V=o('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="app" tabindex="-1"><a class="header-anchor" href="#app" aria-hidden="true">#</a> app</h3><p>• <strong>app</strong>: <code>Hono</code>&lt;<code>Env</code>, {}, <code>&quot;/&quot;</code>&gt;</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4>',4),F={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L67",target:"_blank",rel:"noopener noreferrer"},j=e("hr",null,null,-1),G=e("h3",{id:"client",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#client","aria-hidden":"true"},"#"),t(" client")],-1),U=e("strong",null,"client",-1),Q=e("code",null,"HttpEventBridgeClient",-1),z=e("h4",{id:"defined-in-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-2","aria-hidden":"true"},"#"),t(" Defined in")],-1),J={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L71",target:"_blank",rel:"noopener noreferrer"},W=o('<hr><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3><p>• <strong>config</strong>: <code>Complete</code>&lt;{ [K in string | number | symbol]: (Object &amp; CustomConfig)[K] }&gt;</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.config</p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:13</p><hr><h3 id="defaultcommandtimeout" tabindex="-1"><a class="header-anchor" href="#defaultcommandtimeout" aria-hidden="true">#</a> defaultCommandTimeout</h3><p>• <strong>defaultCommandTimeout</strong>: <code>number</code></p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.defaultCommandTimeout</p><h4 id="inherited-from-1" tabindex="-1"><a class="header-anchor" href="#inherited-from-1" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.defaultCommandTimeout</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:16</p><hr><h3 id="instanceid" tabindex="-1"><a class="header-anchor" href="#instanceid" aria-hidden="true">#</a> instanceId</h3><p>• <strong>instanceId</strong>: <code>string</code></p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.instanceId</p><h4 id="inherited-from-2" tabindex="-1"><a class="header-anchor" href="#inherited-from-2" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.instanceId</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:15</p><hr><h3 id="isshuttingdown" tabindex="-1"><a class="header-anchor" href="#isshuttingdown" aria-hidden="true">#</a> isShuttingDown</h3><p>• <strong>isShuttingDown</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4>',29),X={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L68",target:"_blank",rel:"noopener noreferrer"},Y=e("hr",null,null,-1),Z=e("h3",{id:"isstarted",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#isstarted","aria-hidden":"true"},"#"),t(" isStarted")],-1),$=e("p",null,[t("• "),e("strong",null,"isStarted"),t(": "),e("code",null,"boolean"),t(" = "),e("code",null,"false")],-1),ee=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),te={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L69",target:"_blank",rel:"noopener noreferrer"},de=o('<hr><h3 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> logger</h3><p>• <strong>logger</strong>: <code>Logger</code></p><h4 id="inherited-from-3" tabindex="-1"><a class="header-anchor" href="#inherited-from-3" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.logger</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:11</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <strong>name</strong>: <code>string</code></p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.name</p><h4 id="inherited-from-4" tabindex="-1"><a class="header-anchor" href="#inherited-from-4" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.name</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:14</p><hr><h3 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h3><p>• <strong>server</strong>: <code>undefined</code> | <code>Server</code>&lt;typeof <code>IncomingMessage</code>, typeof <code>ServerResponse</code>&gt;</p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4>',20),re={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L66",target:"_blank",rel:"noopener noreferrer"},ae=o('<hr><h3 id="traceprovider" tabindex="-1"><a class="header-anchor" href="#traceprovider" aria-hidden="true">#</a> traceProvider</h3><p>• <strong>traceProvider</strong>: <code>NodeTracerProvider</code></p><h4 id="inherited-from-5" tabindex="-1"><a class="header-anchor" href="#inherited-from-5" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.traceProvider</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:12</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>▸ <strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Shut down event bridge as gracefully as possible</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.destroy</p><h4 id="overrides-1" tabindex="-1"><a class="header-anchor" href="#overrides-1" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass.destroy</p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4>',18),ne={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L350",target:"_blank",rel:"noopener noreferrer"},oe=o('<hr><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><p>▸ <strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>parameter?</code>): <code>void</code></p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>parameter?</code></td><td style="text-align:left;">{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-6" tabindex="-1"><a class="header-anchor" href="#inherited-from-6" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.emit</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:13</p><hr><h3 id="emitmessage" tabindex="-1"><a class="header-anchor" href="#emitmessage" aria-hidden="true">#</a> emitMessage</h3><p>▸ <strong>emitMessage</strong>&lt;<code>T</code>&gt;(<code>message</code>): <code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>EBMessage</code></td></tr></tbody></table><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>message</code></td><td style="text-align:left;"><code>Omit</code>&lt;<code>EBMessage</code>, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.emitMessage</p><h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4>',25),ie={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L143",target:"_blank",rel:"noopener noreferrer"},se=o('<hr><h3 id="gettracer" tabindex="-1"><a class="header-anchor" href="#gettracer" aria-hidden="true">#</a> getTracer</h3><p>▸ <strong>getTracer</strong>(): <code>Tracer</code></p><p>Returns open telemetry tracer of this service</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>Tracer</code></p><p>Tracer</p><h4 id="inherited-from-7" tabindex="-1"><a class="header-anchor" href="#inherited-from-7" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.getTracer</p><h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:23</p><hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>▸ <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>ttl?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;messageType&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td></tr><tr><td style="text-align:left;"><code>ttl?</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="implementation-of-5" tabindex="-1"><a class="header-anchor" href="#implementation-of-5" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.invoke</p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4>',23),ce={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L203",target:"_blank",rel:"noopener noreferrer"},he=o('<hr><h3 id="ishealthy" tabindex="-1"><a class="header-anchor" href="#ishealthy" aria-hidden="true">#</a> isHealthy</h3><p>▸ <strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-6" tabindex="-1"><a class="header-anchor" href="#implementation-of-6" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isHealthy</p><h4 id="defined-in-17" tabindex="-1"><a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a> Defined in</h4>',8),le={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L340",target:"_blank",rel:"noopener noreferrer"},pe=o('<hr><h3 id="isready" tabindex="-1"><a class="header-anchor" href="#isready" aria-hidden="true">#</a> isReady</h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-7" tabindex="-1"><a class="header-anchor" href="#implementation-of-7" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isReady</p><h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4>',8),ge={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L336",target:"_blank",rel:"noopener noreferrer"},ue=o('<hr><h3 id="off" tabindex="-1"><a class="header-anchor" href="#off" aria-hidden="true">#</a> off</h3><p>▸ <strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-8" tabindex="-1"><a class="header-anchor" href="#inherited-from-8" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.off</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:12</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>▸ <strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-9" tabindex="-1"><a class="header-anchor" href="#inherited-from-9" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.on</p><h4 id="defined-in-20" tabindex="-1"><a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:11</p><hr><h3 id="registercommand" tabindex="-1"><a class="header-anchor" href="#registercommand" aria-hidden="true">#</a> registerCommand</h3><p>▸ <strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;<code>Readonly</code>&lt;<code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;instanceId&quot;</code>&gt;&gt; | <code>Readonly</code>&lt;<code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;instanceId&quot;</code>&gt;&gt;&gt;</td></tr><tr><td style="text-align:left;"><code>metadata</code></td><td style="text-align:left;"><code>Object</code></td></tr><tr><td style="text-align:left;"><code>metadata.expose</code></td><td style="text-align:left;">{ <code>contentEncodingRequest?</code>: <code>string</code> ; <code>contentEncodingResponse?</code>: <code>string</code> ; <code>contentTypeRequest?</code>: <code>string</code> ; <code>contentTypeResponse?</code>: <code>string</code> ; <code>deprecated?</code>: <code>boolean</code> ; <code>inputPayload?</code>: <code>SchemaObject</code> ; <code>outputPayload?</code>: <code>SchemaObject</code> ; <code>parameter?</code>: <code>SchemaObject</code> } &amp; { <code>http</code>: { <code>method</code>: <code>&quot;GET&quot;</code> | <code>&quot;POST&quot;</code> | <code>&quot;PATCH&quot;</code> | <code>&quot;PUT&quot;</code> | <code>&quot;DELETE&quot;</code> ; <code>openApi?</code>: { <code>additionalStatusCodes?</code>: <code>StatusCode</code>[] ; <code>description</code>: <code>string</code> ; <code>isSecure</code>: <code>boolean</code> ; <code>operationId?</code>: <code>string</code> ; <code>query?</code>: <code>QueryParameter</code>&lt;{}&gt;[] ; <code>summary</code>: <code>string</code> ; <code>tags?</code>: <code>string</code>[] } ; <code>path</code>: <code>string</code> } }</td></tr><tr><td style="text-align:left;"><code>eventBridgeConfig</code></td><td style="text-align:left;"><code>DefinitionEventBridgeConfig</code></td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-8" tabindex="-1"><a class="header-anchor" href="#implementation-of-8" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerCommand</p><h4 id="defined-in-21" tabindex="-1"><a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a> Defined in</h4>',36),fe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L257",target:"_blank",rel:"noopener noreferrer"},me=o('<hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>▸ <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>subscription</code></td><td style="text-align:left;"><code>Subscription</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: <code>EBMessage</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-9" tabindex="-1"><a class="header-anchor" href="#implementation-of-9" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerSubscription</p><h4 id="defined-in-22" tabindex="-1"><a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a> Defined in</h4>',10),be={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L311",target:"_blank",rel:"noopener noreferrer"},ve=o('<hr><h3 id="removealllisteners" tabindex="-1"><a class="header-anchor" href="#removealllisteners" aria-hidden="true">#</a> removeAllListeners</h3><p>▸ <strong>removeAllListeners</strong>(): <code>void</code></p><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-10" tabindex="-1"><a class="header-anchor" href="#inherited-from-10" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.removeAllListeners</p><h4 id="defined-in-23" tabindex="-1"><a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:14</p><hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>▸ <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-10" tabindex="-1"><a class="header-anchor" href="#implementation-of-10" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.start</p><h4 id="overrides-2" tabindex="-1"><a class="header-anchor" href="#overrides-2" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass.start</p><h4 id="defined-in-24" tabindex="-1"><a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a> Defined in</h4>',19),_e={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L87",target:"_blank",rel:"noopener noreferrer"},ye=o('<hr><h3 id="startactivespan" tabindex="-1"><a class="header-anchor" href="#startactivespan" aria-hidden="true">#</a> startActiveSpan</h3><p>▸ <strong>startActiveSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start a child span for opentelemetry tracking</p><h4 id="type-parameters-7" tabindex="-1"><a class="header-anchor" href="#type-parameters-7" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>context</code></td><td style="text-align:left;"><code>undefined</code> | <code>Context</code></td><td style="text-align:left;">optional context</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function to be executed within the span</td></tr></tbody></table><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-11" tabindex="-1"><a class="header-anchor" href="#inherited-from-11" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.startActiveSpan</p><h4 id="defined-in-25" tabindex="-1"><a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:32</p><hr><h3 id="unregistercommand" tabindex="-1"><a class="header-anchor" href="#unregistercommand" aria-hidden="true">#</a> unregisterCommand</h3><p>▸ <strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-11" tabindex="-1"><a class="header-anchor" href="#implementation-of-11" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterCommand</p><h4 id="defined-in-26" tabindex="-1"><a class="header-anchor" href="#defined-in-26" aria-hidden="true">#</a> Defined in</h4>',25),xe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L307",target:"_blank",rel:"noopener noreferrer"},Ee=o('<hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>▸ <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-12" tabindex="-1"><a class="header-anchor" href="#implementation-of-12" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterSubscription</p><h4 id="defined-in-27" tabindex="-1"><a class="header-anchor" href="#defined-in-27" aria-hidden="true">#</a> Defined in</h4>',10),Be={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts#L332",target:"_blank",rel:"noopener noreferrer"},He=o('<hr><h3 id="wrapinspan" tabindex="-1"><a class="header-anchor" href="#wrapinspan" aria-hidden="true">#</a> wrapInSpan</h3><p>▸ <strong>wrapInSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context?</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start span for opentelemetry tracking on same level. The created span will not become the &quot;active&quot; span within opentelemetry!</p><p>This means during logging and similar the spanId of parent span is logged.</p><p>Use wrapInSpan for marking points in flow of one bigger function, but not to trace the program flow itself</p><h4 id="type-parameters-8" tabindex="-1"><a class="header-anchor" href="#type-parameters-8" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function te be executed in the span</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>Context</code></td><td style="text-align:left;">span context</td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-12" tabindex="-1"><a class="header-anchor" href="#inherited-from-12" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.wrapInSpan</p><h4 id="defined-in-28" tabindex="-1"><a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:48</p>',17);function Te(Ce,Ie){const r=i("RouterLink"),n=i("ExternalLinkIcon");return c(),h("div",null,[e("p",null,[d(r,{to:"/api/"},{default:a(()=>[t("PURISTA API")]),_:1}),t(" / "),d(r,{to:"/api/modules.html"},{default:a(()=>[t("Modules")]),_:1}),t(" / "),d(r,{to:"/api/modules/purista_base_http_bridge.html"},{default:a(()=>[t("@purista/base-http-bridge")]),_:1}),t(" / HttpEventBridge")]),p,e("p",null,[d(r,{to:"/api/modules/purista_base_http_bridge.html"},{default:a(()=>[t("@purista/base-http-bridge")]),_:1}),t(".HttpEventBridge")]),g,u,f,m,b,v,e("table",null,[_,e("tbody",null,[e("tr",null,[y,e("td",x,[t("extends "),d(r,{to:"/api/modules/purista_base_http_bridge.html#httpeventbridgeconfig"},{default:a(()=>[E]),_:1})])])])]),B,e("ul",null,[e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#constructor"},{default:a(()=>[t("constructor")]),_:1})])]),H,e("ul",null,[e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#app"},{default:a(()=>[t("app")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#client"},{default:a(()=>[t("client")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#config"},{default:a(()=>[t("config")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#defaultcommandtimeout"},{default:a(()=>[t("defaultCommandTimeout")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#instanceid"},{default:a(()=>[t("instanceId")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#isshuttingdown"},{default:a(()=>[t("isShuttingDown")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#isstarted"},{default:a(()=>[t("isStarted")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#logger"},{default:a(()=>[t("logger")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#name"},{default:a(()=>[t("name")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#server"},{default:a(()=>[t("server")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#traceprovider"},{default:a(()=>[t("traceProvider")]),_:1})])]),T,e("ul",null,[e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#destroy"},{default:a(()=>[t("destroy")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#emit"},{default:a(()=>[t("emit")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#emitmessage"},{default:a(()=>[t("emitMessage")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#gettracer"},{default:a(()=>[t("getTracer")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#invoke"},{default:a(()=>[t("invoke")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#ishealthy"},{default:a(()=>[t("isHealthy")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#isready"},{default:a(()=>[t("isReady")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#off"},{default:a(()=>[t("off")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#on"},{default:a(()=>[t("on")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#registercommand"},{default:a(()=>[t("registerCommand")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#registersubscription"},{default:a(()=>[t("registerSubscription")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#removealllisteners"},{default:a(()=>[t("removeAllListeners")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#start"},{default:a(()=>[t("start")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#startactivespan"},{default:a(()=>[t("startActiveSpan")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#unregistercommand"},{default:a(()=>[t("unregisterCommand")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#unregistersubscription"},{default:a(()=>[t("unregisterSubscription")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html#wrapinspan"},{default:a(()=>[t("wrapInSpan")]),_:1})])]),C,e("table",null,[I,e("tbody",null,[e("tr",null,[k,e("td",w,[t("extends "),d(r,{to:"/api/modules/purista_base_http_bridge.html#httpeventbridgeconfig"},{default:a(()=>[P]),_:1})])])])]),S,e("table",null,[N,e("tbody",null,[q,e("tr",null,[R,e("td",D,[d(r,{to:"/api/interfaces/purista_base_http_bridge.HttpEventBridgeClient.html"},{default:a(()=>[L]),_:1})])])])]),K,M,A,e("p",null,[e("a",O,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:73"),d(n)])]),V,e("p",null,[e("a",F,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:67"),d(n)])]),j,G,e("p",null,[t("• "),U,t(": "),d(r,{to:"/api/interfaces/purista_base_http_bridge.HttpEventBridgeClient.html"},{default:a(()=>[Q]),_:1})]),z,e("p",null,[e("a",J,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:71"),d(n)])]),W,e("p",null,[e("a",X,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:68"),d(n)])]),Y,Z,$,ee,e("p",null,[e("a",te,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:69"),d(n)])]),de,e("p",null,[e("a",re,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:66"),d(n)])]),ae,e("p",null,[e("a",ne,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:350"),d(n)])]),oe,e("p",null,[e("a",ie,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:143"),d(n)])]),se,e("p",null,[e("a",ce,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:203"),d(n)])]),he,e("p",null,[e("a",le,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:340"),d(n)])]),pe,e("p",null,[e("a",ge,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:336"),d(n)])]),ue,e("p",null,[e("a",fe,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:257"),d(n)])]),me,e("p",null,[e("a",be,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:311"),d(n)])]),ve,e("p",null,[e("a",_e,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:87"),d(n)])]),ye,e("p",null,[e("a",xe,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:307"),d(n)])]),Ee,e("p",null,[e("a",Be,[t("base-http-bridge/src/HttpEventBridge/HttpEventBridge.impl.ts:332"),d(n)])]),He])}const Pe=s(l,[["render",Te],["__file","purista_base_http_bridge.HttpEventBridge.html.vue"]]);export{Pe as default};
