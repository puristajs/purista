import{_ as o,c as t,o as r,ag as a}from"./chunks/framework.U_AETC1W.js";const u=JSON.parse('{"title":"Type Alias: ServiceBuilderTypes<ConfigType, ConfigInputType, Resources, ServiceClassType>","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/ServiceBuilderTypes.md","filePath":"api/@purista/core/type-aliases/ServiceBuilderTypes.md","lastUpdated":1739900666000}'),s={name:"api/@purista/core/type-aliases/ServiceBuilderTypes.md"};function c(p,e,i,l,n,d){return r(),t("div",null,e[0]||(e[0]=[a('<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / ServiceBuilderTypes</p><h1 id="type-alias-servicebuildertypes-configtype-configinputtype-resources-serviceclasstype" tabindex="-1">Type Alias: ServiceBuilderTypes&lt;ConfigType, ConfigInputType, Resources, ServiceClassType&gt; <a class="header-anchor" href="#type-alias-servicebuildertypes-configtype-configinputtype-resources-serviceclasstype" aria-label="Permalink to &quot;Type Alias: ServiceBuilderTypes\\&lt;ConfigType, ConfigInputType, Resources, ServiceClassType\\&gt;&quot;">​</a></h1><blockquote><p><strong>ServiceBuilderTypes</strong>&lt;<code>ConfigType</code>, <code>ConfigInputType</code>, <code>Resources</code>, <code>ServiceClassType</code>&gt;: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/types/ServiceBuilderTypes.ts#L6" target="_blank" rel="noreferrer">packages/core/src/core/types/ServiceBuilderTypes.ts:6</a></p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>ConfigType</strong> <em>extends</em> <code>object</code> = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><p>• <strong>ConfigInputType</strong> <em>extends</em> <code>object</code> = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><p>• <strong>Resources</strong> <em>extends</em> <code>object</code> = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><p>• <strong>ServiceClassType</strong> <em>extends</em> <a href="./../interfaces/ServiceClass.html"><code>ServiceClass</code></a>&lt;<a href="./ServiceClassTypes.html"><code>ServiceClassTypes</code></a>&lt;<code>ConfigType</code>, <code>Resources</code>&gt;&gt; = <a href="./../classes/Service.html"><code>Service</code></a>&lt;<a href="./ServiceClassTypes.html"><code>ServiceClassTypes</code></a>&lt;<code>ConfigType</code>, <code>Resources</code>&gt;&gt;</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="configinputtype" tabindex="-1">ConfigInputType <a class="header-anchor" href="#configinputtype" aria-label="Permalink to &quot;ConfigInputType&quot;">​</a></h3><blockquote><p><strong>ConfigInputType</strong>: <code>ConfigInputType</code></p></blockquote><h3 id="configtype" tabindex="-1">ConfigType <a class="header-anchor" href="#configtype" aria-label="Permalink to &quot;ConfigType&quot;">​</a></h3><blockquote><p><strong>ConfigType</strong>: <code>ConfigType</code></p></blockquote><h3 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h3><blockquote><p><strong>Resources</strong>: <code>Resources</code></p></blockquote><h3 id="serviceclasstype" tabindex="-1">ServiceClassType <a class="header-anchor" href="#serviceclasstype" aria-label="Permalink to &quot;ServiceClassType&quot;">​</a></h3><blockquote><p><strong>ServiceClassType</strong>: <code>ServiceClassType</code></p></blockquote>',20)]))}const g=o(s,[["render",c]]);export{u as __pageData,g as default};
