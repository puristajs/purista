import{_ as t,c as s,o,ag as r}from"./chunks/framework.U_AETC1W.js";const p=JSON.parse('{"title":"Stores","description":"Config stores, state stores and secret stores in PURISTA typescript framwork","frontmatter":{"title":"Stores","description":"Config stores, state stores and secret stores in PURISTA typescript framwork","order":206000},"headers":[],"relativePath":"handbook/2_building_business-logic/stores/index.md","filePath":"handbook/2_building_business-logic/stores/index.md","lastUpdated":1708207057000}'),a={name:"handbook/2_building_business-logic/stores/index.md"};function i(n,e,d,c,h,l){return o(),s("div",null,e[0]||(e[0]=[r('<h1 id="stores" tabindex="-1">Stores <a class="header-anchor" href="#stores" aria-label="Permalink to &quot;Stores&quot;">​</a></h1><p>Stores in PURISTA are an abstraction layer.<br> They provide a unified interface for handling configurations, secrets and states, without the need to know the actual implementation or used product. This ensures, that the actual business implementation is decoupled and isolated.</p><p>When considering separation of concerns, PURISTA offers three types of stores. While they share similar APIs, each store type is tailored to address specific use cases.</p><h2 id="config-store" tabindex="-1">Config store <a class="header-anchor" href="#config-store" aria-label="Permalink to &quot;Config store&quot;">​</a></h2><p>The config store serves as a repository for storing and retrieving technical configurations. For instance, you might store the URL of a third-party provider here, allowing commands or subscriptions to access this information when needed, such as in the <a href="./../fetch_based_http_client.html">HttpClient</a>.</p><h2 id="secret-store" tabindex="-1">Secret store <a class="header-anchor" href="#secret-store" aria-label="Permalink to &quot;Secret store&quot;">​</a></h2><p>The secret store is designed to safeguard confidential and private data. For instance, if your HTTP request to a third-party provider requires API keys for authentication and authorization, it&#39;s essential to store your personal API key securely in the secret store.</p><h2 id="state-store" tabindex="-1">State store <a class="header-anchor" href="#state-store" aria-label="Permalink to &quot;State store&quot;">​</a></h2><p>State stores are tasked with managing the business states of your application. In PURISTA, commands and subscriptions are designed to be stateless, operating within a distributed system. If, for example, you require user sessions, you would utilize the state store to store session information.</p>',9)]))}const f=t(a,[["render",i]]);export{p as __pageData,f as default};
