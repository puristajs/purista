import{_ as i,c as e,o as s,ag as t}from"./chunks/framework.U_AETC1W.js";const g=JSON.parse('{"title":"@purista/amqpbridge","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/amqpbridge/globals.md","filePath":"api/@purista/amqpbridge/globals.md","lastUpdated":1739900666000}'),r={name:"api/@purista/amqpbridge/globals.md"};function l(n,a,p,h,d,o){return s(),e("div",null,a[0]||(a[0]=[t(`<p><a href="./README.html"><strong>@purista/amqpbridge v1.11.0</strong></a></p><hr><p><a href="./../../packages.html">PURISTA API</a> / @purista/amqpbridge</p><h1 id="purista-amqpbridge" tabindex="-1">@purista/amqpbridge <a class="header-anchor" href="#purista-amqpbridge" aria-label="Permalink to &quot;@purista/amqpbridge&quot;">​</a></h1><p>Package for using a AMQP broker like rabbitMQ as event bridge.</p><p>Example usage:</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AmqpBridge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@purista/amqpbridge&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create and init our eventbridge</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventBridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AmqpBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><ul><li><a href="./type-aliases/AmqpBridgeConfig.html">AmqpBridgeConfig</a></li><li><a href="./type-aliases/Encoder.html">Encoder</a></li><li><a href="./type-aliases/EncoderFunctions.html">EncoderFunctions</a></li><li><a href="./type-aliases/Encrypter.html">Encrypter</a></li><li><a href="./type-aliases/EncryptFunctions.html">EncryptFunctions</a></li></ul><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><ul><li><a href="./variables/puristaVersion.html">puristaVersion</a></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><ul><li><a href="./functions/deserializeOtpFromAmqpHeader.html">deserializeOtpFromAmqpHeader</a></li><li><a href="./functions/getDefaultConfig.html">getDefaultConfig</a></li><li><a href="./functions/serializeOtpForAmqpHeader.html">serializeOtpForAmqpHeader</a></li></ul><h2 id="event-bridge" tabindex="-1">Event bridge <a class="header-anchor" href="#event-bridge" aria-label="Permalink to &quot;Event bridge&quot;">​</a></h2><ul><li><a href="./classes/AmqpBridge.html">AmqpBridge</a></li></ul>`,16)]))}const k=i(r,[["render",l]]);export{g as __pageData,k as default};
