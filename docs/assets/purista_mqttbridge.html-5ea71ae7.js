import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as l,b as e,e as d,w as s,d as t,a as n}from"./app-2c9217f0.js";const h={},u=n(`<h1 id="module-purista-mqttbridge" tabindex="-1"><a class="header-anchor" href="#module-purista-mqttbridge" aria-hidden="true">#</a> Module: @purista/mqttbridge</h1><p>Package for using a MQTT broker like rabbitMQ as event bridge.</p><p>Example usage:</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MqttBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/mqttbridge&#39;</span>

<span class="token comment">// create and init our eventbridge</span>
<span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3>`,7),g=e("h3",{id:"type-aliases",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-aliases","aria-hidden":"true"},"#"),t(" Type Aliases")],-1),p=e("h3",{id:"functions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),t(" Functions")],-1),m=n('<h2 id="type-aliases-1" tabindex="-1"><a class="header-anchor" href="#type-aliases-1" aria-hidden="true">#</a> Type Aliases</h2><h3 id="isubscriptionresponse" tabindex="-1"><a class="header-anchor" href="#isubscriptionresponse" aria-hidden="true">#</a> ISubscriptionResponse</h3><p>Ƭ <strong>ISubscriptionResponse</strong>: <code>Prettify</code>&lt;<code>ISubscriptionGrant</code> &amp; { <code>properties?</code>: { <code>subscriptionIdentifier?</code>: <code>number</code> } }&gt;</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4>',4),f={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/AsyncClient/AsyncClient.ts#L12",target:"_blank",rel:"noopener noreferrer"},_=e("hr",null,null,-1),b=e("h3",{id:"incomingmessagefunction",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#incomingmessagefunction","aria-hidden":"true"},"#"),t(" IncomingMessageFunction")],-1),y=e("strong",null,"IncomingMessageFunction",-1),x=e("code",null,"this",-1),q=e("code",null,"MqttBridge",-1),k=e("code",null,"payload",-1),T=e("code",null,"EBMessage",-1),M=e("code",null,"packet",-1),v=e("code",null,"IPublishPacket",-1),B=e("code",null,"Promise",-1),I=e("code",null,"void",-1),C=n('<h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><p>▸ (<code>this</code>, <code>payload</code>, <code>packet</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h5>',3),S=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),w=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),P={style:{"text-align":"left"}},D=e("code",null,"MqttBridge",-1),E=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessage")])],-1),R=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"packet")]),e("td",{style:{"text-align":"left"}},[e("code",null,"IPublishPacket")])],-1),N=e("h5",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),A=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),L=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),F={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/types/IncomingMessageFunction.ts#L6",target:"_blank",rel:"noopener noreferrer"},Q=n('<hr><h3 id="mqttbridgeconfig" tabindex="-1"><a class="header-anchor" href="#mqttbridgeconfig" aria-hidden="true">#</a> MqttBridgeConfig</h3><p>Ƭ <strong>MqttBridgeConfig</strong>: <code>Prettify</code>&lt;{ <code>allowRetries?</code>: <code>boolean</code> ; <code>commandResponsePublishTwice</code>: <code>&quot;always&quot;</code> | <code>&quot;eventOnly&quot;</code> | <code>&quot;eventAndError&quot;</code> | <code>&quot;never&quot;</code> ; <code>defaultMessageExpiryInterval</code>: <code>number</code> ; <code>defaultSessionExpiryInterval</code>: <code>number</code> ; <code>emptyTopicPartString</code>: <code>string</code> ; <code>qoSSubscription</code>: <code>QoS</code> ; <code>qosCommand</code>: <code>QoS</code> ; <code>shareTopicName</code>: <code>string</code> ; <code>shareTopicPrefix</code>: <code>string</code> ; <code>topicPrefix</code>: <code>string</code> } &amp; <code>IClientOptions</code>&gt;</p><p>the configuration for the MQTT event bridge</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4>',5),H={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/types/MqttBridgeConfig.ts#L7",target:"_blank",rel:"noopener noreferrer"},O=e("h2",{id:"functions-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions-1","aria-hidden":"true"},"#"),t(" Functions")],-1),V=e("h3",{id:"getcommandhandler",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getcommandhandler","aria-hidden":"true"},"#"),t(" getCommandHandler")],-1),j=e("strong",null,"getCommandHandler",-1),G=e("code",null,"address",-1),U=e("code",null,"cb",-1),$=e("code",null,"_metadata",-1),z=e("code",null,"_eventBridgeConfig",-1),J=e("code",null,"IncomingMessageFunction",-1),K=n('<h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> } | { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt;</td></tr><tr><td style="text-align:left;"><code>_metadata</code></td><td style="text-align:left;"><code>CommandDefinitionMetadataBase</code></td></tr><tr><td style="text-align:left;"><code>_eventBridgeConfig</code></td><td style="text-align:left;"><code>DefinitionEventBridgeConfig</code></td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4>',3),W=e("code",null,"IncomingMessageFunction",-1),X=e("h4",{id:"defined-in-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-3","aria-hidden":"true"},"#"),t(" Defined in")],-1),Y={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/handler/getCommandHandler.impl.ts#L27",target:"_blank",rel:"noopener noreferrer"},Z=n('<hr><h3 id="getcommandresponsetopic" tabindex="-1"><a class="header-anchor" href="#getcommandresponsetopic" aria-hidden="true">#</a> getCommandResponseTopic</h3><p>▸ <strong>getCommandResponseTopic</strong>(<code>this</code>, <code>instanceId?</code>): <code>string</code></p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',4),ee=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),te=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),de={style:{"text-align":"left"}},oe=e("code",null,"MqttBridge",-1),se=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"instanceId?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),ne=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2","aria-hidden":"true"},"#"),t(" Returns")],-1),ae=e("p",null,[e("code",null,"string")],-1),ie=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),ce={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getCommandResponseTopic.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},re=n('<hr><h3 id="getcommandsubscriptiontopic" tabindex="-1"><a class="header-anchor" href="#getcommandsubscriptiontopic" aria-hidden="true">#</a> getCommandSubscriptionTopic</h3><p>▸ <strong>getCommandSubscriptionTopic</strong>(<code>this</code>, <code>address</code>): <code>string</code></p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4>',4),le=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),he=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),ue={style:{"text-align":"left"}},ge=e("code",null,"MqttBridge",-1),pe=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"address")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessageAddress")])],-1),me=e("h4",{id:"returns-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-3","aria-hidden":"true"},"#"),t(" Returns")],-1),fe=e("p",null,[e("code",null,"string")],-1),_e=e("h4",{id:"defined-in-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-5","aria-hidden":"true"},"#"),t(" Defined in")],-1),be={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getCommandSubscriptionTopic.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},ye=n('<hr><h3 id="getdefaultmqttbridgeconfig" tabindex="-1"><a class="header-anchor" href="#getdefaultmqttbridgeconfig" aria-hidden="true">#</a> getDefaultMqttBridgeConfig</h3><p>▸ <strong>getDefaultMqttBridgeConfig</strong>(): <code>Object</code></p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>allowRetries?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">allow retry of the initial connect</td></tr><tr><td style="text-align:left;"><code>commandResponsePublishTwice</code></td><td style="text-align:left;"><code>&quot;always&quot;</code> | <code>&quot;never&quot;</code> | <code>&quot;eventOnly&quot;</code> | <code>&quot;eventAndError&quot;</code></td><td style="text-align:left;">Indicates if a command response should be published a second time. If the command response gets published, it will be published to the regular topic pattern. The QOS and expiry will be set to subscription configuration values. If set to <code>never</code>, subscription might not get messages they are expecting because of the timing. If set to <code>always</code>, every command response is published. Because there might not be a consumer for every message, the broker will store the messages until the <code>defaultMessageExpiryInterval</code> is reached. This might result in a high ressource consumption of the broker. If set to <code>eventOnly</code>, only success responses which have a event name set, are published twice. There, we expect, that an event has at least one consumer subscription and the broker does not unnecessarily stores messages for a long time. <strong><code>Default</code></strong> <code>ts eventOnly </code></td></tr><tr><td style="text-align:left;"><code>defaultMessageExpiryInterval</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">the message expiry interval in seconds <strong><code>Default</code></strong> <code>ts </code></td></tr><tr><td style="text-align:left;"><code>defaultSessionExpiryInterval</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;"><strong><code>Default</code></strong> <code>ts 0 </code></td></tr><tr><td style="text-align:left;"><code>emptyTopicPartString</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The string which should be used in topics for parts, which are undefined <strong><code>Default</code></strong> <code>ts __none__ </code></td></tr><tr><td style="text-align:left;"><code>qoSSubscription</code></td><td style="text-align:left;"><code>QoS</code></td><td style="text-align:left;">QOS for all subscriptions <strong><code>Default</code></strong> <code>ts 1 </code></td></tr><tr><td style="text-align:left;"><code>qosCommand</code></td><td style="text-align:left;"><code>QoS</code></td><td style="text-align:left;">QOS for command, command responses and command response subscriptions messages <strong><code>Default</code></strong> <code>ts 1 </code></td></tr><tr><td style="text-align:left;"><code>shareTopicName</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the name of the shared topic (similar to pubsub name) <strong><code>Default</code></strong> <code>ts purista </code></td></tr><tr><td style="text-align:left;"><code>shareTopicPrefix</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix to be used to dynamically create topic names for shared subscriptions <strong><code>Default</code></strong> <code>ts $share </code></td></tr><tr><td style="text-align:left;"><code>topicPrefix</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix for topic to prevent name collisions <strong><code>Default</code></strong> <code>ts purista </code></td></tr></tbody></table><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4>',7),xe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/getDefaultMqttBridgeConfig.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"},qe=n('<hr><h3 id="getsharedtopicname" tabindex="-1"><a class="header-anchor" href="#getsharedtopicname" aria-hidden="true">#</a> getSharedTopicName</h3><p>▸ <strong>getSharedTopicName</strong>(<code>this</code>, <code>topic</code>): <code>string</code></p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',4),ke=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Te=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),Me={style:{"text-align":"left"}},ve=e("code",null,"MqttBridge",-1),Be=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"topic")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),Ie=e("h4",{id:"returns-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-5","aria-hidden":"true"},"#"),t(" Returns")],-1),Ce=e("p",null,[e("code",null,"string")],-1),Se=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),we={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getSharedTopicName.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"},Pe=e("hr",null,null,-1),De=e("h3",{id:"getsubscriptionhandler",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getsubscriptionhandler","aria-hidden":"true"},"#"),t(" getSubscriptionHandler")],-1),Ee=e("strong",null,"getSubscriptionHandler",-1),Re=e("code",null,"_subscription",-1),Ne=e("code",null,"cb",-1),Ae=e("code",null,"IncomingMessageFunction",-1),Le=n('<h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>_subscription</code></td><td style="text-align:left;"><code>Subscription</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: <code>EBMessage</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>instanceId</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: <code>EBMessageAddress</code> ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;instanceId&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4>',3),Fe=e("code",null,"IncomingMessageFunction",-1),Qe=e("h4",{id:"defined-in-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-8","aria-hidden":"true"},"#"),t(" Defined in")],-1),He={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/handler/getSubscriptionHandler.impl.ts#L20",target:"_blank",rel:"noopener noreferrer"},Oe=n('<hr><h3 id="getsubscriptiontopic" tabindex="-1"><a class="header-anchor" href="#getsubscriptiontopic" aria-hidden="true">#</a> getSubscriptionTopic</h3><p>▸ <strong>getSubscriptionTopic</strong>(<code>this</code>, <code>subscription</code>): <code>string</code></p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4>',4),Ve=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),je=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),Ge={style:{"text-align":"left"}},Ue=e("code",null,"MqttBridge",-1),$e=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"subscription")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Subscription")])],-1),ze=e("h4",{id:"returns-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-7","aria-hidden":"true"},"#"),t(" Returns")],-1),Je=e("p",null,[e("code",null,"string")],-1),Ke=e("h4",{id:"defined-in-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-9","aria-hidden":"true"},"#"),t(" Defined in")],-1),We={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getSubscriptionTopic.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},Xe=n('<hr><h3 id="gettopicname" tabindex="-1"><a class="header-anchor" href="#gettopicname" aria-hidden="true">#</a> getTopicName</h3><p>▸ <strong>getTopicName</strong>(<code>this</code>, <code>message</code>): <code>string</code></p><p>Calculates the MQTT topic name for a message which should be sent. Something like: purista/message_type/instance_id/sender_name/sender_version/sender_target/eventname/receiver_name/receiver_version/receiver_target</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4>',5),Ye=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Ze=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),et={style:{"text-align":"left"}},tt=e("code",null,"MqttBridge",-1),dt=e("td",{style:{"text-align":"left"}},"-",-1),ot=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"message")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessage")]),e("td",{style:{"text-align":"left"}},"the message to send")],-1),st=e("h4",{id:"returns-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-8","aria-hidden":"true"},"#"),t(" Returns")],-1),nt=e("p",null,[e("code",null,"string")],-1),at=e("p",null,"the MQTT topic",-1),it=e("h4",{id:"defined-in-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-10","aria-hidden":"true"},"#"),t(" Defined in")],-1),ct={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getTopicName.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},rt=n('<hr><h3 id="handlecommandresponse" tabindex="-1"><a class="header-anchor" href="#handlecommandresponse" aria-hidden="true">#</a> handleCommandResponse</h3><p>▸ <strong>handleCommandResponse</strong>(<code>this</code>, <code>payload</code>, <code>packet</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4>',4),lt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),ht=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),ut={style:{"text-align":"left"}},gt=e("code",null,"MqttBridge",-1),pt=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessage")])],-1),mt=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"packet")]),e("td",{style:{"text-align":"left"}},[e("code",null,"IPublishPacket")])],-1),ft=e("h4",{id:"returns-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),t(" Returns")],-1),_t=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),bt=e("h4",{id:"defined-in-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-11","aria-hidden":"true"},"#"),t(" Defined in")],-1),yt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/types/IncomingMessageFunction.ts#L6",target:"_blank",rel:"noopener noreferrer"},xt=n('<hr><h3 id="ismatchingtopic" tabindex="-1"><a class="header-anchor" href="#ismatchingtopic" aria-hidden="true">#</a> isMatchingTopic</h3><p>▸ <strong>isMatchingTopic</strong>(<code>input</code>, <code>pattern</code>): <code>boolean</code></p><p>Checks if a given topic is matching against a subscription pattern</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the real full topic</td></tr><tr><td style="text-align:left;"><code>pattern</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the topic subscription pattern</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>boolean</code></p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4>',9),qt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/isMatchingTopic.impl.ts#L8",target:"_blank",rel:"noopener noreferrer"},kt=n('<hr><h3 id="mstosec" tabindex="-1"><a class="header-anchor" href="#mstosec" aria-hidden="true">#</a> msToSec</h3><p>▸ <strong>msToSec</strong>(<code>ms</code>): <code>number</code></p><p>Convert milliseconds into seconds and round decimal to integer if needed.</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ms</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Value in millisconads</td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>rounded value in seconds</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4>',10),Tt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/msToSec.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"};function Mt(vt,Bt){const o=i("RouterLink"),a=i("ExternalLinkIcon");return r(),l("div",null,[e("p",null,[d(o,{to:"/api/"},{default:s(()=>[t("PURISTA API")]),_:1}),t(" / "),d(o,{to:"/api/modules.html"},{default:s(()=>[t("Modules")]),_:1}),t(" / @purista/mqttbridge")]),u,e("ul",null,[e("li",null,[d(o,{to:"/api/classes/purista_mqttbridge.AsyncClient.html"},{default:s(()=>[t("AsyncClient")]),_:1})]),e("li",null,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[t("MqttBridge")]),_:1})]),e("li",null,[d(o,{to:"/api/classes/purista_mqttbridge.TopicRouter.html"},{default:s(()=>[t("TopicRouter")]),_:1})])]),g,e("ul",null,[e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#isubscriptionresponse"},{default:s(()=>[t("ISubscriptionResponse")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:s(()=>[t("IncomingMessageFunction")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#mqttbridgeconfig"},{default:s(()=>[t("MqttBridgeConfig")]),_:1})])]),p,e("ul",null,[e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getcommandhandler"},{default:s(()=>[t("getCommandHandler")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getcommandresponsetopic"},{default:s(()=>[t("getCommandResponseTopic")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getcommandsubscriptiontopic"},{default:s(()=>[t("getCommandSubscriptionTopic")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getdefaultmqttbridgeconfig"},{default:s(()=>[t("getDefaultMqttBridgeConfig")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getsharedtopicname"},{default:s(()=>[t("getSharedTopicName")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getsubscriptionhandler"},{default:s(()=>[t("getSubscriptionHandler")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#getsubscriptiontopic"},{default:s(()=>[t("getSubscriptionTopic")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#gettopicname"},{default:s(()=>[t("getTopicName")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#handlecommandresponse"},{default:s(()=>[t("handleCommandResponse")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#ismatchingtopic"},{default:s(()=>[t("isMatchingTopic")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#mstosec"},{default:s(()=>[t("msToSec")]),_:1})])]),m,e("p",null,[e("a",f,[t("packages/mqttbridge/src/AsyncClient/AsyncClient.ts:12"),d(a)])]),_,b,e("p",null,[t("Ƭ "),y,t(": ("),x,t(": "),d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[q]),_:1}),t(", "),k,t(": "),T,t(", "),M,t(": "),v,t(") => "),B,t("<"),I,t(">")]),C,e("table",null,[S,e("tbody",null,[e("tr",null,[w,e("td",P,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[D]),_:1})])]),E,R])]),N,A,L,e("p",null,[e("a",F,[t("packages/mqttbridge/src/types/IncomingMessageFunction.ts:6"),d(a)])]),Q,e("p",null,[e("a",H,[t("packages/mqttbridge/src/types/MqttBridgeConfig.ts:7"),d(a)])]),O,V,e("p",null,[t("▸ "),j,t("("),G,t(", "),U,t(", "),$,t(", "),z,t("): "),d(o,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:s(()=>[J]),_:1})]),K,e("p",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:s(()=>[W]),_:1})]),X,e("p",null,[e("a",Y,[t("packages/mqttbridge/src/handler/getCommandHandler.impl.ts:27"),d(a)])]),Z,e("table",null,[ee,e("tbody",null,[e("tr",null,[te,e("td",de,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[oe]),_:1})])]),se])]),ne,ae,ie,e("p",null,[e("a",ce,[t("packages/mqttbridge/src/topic/getCommandResponseTopic.impl.ts:7"),d(a)])]),re,e("table",null,[le,e("tbody",null,[e("tr",null,[he,e("td",ue,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[ge]),_:1})])]),pe])]),me,fe,_e,e("p",null,[e("a",be,[t("packages/mqttbridge/src/topic/getCommandSubscriptionTopic.impl.ts:7"),d(a)])]),ye,e("p",null,[e("a",xe,[t("packages/mqttbridge/src/getDefaultMqttBridgeConfig.impl.ts:5"),d(a)])]),qe,e("table",null,[ke,e("tbody",null,[e("tr",null,[Te,e("td",Me,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[ve]),_:1})])]),Be])]),Ie,Ce,Se,e("p",null,[e("a",we,[t("packages/mqttbridge/src/topic/getSharedTopicName.impl.ts:5"),d(a)])]),Pe,De,e("p",null,[t("▸ "),Ee,t("("),Re,t(", "),Ne,t("): "),d(o,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:s(()=>[Ae]),_:1})]),Le,e("p",null,[d(o,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:s(()=>[Fe]),_:1})]),Qe,e("p",null,[e("a",He,[t("packages/mqttbridge/src/handler/getSubscriptionHandler.impl.ts:20"),d(a)])]),Oe,e("table",null,[Ve,e("tbody",null,[e("tr",null,[je,e("td",Ge,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[Ue]),_:1})])]),$e])]),ze,Je,Ke,e("p",null,[e("a",We,[t("packages/mqttbridge/src/topic/getSubscriptionTopic.impl.ts:7"),d(a)])]),Xe,e("table",null,[Ye,e("tbody",null,[e("tr",null,[Ze,e("td",et,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[tt]),_:1})]),dt]),ot])]),st,nt,at,it,e("p",null,[e("a",ct,[t("packages/mqttbridge/src/topic/getTopicName.impl.ts:7"),d(a)])]),rt,e("table",null,[lt,e("tbody",null,[e("tr",null,[ht,e("td",ut,[d(o,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:s(()=>[gt]),_:1})])]),pt,mt])]),ft,_t,bt,e("p",null,[e("a",yt,[t("packages/mqttbridge/src/types/IncomingMessageFunction.ts:6"),d(a)])]),xt,e("p",null,[e("a",qt,[t("packages/mqttbridge/src/topic/isMatchingTopic.impl.ts:8"),d(a)])]),kt,e("p",null,[e("a",Tt,[t("packages/mqttbridge/src/msToSec.impl.ts:7"),d(a)])])])}const St=c(h,[["render",Mt],["__file","purista_mqttbridge.html.vue"]]);export{St as default};
