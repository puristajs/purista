import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";import{o as l,c,b as e,e as n,w as i,d as t,a as o,r as a}from"./app.0777453f.js";const h={},_=t("PURISTA API - v1.3.1"),u=t(" / "),p=t("@purista/amqpbridge"),g=t(" / RabbitMQEventBridge"),b=e("h1",{id:"class-rabbitmqeventbridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-rabbitmqeventbridge","aria-hidden":"true"},"#"),t(" Class: RabbitMQEventBridge")],-1),m=t("@purista/amqpbridge"),f=t(".RabbitMQEventBridge"),v=e("p",null,"A adapter to use rabbitMQ as event bridge.",-1),x=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),y=e("code",null,"EventBridge",-1),E=e("p",null,[t("\u21B3 "),e("strong",null,[e("code",null,"RabbitMQEventBridge")])],-1),q=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),B=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),R=t("constructor"),M=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),Q=t("channel"),k=t("config"),T=t("connection"),P=t("encoder"),w=t("encrypter"),L=t("log"),N=t("pendingInvocations"),C=t("replyQueueName"),D=t("serviceFunctions"),S=t("subscriptions"),I=e("h3",{id:"accessors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#accessors","aria-hidden":"true"},"#"),t(" Accessors")],-1),K=t("defaultCommandTimeout"),O=t("instanceId"),F=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),A=t("decodeContent"),G=t("emit"),V=t("emitMessage"),j=t("encodeContent"),H=t("invoke"),U=t("off"),z=t("on"),J=t("registerServiceFunction"),W=t("registerSubscription"),X=t("start"),Y=t("unregisterServiceFunction"),Z=t("unregisterSubscription"),$=o('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>\u2022 <strong>new RabbitMQEventBridge</strong>(<code>baseLogger</code>, <code>conf?</code>)</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',4),ee=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),te=e("td",{style:{"text-align":"left"}},[e("code",null,"baseLogger")],-1),ne={style:{"text-align":"left"}},se=e("code",null,"Logger",-1),ie=e("td",{style:{"text-align":"left"}},[e("code",null,"conf")],-1),de={style:{"text-align":"left"}},oe=e("code",null,"RabbitMQEventBridgeConfig",-1),ae=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),re=t("EventBridge"),le=t("."),ce=t("constructor"),he=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),_e={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L73",target:"_blank",rel:"noopener noreferrer"},ue=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:73"),pe=o('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h3><p>\u2022 <code>Protected</code> <code>Optional</code> <strong>channel</strong>: <code>Channel</code></p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4>',4),ge={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L44",target:"_blank",rel:"noopener noreferrer"},be=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:44"),me=e("hr",null,null,-1),fe=e("h3",{id:"config",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#config","aria-hidden":"true"},"#"),t(" config")],-1),ve=t("\u2022 "),xe=e("code",null,"Protected",-1),ye=t(),Ee=e("strong",null,"config",-1),qe=t(": "),Be=e("code",null,"RabbitMQEventBridgeConfig",-1),Re=e("h4",{id:"defined-in-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-2","aria-hidden":"true"},"#"),t(" Defined in")],-1),Me={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L42",target:"_blank",rel:"noopener noreferrer"},Qe=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:42"),ke=o('<hr><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> connection</h3><p>\u2022 <code>Protected</code> <code>Optional</code> <strong>connection</strong>: <code>Connection</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4>',4),Te={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L43",target:"_blank",rel:"noopener noreferrer"},Pe=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:43"),we=e("hr",null,null,-1),Le=e("h3",{id:"encoder",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encoder","aria-hidden":"true"},"#"),t(" encoder")],-1),Ne=t("\u2022 "),Ce=e("code",null,"Protected",-1),De=t(),Se=e("strong",null,"encoder",-1),Ie=t(": "),Ke=e("code",null,"Encoder",-1),Oe=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),Fe={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L65",target:"_blank",rel:"noopener noreferrer"},Ae=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:65"),Ge=e("hr",null,null,-1),Ve=e("h3",{id:"encrypter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encrypter","aria-hidden":"true"},"#"),t(" encrypter")],-1),je=t("\u2022 "),He=e("code",null,"Protected",-1),Ue=t(),ze=e("strong",null,"encrypter",-1),Je=t(": "),We=e("code",null,"Encrypter",-1),Xe=e("h4",{id:"defined-in-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-5","aria-hidden":"true"},"#"),t(" Defined in")],-1),Ye={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L69",target:"_blank",rel:"noopener noreferrer"},Ze=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:69"),$e=e("hr",null,null,-1),et=e("h3",{id:"log",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#log","aria-hidden":"true"},"#"),t(" log")],-1),tt=t("\u2022 "),nt=e("code",null,"Protected",-1),st=t(),it=e("strong",null,"log",-1),dt=t(": "),ot=e("code",null,"Logger",-1),at=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),rt={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L41",target:"_blank",rel:"noopener noreferrer"},lt=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:41"),ct=e("hr",null,null,-1),ht=e("h3",{id:"pendinginvocations",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pendinginvocations","aria-hidden":"true"},"#"),t(" pendingInvocations")],-1),_t=t("\u2022 "),ut=e("code",null,"Protected",-1),pt=t(),gt=e("strong",null,"pendingInvocations",-1),bt=t(": "),mt=e("code",null,"Map",-1),ft=t("<"),vt=e("code",null,"string",-1),xt=t(", "),yt=e("code",null,"PendigInvocation",-1),Et=t(">"),qt=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),Bt={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L55",target:"_blank",rel:"noopener noreferrer"},Rt=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:55"),Mt=o('<hr><h3 id="replyqueuename" tabindex="-1"><a class="header-anchor" href="#replyqueuename" aria-hidden="true">#</a> replyQueueName</h3><p>\u2022 <code>Protected</code> <code>Optional</code> <strong>replyQueueName</strong>: <code>string</code></p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4>',4),Qt={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L46",target:"_blank",rel:"noopener noreferrer"},kt=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:46"),Tt=e("hr",null,null,-1),Pt=e("h3",{id:"servicefunctions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#servicefunctions","aria-hidden":"true"},"#"),t(" serviceFunctions")],-1),wt=t("\u2022 "),Lt=e("code",null,"Protected",-1),Nt=t(),Ct=e("strong",null,"serviceFunctions",-1),Dt=t(": "),St=e("code",null,"Map",-1),It=t("<"),Kt=e("code",null,"string",-1),Ot=t(", { "),Ft=e("code",null,"cb",-1),At=t(": ("),Gt=e("code",null,"message",-1),Vt=t(": "),jt=e("code",null,"Command",-1),Ht=t("<"),Ut=e("code",null,"unknown",-1),zt=t(", "),Jt=e("code",null,"unknown",-1),Wt=t(">) => "),Xt=e("code",null,"Promise",-1),Yt=t("<"),Zt=e("code",null,"CommandErrorResponse",-1),$t=t(" | "),en=e("code",null,"CommandSuccessResponse",-1),tn=t("<"),nn=e("code",null,"unknown",-1),sn=t(">> ; "),dn=e("code",null,"channel",-1),on=t(": "),an=e("code",null,"Channel",-1),rn=t(" }>"),ln=e("h4",{id:"defined-in-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-9","aria-hidden":"true"},"#"),t(" Defined in")],-1),cn={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L47",target:"_blank",rel:"noopener noreferrer"},hn=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:47"),_n=e("hr",null,null,-1),un=e("h3",{id:"subscriptions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#subscriptions","aria-hidden":"true"},"#"),t(" subscriptions")],-1),pn=t("\u2022 "),gn=e("code",null,"Protected",-1),bn=t(),mn=e("strong",null,"subscriptions",-1),fn=t(": "),vn=e("code",null,"Map",-1),xn=t("<"),yn=e("code",null,"string",-1),En=t(", { "),qn=e("code",null,"cb",-1),Bn=t(": ("),Rn=e("code",null,"message",-1),Mn=t(": "),Qn=e("code",null,"Command",-1),kn=t("<"),Tn=e("code",null,"unknown",-1),Pn=t(", "),wn=e("code",null,"unknown",-1),Ln=t(">) => "),Nn=e("code",null,"Promise",-1),Cn=t("<"),Dn=e("code",null,"void",-1),Sn=t("> ; "),In=e("code",null,"channel",-1),Kn=t(": "),On=e("code",null,"Channel",-1),Fn=t(" }>"),An=e("h4",{id:"defined-in-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-10","aria-hidden":"true"},"#"),t(" Defined in")],-1),Gn={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L57",target:"_blank",rel:"noopener noreferrer"},Vn=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:57"),jn=o('<h2 id="accessors-1" tabindex="-1"><a class="header-anchor" href="#accessors-1" aria-hidden="true">#</a> Accessors</h2><h3 id="defaultcommandtimeout" tabindex="-1"><a class="header-anchor" href="#defaultcommandtimeout" aria-hidden="true">#</a> defaultCommandTimeout</h3><p>\u2022 <code>get</code> <strong>defaultCommandTimeout</strong>(): <code>number</code></p><p>Get default time out. It is the maximum time a command should be responded.</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><h4 id="overrides-1" tabindex="-1"><a class="header-anchor" href="#overrides-1" aria-hidden="true">#</a> Overrides</h4><p>EventBridge.defaultCommandTimeout</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4>',9),Hn={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L96",target:"_blank",rel:"noopener noreferrer"},Un=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:96"),zn=o('<hr><h3 id="instanceid" tabindex="-1"><a class="header-anchor" href="#instanceid" aria-hidden="true">#</a> instanceId</h3><p>\u2022 <code>get</code> <strong>instanceId</strong>(): <code>string</code></p><p>Get instance id. The id of current event bridge instance.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4>',7),Jn={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L104",target:"_blank",rel:"noopener noreferrer"},Wn=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:104"),Xn=o('<h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="decodecontent" tabindex="-1"><a class="header-anchor" href="#decodecontent" aria-hidden="true">#</a> decodeContent</h3><p>\u25B8 <code>Protected</code> <strong>decodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Decode buffer into given type</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Buffer</code></td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4>',11),Yn={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L549",target:"_blank",rel:"noopener noreferrer"},Zn=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:549"),$n=o('<hr><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><p>\u25B8 <strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>params</code>): <code>void</code></p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4>',4),es=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),ts=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),ns={style:{"text-align":"left"}},ss=t("extends "),is=e("code",null,"EventKey",-1),ds=t("<"),os=e("code",null,"EventBridgeEvents",-1),as=t(">"),rs=e("h4",{id:"parameters-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-2","aria-hidden":"true"},"#"),t(" Parameters")],-1),ls=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),cs=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"eventName")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),hs=e("td",{style:{"text-align":"left"}},[e("code",null,"params")],-1),_s={style:{"text-align":"left"}},us=e("code",null,"EventBridgeEvents",-1),ps=t("["),gs=e("code",null,"K",-1),bs=t("]"),ms=e("h4",{id:"returns-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-3","aria-hidden":"true"},"#"),t(" Returns")],-1),fs=e("p",null,[e("code",null,"void")],-1),vs=e("h4",{id:"inherited-from",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from","aria-hidden":"true"},"#"),t(" Inherited from")],-1),xs=t("EventBridge"),ys=t("."),Es=t("emit"),qs=e("h4",{id:"defined-in-14",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-14","aria-hidden":"true"},"#"),t(" Defined in")],-1),Bs=e("p",null,"core/lib/types/core/types/GenericEventEmitter.d.ts:13",-1),Rs=e("hr",null,null,-1),Ms=e("h3",{id:"emitmessage",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#emitmessage","aria-hidden":"true"},"#"),t(" emitMessage")],-1),Qs=o("\u25B8 <strong>emitMessage</strong>&lt;<code>T</code>&gt;(<code>message</code>, <code>contentType?</code>, <code>contentEncoding?</code>): <code>Promise</code>&lt;<code>Readonly</code>&lt;",15),ks=e("code",null,"EBMessage",-1),Ts=t(">>"),Ps=e("h4",{id:"type-parameters-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-parameters-2","aria-hidden":"true"},"#"),t(" Type parameters")],-1),ws=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ls=e("td",{style:{"text-align":"left"}},[e("code",null,"T")],-1),Ns={style:{"text-align":"left"}},Cs=t("extends "),Ds=e("code",null,"EBMessage",-1),Ss=e("h4",{id:"parameters-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-3","aria-hidden":"true"},"#"),t(" Parameters")],-1),Is=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value")])],-1),Ks=e("td",{style:{"text-align":"left"}},[e("code",null,"message")],-1),Os={style:{"text-align":"left"}},Fs=e("code",null,"Omit",-1),As=t("<"),Gs=e("code",null,"EBMessage",-1),Vs=t(", "),js=e("code",null,'"id"',-1),Hs=t(" | "),Us=e("code",null,'"timestamp"',-1),zs=t(" | "),Js=e("code",null,'"instanceId"',-1),Ws=t(" | "),Xs=e("code",null,'"correlationId"',-1),Ys=t(">"),Zs=e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")],-1),$s=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"contentType")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[e("code",null,"'application/json'")])],-1),ei=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"contentEncoding")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[e("code",null,"'utf-8'")])],-1),ti=e("h4",{id:"returns-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-4","aria-hidden":"true"},"#"),t(" Returns")],-1),ni=e("code",null,"Promise",-1),si=t("<"),ii=e("code",null,"Readonly",-1),di=t("<"),oi=e("code",null,"EBMessage",-1),ai=t(">>"),ri=e("h4",{id:"overrides-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-2","aria-hidden":"true"},"#"),t(" Overrides")],-1),li=t("EventBridge"),ci=t("."),hi=t("emitMessage"),_i=e("h4",{id:"defined-in-15",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-15","aria-hidden":"true"},"#"),t(" Defined in")],-1),ui={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L196",target:"_blank",rel:"noopener noreferrer"},pi=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:196"),gi=o('<hr><h3 id="encodecontent" tabindex="-1"><a class="header-anchor" href="#encodecontent" aria-hidden="true">#</a> encodeContent</h3><p>\u25B8 <code>Protected</code> <strong>encodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>Buffer</code>&gt;</p><p>Encode given payload to buffer</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>T</code></td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Buffer</code>&gt;</p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4>',11),bi={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L528",target:"_blank",rel:"noopener noreferrer"},mi=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:528"),fi=o('<hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>\u25B8 <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType?</code>, <code>contentEncoding?</code>, <code>commandTimeout?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4>',6),vi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value")])],-1),xi=e("td",{style:{"text-align":"left"}},[e("code",null,"input")],-1),yi={style:{"text-align":"left"}},Ei=e("code",null,"Omit",-1),qi=t("<"),Bi=e("code",null,"Command",-1),Ri=o("&lt;<code>unknown</code>, <code>unknown</code>&gt;, <code>&quot;id&quot;</code> | <code>&quot;messageType&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;instanceId&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;",15),Mi=e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")],-1),Qi=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"contentType")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[e("code",null,"'application/json'")])],-1),ki=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"contentEncoding")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[e("code",null,"'utf-8'")])],-1),Ti=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"commandTimeout")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},[e("code",null,"undefined")])],-1),Pi=e("h4",{id:"returns-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-6","aria-hidden":"true"},"#"),t(" Returns")],-1),wi=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"T"),t(">")],-1),Li=e("h4",{id:"overrides-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-3","aria-hidden":"true"},"#"),t(" Overrides")],-1),Ni=t("EventBridge"),Ci=t("."),Di=t("invoke"),Si=e("h4",{id:"defined-in-17",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-17","aria-hidden":"true"},"#"),t(" Defined in")],-1),Ii={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L237",target:"_blank",rel:"noopener noreferrer"},Ki=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:237"),Oi=o('<hr><h3 id="off" tabindex="-1"><a class="header-anchor" href="#off" aria-hidden="true">#</a> off</h3><p>\u25B8 <strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4>',4),Fi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ai=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),Gi={style:{"text-align":"left"}},Vi=t("extends "),ji=e("code",null,"EventKey",-1),Hi=t("<"),Ui=e("code",null,"EventBridgeEvents",-1),zi=t(">"),Ji=e("h4",{id:"parameters-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-6","aria-hidden":"true"},"#"),t(" Parameters")],-1),Wi=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Xi=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"eventName")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),Yi=e("td",{style:{"text-align":"left"}},[e("code",null,"fn")],-1),Zi={style:{"text-align":"left"}},$i=e("code",null,"EventReceiver",-1),ed=t("<"),td=e("code",null,"EventBridgeEvents",-1),nd=t("["),sd=e("code",null,"K",-1),id=t("]>"),dd=e("h4",{id:"returns-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-7","aria-hidden":"true"},"#"),t(" Returns")],-1),od=e("p",null,[e("code",null,"void")],-1),ad=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1","aria-hidden":"true"},"#"),t(" Inherited from")],-1),rd=t("EventBridge"),ld=t("."),cd=t("off"),hd=o('<h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:12</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>\u25B8 <strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4>',6),_d=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),ud=e("td",{style:{"text-align":"left"}},[e("code",null,"K")],-1),pd={style:{"text-align":"left"}},gd=t("extends "),bd=e("code",null,"EventKey",-1),md=t("<"),fd=e("code",null,"EventBridgeEvents",-1),vd=t(">"),xd=e("h4",{id:"parameters-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-7","aria-hidden":"true"},"#"),t(" Parameters")],-1),yd=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ed=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"eventName")]),e("td",{style:{"text-align":"left"}},[e("code",null,"K")])],-1),qd=e("td",{style:{"text-align":"left"}},[e("code",null,"fn")],-1),Bd={style:{"text-align":"left"}},Rd=e("code",null,"EventReceiver",-1),Md=t("<"),Qd=e("code",null,"EventBridgeEvents",-1),kd=t("["),Td=e("code",null,"K",-1),Pd=t("]>"),wd=e("h4",{id:"returns-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-8","aria-hidden":"true"},"#"),t(" Returns")],-1),Ld=e("p",null,[e("code",null,"void")],-1),Nd=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Cd=t("EventBridge"),Dd=t("."),Sd=t("on"),Id=o('<h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:11</p><hr><h3 id="registerservicefunction" tabindex="-1"><a class="header-anchor" href="#registerservicefunction" aria-hidden="true">#</a> registerServiceFunction</h3><p>\u25B8 <strong>registerServiceFunction</strong>(<code>address</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><p>Register a service function and ensure that there is a queue for all incoming command requests.</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4>',7),Kd=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Od=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),Fd={style:{"text-align":"left"}},Ad=e("code",null,"EBMessageAddress",-1),Gd=e("td",{style:{"text-align":"left"}},"The service function address",-1),Vd=e("td",{style:{"text-align":"left"}},[e("code",null,"cb")],-1),jd={style:{"text-align":"left"}},Hd=t("("),Ud=e("code",null,"message",-1),zd=t(": "),Jd=e("code",null,"Command",-1),Wd=t("<"),Xd=e("code",null,"unknown",-1),Yd=t(", "),Zd=e("code",null,"unknown",-1),$d=t(">) => "),eo=e("code",null,"Promise",-1),to=t("<"),no=e("code",null,"CommandErrorResponse",-1),so=t(" | "),io=e("code",null,"CommandSuccessResponse",-1),oo=t("<"),ao=e("code",null,"unknown",-1),ro=t(">>"),lo=e("td",{style:{"text-align":"left"}},"the function to call if a matching command message arrives",-1),co=e("h4",{id:"returns-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),t(" Returns")],-1),ho=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"string"),t(">")],-1),_o=e("p",null,"the id of command function queue",-1),uo=e("h4",{id:"overrides-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-4","aria-hidden":"true"},"#"),t(" Overrides")],-1),po=t("EventBridge"),go=t("."),bo=t("registerServiceFunction"),mo=e("h4",{id:"defined-in-20",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-20","aria-hidden":"true"},"#"),t(" Defined in")],-1),fo={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L346",target:"_blank",rel:"noopener noreferrer"},vo=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:346"),xo=o('<hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>\u25B8 <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4>',4),yo=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Eo=e("td",{style:{"text-align":"left"}},[e("code",null,"subscription")],-1),qo={style:{"text-align":"left"}},Bo=e("code",null,"Subscription",-1),Ro=e("td",{style:{"text-align":"left"}},[e("code",null,"cb")],-1),Mo={style:{"text-align":"left"}},Qo=t("("),ko=e("code",null,"message",-1),To=t(": "),Po=e("code",null,"EBMessage",-1),wo=t(") => "),Lo=e("code",null,"Promise",-1),No=t("<"),Co=e("code",null,"void",-1),Do=t(">"),So=e("h4",{id:"returns-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-10","aria-hidden":"true"},"#"),t(" Returns")],-1),Io=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"string"),t(">")],-1),Ko=e("h4",{id:"overrides-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-5","aria-hidden":"true"},"#"),t(" Overrides")],-1),Oo=t("EventBridge"),Fo=t("."),Ao=t("registerSubscription"),Go=e("h4",{id:"defined-in-21",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-21","aria-hidden":"true"},"#"),t(" Defined in")],-1),Vo={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L448",target:"_blank",rel:"noopener noreferrer"},jo=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:448"),Ho=o('<hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>\u25B8 <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Connect to RabbitMQ broker, ensure exchange, call back queue</p><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="overrides-6" tabindex="-1"><a class="header-anchor" href="#overrides-6" aria-hidden="true">#</a> Overrides</h4>',7),Uo=t("EventBridge"),zo=t("."),Jo=t("start"),Wo=e("h4",{id:"defined-in-22",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-22","aria-hidden":"true"},"#"),t(" Defined in")],-1),Xo={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L111",target:"_blank",rel:"noopener noreferrer"},Yo=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:111"),Zo=o('<hr><h3 id="unregisterservicefunction" tabindex="-1"><a class="header-anchor" href="#unregisterservicefunction" aria-hidden="true">#</a> unregisterServiceFunction</h3><p>\u25B8 <strong>unregisterServiceFunction</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4>',4),$o=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),ea=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),ta={style:{"text-align":"left"}},na=e("code",null,"EBMessageAddress",-1),sa=e("h4",{id:"returns-12",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-12","aria-hidden":"true"},"#"),t(" Returns")],-1),ia=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),da=e("h4",{id:"overrides-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-7","aria-hidden":"true"},"#"),t(" Overrides")],-1),oa=t("EventBridge"),aa=t("."),ra=t("unregisterServiceFunction"),la=e("h4",{id:"defined-in-23",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-23","aria-hidden":"true"},"#"),t(" Defined in")],-1),ca={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L429",target:"_blank",rel:"noopener noreferrer"},ha=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:429"),_a=o('<hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>\u25B8 <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4>',4),ua=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),pa=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),ga={style:{"text-align":"left"}},ba=e("code",null,"EBMessageAddress",-1),ma=e("h4",{id:"returns-13",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-13","aria-hidden":"true"},"#"),t(" Returns")],-1),fa=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),va=e("h4",{id:"overrides-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-8","aria-hidden":"true"},"#"),t(" Overrides")],-1),xa=t("EventBridge"),ya=t("."),Ea=t("unregisterSubscription"),qa=e("h4",{id:"defined-in-24",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-24","aria-hidden":"true"},"#"),t(" Defined in")],-1),Ba={href:"https://github.com/sebastianwessel/purista/blob/81fe9e5/packages/amqpbridge/src/RabbitMQEventBridge.impl.ts#L502",target:"_blank",rel:"noopener noreferrer"},Ra=t("amqpbridge/src/RabbitMQEventBridge.impl.ts:502");function Ma(Qa,ka){const s=a("RouterLink"),d=a("ExternalLinkIcon");return l(),c("div",null,[e("p",null,[n(s,{to:"/api/"},{default:i(()=>[_]),_:1}),u,n(s,{to:"/api/modules/purista_amqpbridge.html"},{default:i(()=>[p]),_:1}),g]),b,e("p",null,[n(s,{to:"/api/modules/purista_amqpbridge.html"},{default:i(()=>[m]),_:1}),f]),v,x,e("ul",null,[e("li",null,[e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[y]),_:1})]),E])]),q,B,e("ul",null,[e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#constructor"},{default:i(()=>[R]),_:1})])]),M,e("ul",null,[e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#channel"},{default:i(()=>[Q]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#config"},{default:i(()=>[k]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#connection"},{default:i(()=>[T]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#encoder"},{default:i(()=>[P]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#encrypter"},{default:i(()=>[w]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#log"},{default:i(()=>[L]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#pendinginvocations"},{default:i(()=>[N]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#replyqueuename"},{default:i(()=>[C]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#servicefunctions"},{default:i(()=>[D]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#subscriptions"},{default:i(()=>[S]),_:1})])]),I,e("ul",null,[e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#defaultcommandtimeout"},{default:i(()=>[K]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#instanceid"},{default:i(()=>[O]),_:1})])]),F,e("ul",null,[e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#decodecontent"},{default:i(()=>[A]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#emit"},{default:i(()=>[G]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#emitmessage"},{default:i(()=>[V]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#encodecontent"},{default:i(()=>[j]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#invoke"},{default:i(()=>[H]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#off"},{default:i(()=>[U]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#on"},{default:i(()=>[z]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#registerservicefunction"},{default:i(()=>[J]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#registersubscription"},{default:i(()=>[W]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#start"},{default:i(()=>[X]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#unregisterservicefunction"},{default:i(()=>[Y]),_:1})]),e("li",null,[n(s,{to:"/api/classes/purista_amqpbridge.RabbitMQEventBridge.html#unregistersubscription"},{default:i(()=>[Z]),_:1})])]),$,e("table",null,[ee,e("tbody",null,[e("tr",null,[te,e("td",ne,[n(s,{to:"/api/classes/purista_amqpbridge.internal.Logger.html"},{default:i(()=>[se]),_:1})])]),e("tr",null,[ie,e("td",de,[n(s,{to:"/api/modules/purista_amqpbridge.html#rabbitmqeventbridgeconfig"},{default:i(()=>[oe]),_:1})])])])]),ae,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[re]),_:1}),le,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#constructor"},{default:i(()=>[ce]),_:1})]),he,e("p",null,[e("a",_e,[ue,n(d)])]),pe,e("p",null,[e("a",ge,[be,n(d)])]),me,fe,e("p",null,[ve,xe,ye,Ee,qe,n(s,{to:"/api/modules/purista_amqpbridge.html#rabbitmqeventbridgeconfig"},{default:i(()=>[Be]),_:1})]),Re,e("p",null,[e("a",Me,[Qe,n(d)])]),ke,e("p",null,[e("a",Te,[Pe,n(d)])]),we,Le,e("p",null,[Ne,Ce,De,Se,Ie,n(s,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:i(()=>[Ke]),_:1})]),Oe,e("p",null,[e("a",Fe,[Ae,n(d)])]),Ge,Ve,e("p",null,[je,He,Ue,ze,Je,n(s,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:i(()=>[We]),_:1})]),Xe,e("p",null,[e("a",Ye,[Ze,n(d)])]),$e,et,e("p",null,[tt,nt,st,it,dt,n(s,{to:"/api/classes/purista_amqpbridge.internal.Logger.html"},{default:i(()=>[ot]),_:1})]),at,e("p",null,[e("a",rt,[lt,n(d)])]),ct,ht,e("p",null,[_t,ut,pt,gt,bt,mt,ft,vt,xt,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#pendiginvocation"},{default:i(()=>[yt]),_:1}),Et]),qt,e("p",null,[e("a",Bt,[Rt,n(d)])]),Mt,e("p",null,[e("a",Qt,[kt,n(d)])]),Tt,Pt,e("p",null,[wt,Lt,Nt,Ct,Dt,St,It,Kt,Ot,Ft,At,Gt,Vt,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:i(()=>[jt]),_:1}),Ht,Ut,zt,Jt,Wt,Xt,Yt,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#commanderrorresponse-1"},{default:i(()=>[Zt]),_:1}),$t,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#commandsuccessresponse-1"},{default:i(()=>[en]),_:1}),tn,nn,sn,dn,on,an,rn]),ln,e("p",null,[e("a",cn,[hn,n(d)])]),_n,un,e("p",null,[pn,gn,bn,mn,fn,vn,xn,yn,En,qn,Bn,Rn,Mn,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:i(()=>[Qn]),_:1}),kn,Tn,Pn,wn,Ln,Nn,Cn,Dn,Sn,In,Kn,On,Fn]),An,e("p",null,[e("a",Gn,[Vn,n(d)])]),jn,e("p",null,[e("a",Hn,[Un,n(d)])]),zn,e("p",null,[e("a",Jn,[Wn,n(d)])]),Xn,e("p",null,[e("a",Yn,[Zn,n(d)])]),$n,e("table",null,[es,e("tbody",null,[e("tr",null,[ts,e("td",ns,[ss,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventkey"},{default:i(()=>[is]),_:1}),ds,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:i(()=>[os]),_:1}),as])])])]),rs,e("table",null,[ls,e("tbody",null,[cs,e("tr",null,[hs,e("td",_s,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:i(()=>[us]),_:1}),ps,gs,bs])])])]),ms,fs,vs,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[xs]),_:1}),ys,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#emit"},{default:i(()=>[Es]),_:1})]),qs,Bs,Rs,Ms,e("p",null,[Qs,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:i(()=>[ks]),_:1}),Ts]),Ps,e("table",null,[ws,e("tbody",null,[e("tr",null,[Ls,e("td",Ns,[Cs,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:i(()=>[Ds]),_:1})])])])]),Ss,e("table",null,[Is,e("tbody",null,[e("tr",null,[Ks,e("td",Os,[Fs,As,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:i(()=>[Gs]),_:1}),Vs,js,Hs,Us,zs,Js,Ws,Xs,Ys]),Zs]),$s,ei])]),ti,e("p",null,[ni,si,ii,di,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:i(()=>[oi]),_:1}),ai]),ri,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[li]),_:1}),ci,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#emitmessage"},{default:i(()=>[hi]),_:1})]),_i,e("p",null,[e("a",ui,[pi,n(d)])]),gi,e("p",null,[e("a",bi,[mi,n(d)])]),fi,e("table",null,[vi,e("tbody",null,[e("tr",null,[xi,e("td",yi,[Ei,qi,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:i(()=>[Bi]),_:1}),Ri]),Mi]),Qi,ki,Ti])]),Pi,wi,Li,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[Ni]),_:1}),Ci,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#invoke"},{default:i(()=>[Di]),_:1})]),Si,e("p",null,[e("a",Ii,[Ki,n(d)])]),Oi,e("table",null,[Fi,e("tbody",null,[e("tr",null,[Ai,e("td",Gi,[Vi,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventkey"},{default:i(()=>[ji]),_:1}),Hi,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:i(()=>[Ui]),_:1}),zi])])])]),Ji,e("table",null,[Wi,e("tbody",null,[Xi,e("tr",null,[Yi,e("td",Zi,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventreceiver"},{default:i(()=>[$i]),_:1}),ed,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:i(()=>[td]),_:1}),nd,sd,id])])])]),dd,od,ad,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[rd]),_:1}),ld,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#off"},{default:i(()=>[cd]),_:1})]),hd,e("table",null,[_d,e("tbody",null,[e("tr",null,[ud,e("td",pd,[gd,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventkey"},{default:i(()=>[bd]),_:1}),md,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:i(()=>[fd]),_:1}),vd])])])]),xd,e("table",null,[yd,e("tbody",null,[Ed,e("tr",null,[qd,e("td",Bd,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventreceiver"},{default:i(()=>[Rd]),_:1}),Md,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#eventbridgeevents"},{default:i(()=>[Qd]),_:1}),kd,Td,Pd])])])]),wd,Ld,Nd,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[Cd]),_:1}),Dd,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#on"},{default:i(()=>[Sd]),_:1})]),Id,e("table",null,[Kd,e("tbody",null,[e("tr",null,[Od,e("td",Fd,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessageaddress"},{default:i(()=>[Ad]),_:1})]),Gd]),e("tr",null,[Vd,e("td",jd,[Hd,Ud,zd,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#command-1"},{default:i(()=>[Jd]),_:1}),Wd,Xd,Yd,Zd,$d,eo,to,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#commanderrorresponse-1"},{default:i(()=>[no]),_:1}),so,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#commandsuccessresponse-1"},{default:i(()=>[io]),_:1}),oo,ao,ro]),lo])])]),co,ho,_o,uo,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[po]),_:1}),go,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#registerservicefunction"},{default:i(()=>[bo]),_:1})]),mo,e("p",null,[e("a",fo,[vo,n(d)])]),xo,e("table",null,[yo,e("tbody",null,[e("tr",null,[Eo,e("td",qo,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#subscription"},{default:i(()=>[Bo]),_:1})])]),e("tr",null,[Ro,e("td",Mo,[Qo,ko,To,n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessage"},{default:i(()=>[Po]),_:1}),wo,Lo,No,Co,Do])])])]),So,Io,Ko,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[Oo]),_:1}),Fo,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#registersubscription"},{default:i(()=>[Ao]),_:1})]),Go,e("p",null,[e("a",Vo,[jo,n(d)])]),Ho,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[Uo]),_:1}),zo,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#start"},{default:i(()=>[Jo]),_:1})]),Wo,e("p",null,[e("a",Xo,[Yo,n(d)])]),Zo,e("table",null,[$o,e("tbody",null,[e("tr",null,[ea,e("td",ta,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessageaddress"},{default:i(()=>[na]),_:1})])])])]),sa,ia,da,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[oa]),_:1}),aa,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#unregisterservicefunction"},{default:i(()=>[ra]),_:1})]),la,e("p",null,[e("a",ca,[ha,n(d)])]),_a,e("table",null,[ua,e("tbody",null,[e("tr",null,[pa,e("td",ga,[n(s,{to:"/api/modules/purista_amqpbridge.internal.html#ebmessageaddress"},{default:i(()=>[ba]),_:1})])])])]),ma,fa,va,e("p",null,[n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html"},{default:i(()=>[xa]),_:1}),ya,n(s,{to:"/api/classes/purista_amqpbridge.internal.EventBridge.html#unregistersubscription"},{default:i(()=>[Ea]),_:1})]),qa,e("p",null,[e("a",Ba,[Ra,n(d)])])])}var wa=r(h,[["render",Ma],["__file","purista_amqpbridge.RabbitMQEventBridge.html.vue"]]);export{wa as default};
