import{_ as e,c as i,o as a,ag as t}from"./chunks/framework.U_AETC1W.js";const n="/graphic/mqtt_event_bridge_header.png",g=JSON.parse('{"title":"MQTT Event Bridge","description":"Use the MQTT event bridge of PURISTA","frontmatter":{"title":"MQTT Event Bridge","description":"Use the MQTT event bridge of PURISTA","order":301030},"headers":[],"relativePath":"handbook/3_eco_system/eventbridges/mqtt.md","filePath":"handbook/3_eco_system/eventbridges/mqtt.md","lastUpdated":1739901845000}'),r={name:"handbook/3_eco_system/eventbridges/mqtt.md"};function o(l,s,h,p,d,k){return a(),i("div",null,s[0]||(s[0]=[t('<p><img src="'+n+`" alt="AMQP event bridge"></p><h1 id="mqtt-event-bridge" tabindex="-1">MQTT Event Bridge <a class="header-anchor" href="#mqtt-event-bridge" aria-label="Permalink to &quot;MQTT Event Bridge&quot;">​</a></h1><p>MQTT with the popular <a href="https://mosquitto.org" target="_blank" rel="noreferrer">mosquitto broker</a> is one of the most mature and widely used messaging protocols.</p><p>The MQTT protocol version 5 has some interesting additions, like shared subscriptions, session ttl, message ttl and response fields. This reduces the gap between available broker features and our needs.</p><p>PURISTA provides the <code>@purista/mqttbridge</code></p><div class="tip custom-block"><p class="custom-block-title">Pros</p><ul><li>allows scaling</li><li>fault tollerant</li><li>MQTT is a mature protocol and widely used (IoT/edge)</li></ul></div><div class="warning custom-block"><p class="custom-block-title">Cons</p><ul><li>needs managing of an MQTT broker</li><li>only MQTT 5 is supported</li><li>hard to handle dead letters</li></ul></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>The MQTT event bridge uses the unified configuration schema as all event bridges.</p><div class="info custom-block"><p class="custom-block-title">API documentation</p><ul><li><a href="./../../../api/@purista/core/README.html">General event bridge config</a></li><li><a href="./../../../api/@purista/mqttbridge/README.html">MQTT bridge config</a></li></ul></div><h2 id="usage-example" tabindex="-1">Usage example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MqttBridge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@purista/mqttbridge&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventBridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MqttBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="topic-names" tabindex="-1">Topic names <a class="header-anchor" href="#topic-names" aria-label="Permalink to &quot;Topic names&quot;">​</a></h2><p>The MQTT protocol relays on topics for message publishing/subscribe.</p><p>PURISTA is using the following schema for topics:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> topicPrefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.topicPrefix</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> empty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.emptyTopicPartString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> join(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  topicPrefix,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.messageType),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.principalId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.tenantId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.sender.instanceId),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.sender.serviceName),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.sender.serviceVersion),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.sender.serviceTarget),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.eventName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).receiver?.instanceId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).receiver?.serviceName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).receiver?.serviceVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertToSnakeCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).receiver?.serviceTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This allows to have subscriptions for very specific messages. The MQTT 5 topic alias feature is used for mapping a message to the correlating subscription.</p><h3 id="shared-subscriptions" tabindex="-1">Shared subscriptions <a class="header-anchor" href="#shared-subscriptions" aria-label="Permalink to &quot;Shared subscriptions&quot;">​</a></h3><p>Subscriptions are per default MQTT 5 shared subscriptions. Shared subscriptions in MQTT are simple to use. It only requires prefixing the topic with <code>$share</code> and a shared subscription name (pubsub name).</p><p>::: caution Be aware The shared subscription name (pubsub name) must differ from the topic prefix. Otherwise shared subscriptions are not working (at least in mosquitto). <code>$share/purista/purista/...</code> does not work, while <code>$share/purista_group/purista/...</code> is working :::</p><p>To align these settings, the configuration provides <code>shareTopicPrefix</code> which defaults to <code>$share</code> and should work on most of the brokers. If the broker might require some different prefix, you can align it here. The <code>shareTopicName</code> can be used to set a custom name for your shared subscriptions to prevent name collisions or to use a broker, which is a multi-tenant broker. It defaults to <code>sharedpurista</code>.</p><h2 id="message-timeouts-qos-and-subscriptions" tabindex="-1">Message timeouts, QOS, and subscriptions <a class="header-anchor" href="#message-timeouts-qos-and-subscriptions" aria-label="Permalink to &quot;Message timeouts, QOS, and subscriptions&quot;">​</a></h2><p>The configuration for the <code>MqttEventBridge</code> differentiates between command &amp; command responses and subscriptions.</p><p>Commands and command responses are basically short-living messages, which are only needed for the time a command is requested, executed and the result is returned. The timeout handling of invocations will be triggered, if commands can&#39;t be handled within the given time. Because of this, we can set command requests and responses to lower QOS and set a low MQTT message expiry time. This will reduce resource consumption and prevent the broker from storing unnecessary data for a long time.</p><p>You can use the MQTT event bridge config options <code>qosCommand</code> and <code>defaultCommandTimeout</code> to align it to your needs.</p><p>On the other hand, subscriptions will need to receive every subscribed message at least once, and they can run at any time. To prevent timing issues, a few things will automatically happen.</p><p>If a command request has the <code>eventName</code> field set as an event name, the command request will be published with the <code>defaultMessageExpiryInterval</code> message expiry time. Otherwise, the <code>defaultCommandTimeout</code> is used, which is most likely a much smaller value. Also, the QOS level is set to the higher value of <code>qosCommand</code> or <code>qoSSubscription</code>. The value of <code>qoSSubscription</code> will most likely be the same or a higher value than <code>qosCommand</code>. This will ensure subscriptions are getting the command request message - if an event name is set. Command responses will have the same behavior.</p><h2 id="hints" tabindex="-1">Hints <a class="header-anchor" href="#hints" aria-label="Permalink to &quot;Hints&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Ensure settings across instances</p><p>Remember to ensure, that QOS, prefixes, and so on are the same on every event bridge instance. Otherwise, you might get some unexpected behaviors.</p></div><div class="tip custom-block"><p class="custom-block-title">OpenTelemetry</p><p>PURISTA is using the MQTT 5 user properties feature to add the OpenTelemetry information to each message, as recommended: <a href="https://w3c.github.io/trace-context-mqtt/" target="_blank" rel="noreferrer">https://w3c.github.io/trace-context-mqtt/</a>.</p></div><h2 id="brokers-and-tools" tabindex="-1">Brokers and tools <a class="header-anchor" href="#brokers-and-tools" aria-label="Permalink to &quot;Brokers and tools&quot;">​</a></h2><ul><li><a href="https://mosquitto.org/" target="_blank" rel="noreferrer">Eclipse Mosquitto™</a></li><li><a href="https://www.emqx.com/en/products/nanomq" target="_blank" rel="noreferrer">NanoMQ</a> and a MQTT UI <a href="https://www.emqx.com/en/products/mqttx" target="_blank" rel="noreferrer">MQTTX</a></li><li><a href="https://www.hivemq.com/" target="_blank" rel="noreferrer">HiveMQ</a></li><li><a href="https://vernemq.com/" target="_blank" rel="noreferrer">VerneMQ</a></li><li><a href="https://activemq.apache.org/" target="_blank" rel="noreferrer">ActiveMQ</a></li></ul>`,32)]))}const m=e(r,[["render",o]]);export{g as __pageData,m as default};
