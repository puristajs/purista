import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as i,c as l,b as n,d as s,e,w as u,a as t}from"./app-ccf1f840.js";const r={},d=n("h2",{id:"service-class-events",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#service-class-events","aria-hidden":"true"},"#"),s(" Service class events")],-1),k=n("p",null,"Service instances are able to emit regular JavaScript events. This provides a way to observe the service instance, and to decouple things.",-1),v=n("br",null,null,-1),m={href:"https://prometheus.io",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),h=t('<p>But, by doing this, it would add a dependency, directly to your business code, with all the down sides.<br> A better way is, to emit the data from your command or subscription as regular JavaScript events.<br> Some function &quot;outside&quot; your service can listen to these events, and process the data.</p><div class="hint-container tip"><p class="hint-container-title">PRO</p><ul><li>keeps the business code isolated</li><li>easier to test and to handle errors</li><li>the dependency will be in one place - easier to maintain, fewer duplicate code</li><li>the dependency will become optional - e.g. can simpler replaced by other solutions</li></ul></div><div class="hint-container danger"><p class="hint-container-title">CONTRA</p><ul><li>a bit more overhead at the beginning</li></ul></div><h3 id="event-types" tabindex="-1"><a class="header-anchor" href="#event-types" aria-hidden="true">#</a> Event types</h3><p>There are three types:</p>',5),g=n("code",null,"service-",-1),y=n("li",null,[s("response messages, which have an event name assigned, are prefixed with "),n("code",null,"custom-")],-1),f=n("li",null,[s("additional events can be introduced by developers, and they must be prefixed with "),n("code",null,"misc-")],-1),w=t(`<h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>As an example, we will simply count the unhandled errors with the Prometheus client.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// observer.ts</span>
<span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">&#39;prom-client&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">collectData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>serviceInstance<span class="token operator">:</span> Service<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Create a Registry which registers the metrics</span>
  <span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">client</span><span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// Enable the collection of default metrics</span>
  client<span class="token punctuation">.</span><span class="token function">collectDefaultMetrics</span><span class="token punctuation">(</span><span class="token punctuation">{</span> register <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// Add a default label which is added to all metrics</span>
  register<span class="token punctuation">.</span><span class="token function">setDefaultLabels</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    serviceName<span class="token operator">:</span> theService<span class="token punctuation">.</span>info<span class="token punctuation">.</span>serviceName<span class="token punctuation">,</span>
    serviceVersion<span class="token operator">:</span> theService<span class="token punctuation">.</span>info<span class="token punctuation">.</span>serviceVersion<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// create a counter</span>
  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">client</span><span class="token punctuation">.</span><span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;unhandled_error_count&#39;</span><span class="token punctuation">,</span>
    help<span class="token operator">:</span> <span class="token string">&#39;metric_help&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  serviceInstace<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ServiceEventsNames<span class="token punctuation">.</span>CommandUnhandledError<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  serviceInstace<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>ServiceEventsNames<span class="token punctuation">.</span>SubscriptionUnhandledError<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> register
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main or index file</span>
<span class="token comment">// ...</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> collectData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./observer&#39;</span>
<span class="token comment">// ...</span>
<span class="token comment">// your regular instance creation an existing code</span>
<span class="token comment">// ...</span>

<span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token function">collectData</span><span class="token punctuation">(</span>serviceInstance<span class="token punctuation">)</span>

<span class="token comment">// if you use the @purista/k8s-sdk</span>
<span class="token comment">// expose the metrics like this</span>
server<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/metrics&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> register<span class="token punctuation">.</span>contentType<span class="token punctuation">)</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">await</span> register<span class="token punctuation">.</span><span class="token function">metrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, things are nicely separated and structured. You can re-use the <code>collectData</code> for multiple services, if you want.</p><h3 id="custom-events" tabindex="-1"><a class="header-anchor" href="#custom-events" aria-hidden="true">#</a> Custom events</h3><p>You can emit custom JavaScript events in command and subscription functions. They must be prefixed with <code>misc-</code>. They can emit any</p><p>Example of emitting custom events:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">setCommandFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> customValue <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token string">&#39;something&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;misc-object&#39;</span><span class="token punctuation">,</span> customValue<span class="token punctuation">)</span>

  <span class="token keyword">const</span> customValue <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token string">&#39;something&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;misc-string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string_value&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;misc-number&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;misc-boolean&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example of listening for custom events:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>serviceInstace<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;misc-string&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>eventPayload<span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eventPayload<span class="token punctuation">)</span> <span class="token comment">// outputs: string_value</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Use enum for custom events</p><p>It is recommended, to use your own enum for emitting and listener registration of events. Your code will become more maintable.</p></div>`,12);function _(x,E){const p=a("ExternalLinkIcon"),c=a("RouterLink");return i(),l("div",null,[d,k,n("p",null,[s("As an example:"),v,s(" You like to try out "),n("a",m,[s("Prometheus"),e(p)]),s(" to track certain data."),b,s(" One way of doing it, would be to directly integrate the Prometheus client into your commands and subscriptions.")]),h,n("ul",null,[n("li",null,[s("technical events relating to the service itself are prefixed with "),g,s(" (see "),e(c,{to:"/api/enums/purista_core.ServiceEventsNames.html"},{default:u(()=>[s("ServiceEventsNames")]),_:1}),s(")")]),y,f]),w])}const C=o(r,[["render",_],["__file","3_service_advanced.html.vue"]]);export{C as default};
