import{_ as o,c as d,o as c,ag as a}from"./chunks/framework.U_AETC1W.js";const h=JSON.parse('{"title":"Function: getCommandErrorMessageMock()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/functions/getCommandErrorMessageMock.md","filePath":"api/@purista/core/functions/getCommandErrorMessageMock.md","lastUpdated":1739900666000}'),r={name:"api/@purista/core/functions/getCommandErrorMessageMock.md"};function t(n,e,s,i,p,m){return c(),d("div",null,e[0]||(e[0]=[a('<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / getCommandErrorMessageMock</p><h1 id="function-getcommanderrormessagemock" tabindex="-1">Function: getCommandErrorMessageMock() <a class="header-anchor" href="#function-getcommanderrormessagemock" aria-label="Permalink to &quot;Function: getCommandErrorMessageMock()&quot;">​</a></h1><blockquote><p><strong>getCommandErrorMessageMock</strong>(<code>error</code>?, <code>input</code>?, <code>commandMessage</code>?): <code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/mocks/messages/getCommandErrorMessage.mock.ts#L16" target="_blank" rel="noreferrer">packages/core/src/mocks/messages/getCommandErrorMessage.mock.ts:16</a></p><p>A function that returns a mocked command error response message</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="error" tabindex="-1">error? <a class="header-anchor" href="#error" aria-label="Permalink to &quot;error?&quot;">​</a></h3><p><a href="./../classes/UnhandledError.html"><code>UnhandledError</code></a> | <a href="./../classes/HandledError.html"><code>HandledError</code></a></p><h3 id="input" tabindex="-1">input? <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input?&quot;">​</a></h3><p><code>Partial</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p><h3 id="commandmessage" tabindex="-1">commandMessage? <a class="header-anchor" href="#commandmessage" aria-label="Permalink to &quot;commandMessage?&quot;">​</a></h3><h4 id="contentencoding" tabindex="-1">contentEncoding <a class="header-anchor" href="#contentencoding" aria-label="Permalink to &quot;contentEncoding&quot;">​</a></h4><p><code>string</code></p><p>content encoding of message payload</p><h4 id="contenttype" tabindex="-1">contentType <a class="header-anchor" href="#contenttype" aria-label="Permalink to &quot;contentType&quot;">​</a></h4><p><code>string</code></p><p>content type of message payload</p><h4 id="correlationid" tabindex="-1">correlationId <a class="header-anchor" href="#correlationid" aria-label="Permalink to &quot;correlationId&quot;">​</a></h4><p><code>string</code></p><p>correlation id to know which command response referrs to which command</p><h4 id="eventname" tabindex="-1">eventName? <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName?&quot;">​</a></h4><p><code>string</code></p><p>event name for this message</p><h4 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h4><p><code>string</code></p><p>global unique id of message</p><h4 id="messagetype" tabindex="-1">messageType <a class="header-anchor" href="#messagetype" aria-label="Permalink to &quot;messageType&quot;">​</a></h4><p><a href="./../enumerations/EBMessageType.html#command"><code>Command</code></a></p><h4 id="otp" tabindex="-1">otp? <a class="header-anchor" href="#otp" aria-label="Permalink to &quot;otp?&quot;">​</a></h4><p><code>string</code></p><p>stringified Opentelemetry parent trace id</p><h4 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h4><p>{ <code>parameter</code>: <code>unknown</code>; <code>payload</code>: <code>unknown</code>; }</p><h4 id="payload-parameter" tabindex="-1">payload.parameter <a class="header-anchor" href="#payload-parameter" aria-label="Permalink to &quot;payload.parameter&quot;">​</a></h4><p><code>unknown</code></p><h4 id="payload-payload" tabindex="-1">payload.payload <a class="header-anchor" href="#payload-payload" aria-label="Permalink to &quot;payload.payload&quot;">​</a></h4><p><code>unknown</code></p><h4 id="principalid" tabindex="-1">principalId? <a class="header-anchor" href="#principalid" aria-label="Permalink to &quot;principalId?&quot;">​</a></h4><p><code>string</code></p><p>principal id</p><h4 id="receiver" tabindex="-1">receiver <a class="header-anchor" href="#receiver" aria-label="Permalink to &quot;receiver&quot;">​</a></h4><p><a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h4 id="sender" tabindex="-1">sender <a class="header-anchor" href="#sender" aria-label="Permalink to &quot;sender&quot;">​</a></h4><p>{ <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }</p><h4 id="sender-instanceid" tabindex="-1">sender.instanceId <a class="header-anchor" href="#sender-instanceid" aria-label="Permalink to &quot;sender.instanceId&quot;">​</a></h4><p><code>string</code></p><p>instance id of eventbridge</p><h4 id="sender-servicename" tabindex="-1">sender.serviceName <a class="header-anchor" href="#sender-servicename" aria-label="Permalink to &quot;sender.serviceName&quot;">​</a></h4><p><code>string</code></p><p>the name of the service</p><h4 id="sender-servicetarget" tabindex="-1">sender.serviceTarget <a class="header-anchor" href="#sender-servicetarget" aria-label="Permalink to &quot;sender.serviceTarget&quot;">​</a></h4><p><code>string</code></p><p>the name of the command or subscription</p><h4 id="sender-serviceversion" tabindex="-1">sender.serviceVersion <a class="header-anchor" href="#sender-serviceversion" aria-label="Permalink to &quot;sender.serviceVersion&quot;">​</a></h4><p><code>string</code></p><p>the version of the service</p><h4 id="tenantid" tabindex="-1">tenantId? <a class="header-anchor" href="#tenantid" aria-label="Permalink to &quot;tenantId?&quot;">​</a></h4><p><code>string</code></p><p>principal id</p><h4 id="timestamp" tabindex="-1">timestamp <a class="header-anchor" href="#timestamp" aria-label="Permalink to &quot;timestamp&quot;">​</a></h4><p><code>number</code></p><p>timestamp of message creation time</p><h4 id="traceid" tabindex="-1">traceId? <a class="header-anchor" href="#traceid" aria-label="Permalink to &quot;traceId?&quot;">​</a></h4><p><code>string</code></p><p>trace id of message</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p>',69)]))}const g=o(r,[["render",t]]);export{h as __pageData,g as default};
