import{_ as i,c as s,o,ag as n}from"./chunks/framework.U_AETC1W.js";const t="/graphic/lambda.svg",m=JSON.parse('{"title":"Serverless function","description":"Deploy your typescript application in a microservice styled way","frontmatter":{"title":"Serverless function","description":"Deploy your typescript application in a microservice styled way","order":504000},"headers":[],"relativePath":"handbook/5_deploy_and_scale/serverless_function_fass.md","filePath":"handbook/5_deploy_and_scale/serverless_function_fass.md","lastUpdated":1706444636000}'),a={name:"handbook/5_deploy_and_scale/serverless_function_fass.md"};function r(l,e,c,d,p,u){return o(),s("div",null,e[0]||(e[0]=[n('<h1 id="serverless-functions-faas" tabindex="-1">Serverless functions (FaaS) <a class="header-anchor" href="#serverless-functions-faas" aria-label="Permalink to &quot;Serverless functions (FaaS)&quot;">â€‹</a></h1><p>AWS has named its popular function-as-service product <em>AWS Lambda</em> and the word <em>lambda</em> has more or less become a synonym for function-as-service. Every big player provides a solution for function-as-service. But, the implementation, the possibilities, and the usage differ on each provider - vendor lock.</p><p>PURISTA adapts the core idea, to have single, stateless, and independent functions, which can be managed and deployed independently. It also provides an abstraction layer between your business logic and the underneath provider implementation. Because of this, the vendor lock issue for this specific problem is solved.</p><p>In the picture below, you can see a simplified overview of how it might look on AWS.</p><p><img src="'+t+'" alt="example"></p><div class="tip custom-block"><p class="custom-block-title">Pros</p><ul><li>most granular scaling solution</li><li>access levels, restrictions, policies on function level possible</li><li>function instances are only running if they are needed (no instance running 24/7 as in other solutions)</li><li>might be more cost-efficient than running instances 24/7</li><li>you can benefit from your cloud provider solutions like AWS Step Functions and similar</li><li>on most providers, functions can be triggered scheduled by time in addition to triggered by an event</li></ul></div><div class="warning custom-block"><p class="custom-block-title">Cons</p><ul><li>needs special knowledge on the used provider to be configured correctly</li><li>deployment &amp; configuration is more complex / bigger amount of stuff to be handled</li><li>might be hard to test locally as soon as one function is invoking other functions.</li><li>logging, tracing, and metrics are depending on cloud provider possibilities</li></ul></div>',7)]))}const v=i(a,[["render",r]]);export{m as __pageData,v as default};
