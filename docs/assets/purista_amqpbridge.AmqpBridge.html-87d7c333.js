import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as s,c as l,b as e,e as d,w as a,d as t,a as o}from"./app-9aedf0b4.js";const h={},p=e("h1",{id:"class-amqpbridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-amqpbridge","aria-hidden":"true"},"#"),t(" Class: AmqpBridge")],-1),g=o(`<p>The AMQP event bridge connects to a AMQP broker.</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AmqpBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/amqpbridge&#39;</span>

<span class="token comment">// create and init our eventbridge</span>
  <span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmqpBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a> Hierarchy</h2>`,4),m=e("code",null,"EventBridgeBaseClass",-1),u=e("code",null,"AmqpBridgeConfig",-1),f=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"AmqpBridge")])],-1),b=o('<h2 id="implements" tabindex="-1"><a class="header-anchor" href="#implements" aria-hidden="true">#</a> Implements</h2><ul><li><code>EventBridge</code></li></ul><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',4),y=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),_=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),x=o('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new AmqpBridge</strong>(<code>config?</code>)</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',4),v=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),q=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Object")]),e("td",{style:{"text-align":"left"}},"-")],-1),B=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.defaultCommandTimeout?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},"Overwrite the hardcoded default timeout of command invocations")],-1),A=e("td",{style:{"text-align":"left"}},[e("code",null,"config.encoder?")],-1),k={style:{"text-align":"left"}},E=e("code",null,"Encoder",-1),T=e("td",{style:{"text-align":"left"}},[t("the encoder(s) to be used for AMQP messages "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts jsonEncoder ")],-1),I=e("td",{style:{"text-align":"left"}},[e("code",null,"config.encrypter?")],-1),P={style:{"text-align":"left"}},C=e("code",null,"Encrypter",-1),w=e("td",{style:{"text-align":"left"}},[t("the encrypter(s) to be used for AMQP messages "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts plain ")],-1),N=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.exchangeName?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the AMQP exchage name to be used "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts purista ")])],-1),D=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.exchangeOptions?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"AssertExchange")]),e("td",{style:{"text-align":"left"}},"the AMQP exchange options")],-1),L=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.instanceId?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The instance id of the event bridge. If not set, a id will generated each time a instance is created. Use this if there is a need to always have the same instance id.")],-1),R=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.logLevel?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"LogLevelName")]),e("td",{style:{"text-align":"left"}},"If no logger instance is given, use this log level")],-1),M=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.logger?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Logger")]),e("td",{style:{"text-align":"left"}},"A logger instance")],-1),S=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.namePrefix?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},[t("the queue prefix to be used for all PURISTA queues except short living queues created by the broker on request "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts purista ")])],-1),O=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.socketOptions?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"any")]),e("td",{style:{"text-align":"left"}},"socket options")],-1),V=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.spanProcessor?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"SpanProcessor")]),e("td",{style:{"text-align":"left"}},"A OpenTelemetry span processor")],-1),K=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"config.url?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string"),t(" | "),e("code",null,"Connect")]),e("td",{style:{"text-align":"left"}},[t("the AMQP broker url "),e("strong",null,[e("code",null,"Default")]),t(),e("code",null,"ts amqp://localhost ")])],-1),F=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),Q=e("p",null,"EventBridgeBaseClass<AmqpBridgeConfig&gt;.constructor",-1),H=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),j={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L99",target:"_blank",rel:"noopener noreferrer"},G=o('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h3><p>• <code>Protected</code> <code>Optional</code> <strong>channel</strong>: <code>Channel</code></p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4>',4),U={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L63",target:"_blank",rel:"noopener noreferrer"},z=e("hr",null,null,-1),J=e("h3",{id:"config",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#config","aria-hidden":"true"},"#"),t(" config")],-1),W=e("strong",null,"config",-1),X=e("code",null,"Complete",-1),Y=e("code",null,"defaultCommandTimeout?",-1),Z=e("code",null,"number",-1),$=e("code",null,"encoder?",-1),ee=e("code",null,"Encoder",-1),te=e("code",null,"encrypter?",-1),de=e("code",null,"Encrypter",-1),re=e("code",null,"exchangeName?",-1),ae=e("code",null,"string",-1),oe=e("code",null,"exchangeOptions?",-1),ne=e("code",null,"AssertExchange",-1),ie=e("code",null,"instanceId?",-1),ce=e("code",null,"string",-1),se=e("code",null,"logLevel?",-1),le=e("code",null,"LogLevelName",-1),he=e("code",null,"logger?",-1),pe=e("code",null,"Logger",-1),ge=e("code",null,"namePrefix?",-1),me=e("code",null,"string",-1),ue=e("code",null,"socketOptions?",-1),fe=e("code",null,"any",-1),be=e("code",null,"spanProcessor?",-1),ye=e("code",null,"SpanProcessor",-1),_e=e("code",null,"url?",-1),xe=e("code",null,"string",-1),ve=e("code",null,"Connect",-1),qe=o('<h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.config</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:13</p><hr><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> connection</h3><p>• <code>Protected</code> <code>Optional</code> <strong>connection</strong>: <code>Connection</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4>',8),Be={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L62",target:"_blank",rel:"noopener noreferrer"},Ae=o('<hr><h3 id="consumertags" tabindex="-1"><a class="header-anchor" href="#consumertags" aria-hidden="true">#</a> consumerTags</h3><p>• <code>Protected</code> <strong>consumerTags</strong>: <code>string</code>[] = <code>[]</code></p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4>',4),ke={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L68",target:"_blank",rel:"noopener noreferrer"},Ee=o('<hr><h3 id="defaultcommandtimeout" tabindex="-1"><a class="header-anchor" href="#defaultcommandtimeout" aria-hidden="true">#</a> defaultCommandTimeout</h3><p>• <strong>defaultCommandTimeout</strong>: <code>number</code></p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.defaultCommandTimeout</p><h4 id="inherited-from-1" tabindex="-1"><a class="header-anchor" href="#inherited-from-1" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.defaultCommandTimeout</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:16</p><hr><h3 id="encoder" tabindex="-1"><a class="header-anchor" href="#encoder" aria-hidden="true">#</a> encoder</h3>',11),Te=e("code",null,"Protected",-1),Ie=e("strong",null,"encoder",-1),Pe=e("code",null,"Encoder",-1),Ce=e("h4",{id:"defined-in-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-6","aria-hidden":"true"},"#"),t(" Defined in")],-1),we={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L91",target:"_blank",rel:"noopener noreferrer"},Ne=e("hr",null,null,-1),De=e("h3",{id:"encrypter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encrypter","aria-hidden":"true"},"#"),t(" encrypter")],-1),Le=e("code",null,"Protected",-1),Re=e("strong",null,"encrypter",-1),Me=e("code",null,"Encrypter",-1),Se=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),Oe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L95",target:"_blank",rel:"noopener noreferrer"},Ve=o('<hr><h3 id="healthy" tabindex="-1"><a class="header-anchor" href="#healthy" aria-hidden="true">#</a> healthy</h3><p>• <code>Protected</code> <strong>healthy</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4>',4),Ke={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L65",target:"_blank",rel:"noopener noreferrer"},Fe=o('<hr><h3 id="instanceid" tabindex="-1"><a class="header-anchor" href="#instanceid" aria-hidden="true">#</a> instanceId</h3><p>• <strong>instanceId</strong>: <code>string</code></p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.instanceId</p><h4 id="inherited-from-2" tabindex="-1"><a class="header-anchor" href="#inherited-from-2" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.instanceId</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:15</p><hr><h3 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> logger</h3><p>• <strong>logger</strong>: <code>Logger</code></p><h4 id="inherited-from-3" tabindex="-1"><a class="header-anchor" href="#inherited-from-3" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.logger</p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:11</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <strong>name</strong>: <code>string</code></p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.name</p><h4 id="inherited-from-4" tabindex="-1"><a class="header-anchor" href="#inherited-from-4" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.name</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:14</p><hr><h3 id="pendinginvocations" tabindex="-1"><a class="header-anchor" href="#pendinginvocations" aria-hidden="true">#</a> pendingInvocations</h3><p>• <code>Protected</code> <strong>pendingInvocations</strong>: <code>Map</code>&lt;<code>string</code>, <code>PendigInvocation</code>&gt;</p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4>',29),Qe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L79",target:"_blank",rel:"noopener noreferrer"},He=o('<hr><h3 id="ready" tabindex="-1"><a class="header-anchor" href="#ready" aria-hidden="true">#</a> ready</h3><p>• <code>Protected</code> <strong>ready</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4>',4),je={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L66",target:"_blank",rel:"noopener noreferrer"},Ge=o('<hr><h3 id="replyqueuename" tabindex="-1"><a class="header-anchor" href="#replyqueuename" aria-hidden="true">#</a> replyQueueName</h3><p>• <code>Protected</code> <code>Optional</code> <strong>replyQueueName</strong>: <code>string</code></p><h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4>',4),Ue={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L70",target:"_blank",rel:"noopener noreferrer"},ze=o('<hr><h3 id="runningsubscriptioncount" tabindex="-1"><a class="header-anchor" href="#runningsubscriptioncount" aria-hidden="true">#</a> runningSubscriptionCount</h3><p>• <code>Protected</code> <strong>runningSubscriptionCount</strong>: <code>number</code> = <code>0</code></p><h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4>',4),Je={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L81",target:"_blank",rel:"noopener noreferrer"},We=o('<hr><h3 id="servicefunctions" tabindex="-1"><a class="header-anchor" href="#servicefunctions" aria-hidden="true">#</a> serviceFunctions</h3><p>• <code>Protected</code> <strong>serviceFunctions</strong>: <code>Map</code>&lt;<code>string</code>, { <code>cb</code>: (<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> } | { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt; ; <code>channel</code>: <code>Channel</code> }&gt;</p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4>',4),Xe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L71",target:"_blank",rel:"noopener noreferrer"},Ye=o('<hr><h3 id="subscriptions" tabindex="-1"><a class="header-anchor" href="#subscriptions" aria-hidden="true">#</a> subscriptions</h3><p>• <code>Protected</code> <strong>subscriptions</strong>: <code>Map</code>&lt;<code>string</code>, { <code>cb</code>: (<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt; ; <code>channel</code>: <code>Channel</code> }&gt;</p><h4 id="defined-in-17" tabindex="-1"><a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a> Defined in</h4>',4),Ze={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L83",target:"_blank",rel:"noopener noreferrer"},$e=o('<hr><h3 id="traceprovider" tabindex="-1"><a class="header-anchor" href="#traceprovider" aria-hidden="true">#</a> traceProvider</h3><p>• <strong>traceProvider</strong>: <code>NodeTracerProvider</code></p><h4 id="inherited-from-5" tabindex="-1"><a class="header-anchor" href="#inherited-from-5" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.traceProvider</p><h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:12</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="decodecontent" tabindex="-1"><a class="header-anchor" href="#decodecontent" aria-hidden="true">#</a> decodeContent</h3><p>▸ <code>Protected</code> <strong>decodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Decode buffer into given type</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Buffer</code></td><td style="text-align:left;">the input buffer</td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the content type of buffer content</td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the encoding type of buffer content</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4>',18),et={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L811",target:"_blank",rel:"noopener noreferrer"},tt=o('<hr><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>▸ <strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.destroy</p><h4 id="overrides-1" tabindex="-1"><a class="header-anchor" href="#overrides-1" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass.destroy</p><h4 id="defined-in-20" tabindex="-1"><a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a> Defined in</h4>',10),dt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L826",target:"_blank",rel:"noopener noreferrer"},rt=o('<hr><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><p>▸ <strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>parameter?</code>): <code>void</code></p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>parameter?</code></td><td style="text-align:left;">{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-6" tabindex="-1"><a class="header-anchor" href="#inherited-from-6" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.emit</p><h4 id="defined-in-21" tabindex="-1"><a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:13</p><hr><h3 id="emitmessage" tabindex="-1"><a class="header-anchor" href="#emitmessage" aria-hidden="true">#</a> emitMessage</h3><p>▸ <strong>emitMessage</strong>&lt;<code>T</code>&gt;(<code>message</code>, <code>contentType?</code>, <code>contentEncoding?</code>): <code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>EBMessage</code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>message</code></td><td style="text-align:left;"><code>Omit</code>&lt;<code>EBMessage</code>, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td><td style="text-align:left;"><code>undefined</code></td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;application/json&#39;</code></td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;utf-8&#39;</code></td></tr></tbody></table><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.emitMessage</p><h4 id="defined-in-22" tabindex="-1"><a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a> Defined in</h4>',25),at={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L273",target:"_blank",rel:"noopener noreferrer"},ot=o('<hr><h3 id="encodecontent" tabindex="-1"><a class="header-anchor" href="#encodecontent" aria-hidden="true">#</a> encodeContent</h3><p>▸ <code>Protected</code> <strong>encodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>Buffer</code>&gt;</p><p>Encode given payload to buffer</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>T</code></td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Buffer</code>&gt;</p><h4 id="defined-in-23" tabindex="-1"><a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a> Defined in</h4>',11),nt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L790",target:"_blank",rel:"noopener noreferrer"},it=o('<hr><h3 id="gettracer" tabindex="-1"><a class="header-anchor" href="#gettracer" aria-hidden="true">#</a> getTracer</h3><p>▸ <strong>getTracer</strong>(): <code>Tracer</code></p><p>Returns open telemetry tracer of this service</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Tracer</code></p><p>Tracer</p><h4 id="inherited-from-7" tabindex="-1"><a class="header-anchor" href="#inherited-from-7" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.getTracer</p><h4 id="defined-in-24" tabindex="-1"><a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:23</p><hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>▸ <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>commandTimeout?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;messageType&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td></tr><tr><td style="text-align:left;"><code>commandTimeout</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="implementation-of-5" tabindex="-1"><a class="header-anchor" href="#implementation-of-5" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.invoke</p><h4 id="defined-in-25" tabindex="-1"><a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a> Defined in</h4>',23),ct={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L347",target:"_blank",rel:"noopener noreferrer"},st=o('<hr><h3 id="ishealthy" tabindex="-1"><a class="header-anchor" href="#ishealthy" aria-hidden="true">#</a> isHealthy</h3><p>▸ <strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-6" tabindex="-1"><a class="header-anchor" href="#implementation-of-6" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isHealthy</p><h4 id="defined-in-26" tabindex="-1"><a class="header-anchor" href="#defined-in-26" aria-hidden="true">#</a> Defined in</h4>',8),lt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L122",target:"_blank",rel:"noopener noreferrer"},ht=o('<hr><h3 id="isready" tabindex="-1"><a class="header-anchor" href="#isready" aria-hidden="true">#</a> isReady</h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-7" tabindex="-1"><a class="header-anchor" href="#implementation-of-7" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isReady</p><h4 id="defined-in-27" tabindex="-1"><a class="header-anchor" href="#defined-in-27" aria-hidden="true">#</a> Defined in</h4>',8),pt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L118",target:"_blank",rel:"noopener noreferrer"},gt=o('<hr><h3 id="off" tabindex="-1"><a class="header-anchor" href="#off" aria-hidden="true">#</a> off</h3><p>▸ <strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-8" tabindex="-1"><a class="header-anchor" href="#inherited-from-8" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.off</p><h4 id="defined-in-28" tabindex="-1"><a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:12</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>▸ <strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-9" tabindex="-1"><a class="header-anchor" href="#inherited-from-9" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.on</p><h4 id="defined-in-29" tabindex="-1"><a class="header-anchor" href="#defined-in-29" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:11</p><hr><h3 id="registercommand" tabindex="-1"><a class="header-anchor" href="#registercommand" aria-hidden="true">#</a> registerCommand</h3><p>▸ <strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><p>Register a service function and ensure that there is a queue for all incoming command requests.</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td><td style="text-align:left;">The service function address</td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> } | { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt;</td><td style="text-align:left;">the function to call if a matching command message arrives</td></tr><tr><td style="text-align:left;"><code>metadata</code></td><td style="text-align:left;"><code>CommandDefinitionMetadataBase</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>eventBridgeConfig</code></td><td style="text-align:left;"><code>DefinitionEventBridgeConfig</code></td><td style="text-align:left;">-</td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>the id of command function queue</p><h4 id="implementation-of-8" tabindex="-1"><a class="header-anchor" href="#implementation-of-8" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerCommand</p><h4 id="defined-in-30" tabindex="-1"><a class="header-anchor" href="#defined-in-30" aria-hidden="true">#</a> Defined in</h4>',38),mt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L464",target:"_blank",rel:"noopener noreferrer"},ut=o('<hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>▸ <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>subscription</code></td><td style="text-align:left;"><code>Subscription</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: <code>EBMessage</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-9" tabindex="-1"><a class="header-anchor" href="#implementation-of-9" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerSubscription</p><h4 id="defined-in-31" tabindex="-1"><a class="header-anchor" href="#defined-in-31" aria-hidden="true">#</a> Defined in</h4>',10),ft={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L645",target:"_blank",rel:"noopener noreferrer"},bt=o('<hr><h3 id="removealllisteners" tabindex="-1"><a class="header-anchor" href="#removealllisteners" aria-hidden="true">#</a> removeAllListeners</h3><p>▸ <strong>removeAllListeners</strong>(): <code>void</code></p><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-10" tabindex="-1"><a class="header-anchor" href="#inherited-from-10" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.removeAllListeners</p><h4 id="defined-in-32" tabindex="-1"><a class="header-anchor" href="#defined-in-32" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:14</p><hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>▸ <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Connect to RabbitMQ broker, ensure exchange, call back queue</p><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-10" tabindex="-1"><a class="header-anchor" href="#implementation-of-10" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.start</p><h4 id="overrides-2" tabindex="-1"><a class="header-anchor" href="#overrides-2" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass.start</p><h4 id="defined-in-33" tabindex="-1"><a class="header-anchor" href="#defined-in-33" aria-hidden="true">#</a> Defined in</h4>',20),yt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L129",target:"_blank",rel:"noopener noreferrer"},_t=o('<hr><h3 id="startactivespan" tabindex="-1"><a class="header-anchor" href="#startactivespan" aria-hidden="true">#</a> startActiveSpan</h3><p>▸ <strong>startActiveSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start a child span for opentelemetry tracking</p><h4 id="type-parameters-7" tabindex="-1"><a class="header-anchor" href="#type-parameters-7" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>context</code></td><td style="text-align:left;"><code>undefined</code> | <code>Context</code></td><td style="text-align:left;">optional context</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function to be executed within the span</td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-11" tabindex="-1"><a class="header-anchor" href="#inherited-from-11" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.startActiveSpan</p><h4 id="defined-in-34" tabindex="-1"><a class="header-anchor" href="#defined-in-34" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:32</p><hr><h3 id="unregistercommand" tabindex="-1"><a class="header-anchor" href="#unregistercommand" aria-hidden="true">#</a> unregisterCommand</h3><p>▸ <strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-11" tabindex="-1"><a class="header-anchor" href="#implementation-of-11" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterCommand</p><h4 id="defined-in-35" tabindex="-1"><a class="header-anchor" href="#defined-in-35" aria-hidden="true">#</a> Defined in</h4>',25),xt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L626",target:"_blank",rel:"noopener noreferrer"},vt=o('<hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>▸ <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-12" tabindex="-1"><a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-17" tabindex="-1"><a class="header-anchor" href="#returns-17" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-12" tabindex="-1"><a class="header-anchor" href="#implementation-of-12" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterSubscription</p><h4 id="defined-in-36" tabindex="-1"><a class="header-anchor" href="#defined-in-36" aria-hidden="true">#</a> Defined in</h4>',10),qt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L764",target:"_blank",rel:"noopener noreferrer"},Bt=o('<hr><h3 id="wrapinspan" tabindex="-1"><a class="header-anchor" href="#wrapinspan" aria-hidden="true">#</a> wrapInSpan</h3><p>▸ <strong>wrapInSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context?</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start span for opentelemetry tracking on same level. The created span will not become the &quot;active&quot; span within opentelemetry!</p><p>This means during logging and similar the spanId of parent span is logged.</p><p>Use wrapInSpan for marking points in flow of one bigger function, but not to trace the program flow itself</p><h4 id="type-parameters-8" tabindex="-1"><a class="header-anchor" href="#type-parameters-8" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-13" tabindex="-1"><a class="header-anchor" href="#parameters-13" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function te be executed in the span</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>Context</code></td><td style="text-align:left;">span context</td></tr></tbody></table><h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-12" tabindex="-1"><a class="header-anchor" href="#inherited-from-12" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.wrapInSpan</p><h4 id="defined-in-37" tabindex="-1"><a class="header-anchor" href="#defined-in-37" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:48</p>',17);function At(kt,Et){const r=i("RouterLink"),n=i("ExternalLinkIcon");return s(),l("div",null,[e("p",null,[d(r,{to:"/api/"},{default:a(()=>[t("PURISTA API")]),_:1}),t(" / "),d(r,{to:"/api/modules.html"},{default:a(()=>[t("Modules")]),_:1}),t(" / "),d(r,{to:"/api/modules/purista_amqpbridge.html"},{default:a(()=>[t("@purista/amqpbridge")]),_:1}),t(" / AmqpBridge")]),p,e("p",null,[d(r,{to:"/api/modules/purista_amqpbridge.html"},{default:a(()=>[t("@purista/amqpbridge")]),_:1}),t(".AmqpBridge")]),g,e("ul",null,[e("li",null,[e("p",null,[m,t("<"),d(r,{to:"/api/modules/purista_amqpbridge.html#amqpbridgeconfig"},{default:a(()=>[u]),_:1}),t(">")]),f])]),b,e("ul",null,[e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#constructor"},{default:a(()=>[t("constructor")]),_:1})])]),y,e("ul",null,[e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#channel"},{default:a(()=>[t("channel")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#config"},{default:a(()=>[t("config")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#connection"},{default:a(()=>[t("connection")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#consumertags"},{default:a(()=>[t("consumerTags")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#defaultcommandtimeout"},{default:a(()=>[t("defaultCommandTimeout")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#encoder"},{default:a(()=>[t("encoder")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#encrypter"},{default:a(()=>[t("encrypter")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#healthy"},{default:a(()=>[t("healthy")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#instanceid"},{default:a(()=>[t("instanceId")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#logger"},{default:a(()=>[t("logger")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#name"},{default:a(()=>[t("name")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#pendinginvocations"},{default:a(()=>[t("pendingInvocations")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#ready"},{default:a(()=>[t("ready")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#replyqueuename"},{default:a(()=>[t("replyQueueName")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#runningsubscriptioncount"},{default:a(()=>[t("runningSubscriptionCount")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#servicefunctions"},{default:a(()=>[t("serviceFunctions")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#subscriptions"},{default:a(()=>[t("subscriptions")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#traceprovider"},{default:a(()=>[t("traceProvider")]),_:1})])]),_,e("ul",null,[e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#decodecontent"},{default:a(()=>[t("decodeContent")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#destroy"},{default:a(()=>[t("destroy")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#emit"},{default:a(()=>[t("emit")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#emitmessage"},{default:a(()=>[t("emitMessage")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#encodecontent"},{default:a(()=>[t("encodeContent")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#gettracer"},{default:a(()=>[t("getTracer")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#invoke"},{default:a(()=>[t("invoke")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#ishealthy"},{default:a(()=>[t("isHealthy")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#isready"},{default:a(()=>[t("isReady")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#off"},{default:a(()=>[t("off")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#on"},{default:a(()=>[t("on")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#registercommand"},{default:a(()=>[t("registerCommand")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#registersubscription"},{default:a(()=>[t("registerSubscription")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#removealllisteners"},{default:a(()=>[t("removeAllListeners")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#start"},{default:a(()=>[t("start")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#startactivespan"},{default:a(()=>[t("startActiveSpan")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#unregistercommand"},{default:a(()=>[t("unregisterCommand")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#unregistersubscription"},{default:a(()=>[t("unregisterSubscription")]),_:1})]),e("li",null,[d(r,{to:"/api/classes/purista_amqpbridge.AmqpBridge.html#wrapinspan"},{default:a(()=>[t("wrapInSpan")]),_:1})])]),x,e("table",null,[v,e("tbody",null,[q,B,e("tr",null,[A,e("td",k,[d(r,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:a(()=>[E]),_:1})]),T]),e("tr",null,[I,e("td",P,[d(r,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:a(()=>[C]),_:1})]),w]),N,D,L,R,M,S,O,V,K])]),F,Q,H,e("p",null,[e("a",j,[t("amqpbridge/src/AmqpBridge.impl.ts:99"),d(n)])]),G,e("p",null,[e("a",U,[t("amqpbridge/src/AmqpBridge.impl.ts:63"),d(n)])]),z,J,e("p",null,[t("• "),W,t(": "),X,t("<{ "),Y,t(": "),Z,t(" ; "),$,t(": "),d(r,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:a(()=>[ee]),_:1}),t(" ; "),te,t(": "),d(r,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:a(()=>[de]),_:1}),t(" ; "),re,t(": "),ae,t(" ; "),oe,t(": "),ne,t(" ; "),ie,t(": "),ce,t(" ; "),se,t(": "),le,t(" ; "),he,t(": "),pe,t(" ; "),ge,t(": "),me,t(" ; "),ue,t(": "),fe,t(" ; "),be,t(": "),ye,t(" ; "),_e,t(": "),xe,t(" | "),ve,t(" }>")]),qe,e("p",null,[e("a",Be,[t("amqpbridge/src/AmqpBridge.impl.ts:62"),d(n)])]),Ae,e("p",null,[e("a",ke,[t("amqpbridge/src/AmqpBridge.impl.ts:68"),d(n)])]),Ee,e("p",null,[t("• "),Te,t(),Ie,t(": "),d(r,{to:"/api/modules/purista_amqpbridge.html#encoder"},{default:a(()=>[Pe]),_:1})]),Ce,e("p",null,[e("a",we,[t("amqpbridge/src/AmqpBridge.impl.ts:91"),d(n)])]),Ne,De,e("p",null,[t("• "),Le,t(),Re,t(": "),d(r,{to:"/api/modules/purista_amqpbridge.html#encrypter"},{default:a(()=>[Me]),_:1})]),Se,e("p",null,[e("a",Oe,[t("amqpbridge/src/AmqpBridge.impl.ts:95"),d(n)])]),Ve,e("p",null,[e("a",Ke,[t("amqpbridge/src/AmqpBridge.impl.ts:65"),d(n)])]),Fe,e("p",null,[e("a",Qe,[t("amqpbridge/src/AmqpBridge.impl.ts:79"),d(n)])]),He,e("p",null,[e("a",je,[t("amqpbridge/src/AmqpBridge.impl.ts:66"),d(n)])]),Ge,e("p",null,[e("a",Ue,[t("amqpbridge/src/AmqpBridge.impl.ts:70"),d(n)])]),ze,e("p",null,[e("a",Je,[t("amqpbridge/src/AmqpBridge.impl.ts:81"),d(n)])]),We,e("p",null,[e("a",Xe,[t("amqpbridge/src/AmqpBridge.impl.ts:71"),d(n)])]),Ye,e("p",null,[e("a",Ze,[t("amqpbridge/src/AmqpBridge.impl.ts:83"),d(n)])]),$e,e("p",null,[e("a",et,[t("amqpbridge/src/AmqpBridge.impl.ts:811"),d(n)])]),tt,e("p",null,[e("a",dt,[t("amqpbridge/src/AmqpBridge.impl.ts:826"),d(n)])]),rt,e("p",null,[e("a",at,[t("amqpbridge/src/AmqpBridge.impl.ts:273"),d(n)])]),ot,e("p",null,[e("a",nt,[t("amqpbridge/src/AmqpBridge.impl.ts:790"),d(n)])]),it,e("p",null,[e("a",ct,[t("amqpbridge/src/AmqpBridge.impl.ts:347"),d(n)])]),st,e("p",null,[e("a",lt,[t("amqpbridge/src/AmqpBridge.impl.ts:122"),d(n)])]),ht,e("p",null,[e("a",pt,[t("amqpbridge/src/AmqpBridge.impl.ts:118"),d(n)])]),gt,e("p",null,[e("a",mt,[t("amqpbridge/src/AmqpBridge.impl.ts:464"),d(n)])]),ut,e("p",null,[e("a",ft,[t("amqpbridge/src/AmqpBridge.impl.ts:645"),d(n)])]),bt,e("p",null,[e("a",yt,[t("amqpbridge/src/AmqpBridge.impl.ts:129"),d(n)])]),_t,e("p",null,[e("a",xt,[t("amqpbridge/src/AmqpBridge.impl.ts:626"),d(n)])]),vt,e("p",null,[e("a",qt,[t("amqpbridge/src/AmqpBridge.impl.ts:764"),d(n)])]),Bt])}const Pt=c(h,[["render",At],["__file","purista_amqpbridge.AmqpBridge.html.vue"]]);export{Pt as default};
