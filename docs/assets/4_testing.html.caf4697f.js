import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,a as e}from"./app.3f3b1b0c.js";const t={},p=e(`<h1 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h1><p>Testing is one of the most love-hate-stories for developers.<br> It&#39;s always balancing between quick delivery, highly automated tests and catching each edge case and of course available time/money.</p><p>Testing does not come for free and you need time for it and as we all know: time is money.</p><p>So, how can PURISTA help here?</p><p>First of all, because of it&#39;s concept and core design.<br> As there are schema validations in each service function for input and output, we avoid a lot edge cases upfront.<br> You do not need to test, what happens, if there is some wrong input.<br> Also, you do not need to take care to prevent data leaks if something fails. It&#39;s clear, it&#39;s defined and nothing a developer needs to implement and test over and over again. So, just put a \u2705 on this topic.</p><p>We can be pretty sure, that there is wrong input data cascaded through the system.</p><p>Plus: We use typescript and types generated out of schema.<br> So we avoid a lot of issues again.<br> We do not struggle if there is one change on the one end, that unexpectedly something breaks at the other end.<br> Linter and typescript are your friend.<br> Next \u2705 we have.</p><p>Second big thing to point out here:<br> We can build real complex systems, but we write most of the time only simple, encapsulated functions, which are following the same design pattern.<br> We have always defined, validated input and always defined, validated output. Input and Output validation + propper error response = \u2705</p><p>We also do not need to think about edge cases like &quot;what happens if something inside a function throws&quot;.<br> We already now it - it&#39;s catched, logged and handled with a defined error response. Unhandled, unexpected errors = \u2705</p><p>This means we can more focus on testing single functions.<br> Just prove the business logic, instead of proving correct code.</p><h2 id="mocks" tabindex="-1"><a class="header-anchor" href="#mocks" aria-hidden="true">#</a> Mocks</h2><p>PURISTA comes with some simple mocks, which should developers help to write tests fast and simple.</p><p>Currently there are mocks available for:</p><ul><li>Eventbridge</li><li>Logger</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Service function to test:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> MyService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../MyService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InputParameterType<span class="token punctuation">,</span> InputPayloadType<span class="token punctuation">,</span> OutputPayloadType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>

 <span class="token keyword">import</span> <span class="token punctuation">{</span> 
   InputPayloadType <span class="token keyword">as</span> InvokeRequestPayloadType<span class="token punctuation">,</span> 
   InputParameterType <span class="token keyword">as</span> InvokeRequestParameterType<span class="token punctuation">,</span>
   OutputPayloadType <span class="token keyword">as</span> InvokeResultPayloadType  
  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../../OtherService/commands/otherServiceFunction/schema&#39;</span>


<span class="token keyword">export</span> <span class="token keyword">const</span> myFunction<span class="token operator">:</span> CommandFunction<span class="token operator">&lt;</span>MyService<span class="token punctuation">,</span> InputPayloadType<span class="token punctuation">,</span> InputParameterType<span class="token punctuation">,</span> OutputPayloadType<span class="token operator">&gt;</span> <span class="token operator">=</span>
  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>payload<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// your logic does some stuff with payload and extract parameters</span>

    <span class="token keyword">const</span> invokePayload<span class="token operator">:</span> InvokeRequestPayloadType <span class="token operator">=</span> <span class="token punctuation">{</span>
      complex<span class="token operator">:</span> <span class="token punctuation">{</span>
        payload<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> invokeParameter<span class="token operator">:</span> InvokeRequestParameterType <span class="token operator">=</span> <span class="token punctuation">{</span>
      paramOne<span class="token operator">:</span> <span class="token string">&#39;value param 1&#39;</span><span class="token punctuation">,</span>
      paramTwo<span class="token operator">:</span> <span class="token string">&#39;value param 2&#39;</span><span class="token punctuation">,</span>
      key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// invoke some other service function</span>
    <span class="token keyword">const</span> invokeResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span>InvokeResultPayloadType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      receiver<span class="token operator">:</span> <span class="token punctuation">{</span>
        serviceName<span class="token operator">:</span> <span class="token string">&#39;OtherService&#39;</span><span class="token punctuation">,</span>
        serviceTarget<span class="token operator">:</span> <span class="token string">&#39;otherServiceFunction&#39;</span><span class="token punctuation">,</span>
        serviceVersion<span class="token operator">:</span> <span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      command<span class="token operator">:</span> <span class="token punctuation">{</span>
        payload<span class="token operator">:</span> invokePayload<span class="token punctuation">,</span>
        parameter<span class="token operator">:</span> invokeParameter<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// do stuff with in invokeResult</span>

    <span class="token comment">// return the result of our function</span>
    <span class="token keyword">return</span> returnPayload
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be tested this way:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Command<span class="token punctuation">,</span> ErrorCode<span class="token punctuation">,</span> getEventBridgeMock<span class="token punctuation">,</span> getLoggerMock<span class="token punctuation">,</span> UnhandledError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> InputParameterType<span class="token punctuation">,</span> InputPayloadType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../MyService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> &#39;<span class="token punctuation">.</span><span class="token operator">/</span>myFunction
<span class="token keyword">import</span> Sinon <span class="token keyword">from</span> <span class="token string">&#39;sinon&#39;</span>


<span class="token keyword">let</span> service<span class="token operator">:</span> MyService
<span class="token keyword">let</span> message<span class="token operator">:</span> Command<span class="token operator">&lt;</span>InputPayloadType<span class="token punctuation">,</span> InputParameterType<span class="token operator">&gt;</span>
<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token function">getLoggerMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getEventBridgeMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mock<span class="token punctuation">)</span>
  message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Command<span class="token operator">&lt;</span>InputPayloadType<span class="token punctuation">,</span> InputParameterType<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;works&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> payload<span class="token operator">:</span> InputPayloadType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// add your test input payload data</span>
  <span class="token punctuation">}</span> 

  <span class="token keyword">const</span> parameter<span class="token operator">:</span> InputParameterType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// add your test input parameter data</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> invokeStub <span class="token operator">=</span> Sinon<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span><span class="token string">&#39;invoke&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolves</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// add the test data response you expect from OtherService otherServiceFunction</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> fnToTest <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fnToTest</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> message<span class="token punctuation">)</span>

  invokeStub<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span>
  
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should return a unhandled error if invoked function throws&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> payload<span class="token operator">:</span> InputPayloadType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// add your test input payload data</span>
  <span class="token punctuation">}</span> 

  <span class="token keyword">const</span> parameter<span class="token operator">:</span> InputParameterType <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// add your test input parameter data</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> invokeStub <span class="token operator">=</span> Sinon<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span><span class="token string">&#39;invoke&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rejects</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>&#39;Some error<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> fnToTest <span class="token operator">=</span> <span class="token function">myFunction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>

  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span> <span class="token function">fnToTest</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>ErrorCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> <span class="token function">getErrorMessageForCode</span><span class="token punctuation">(</span>ErrorCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>

  invokeStub<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, you just need to call your function with some input values and maybe mock invocations of other functions.</p><p>There are no unknowns, dependency injections, side effects from other functions if you keep your functions as simple as possible, stateless and separated into many little pieces.</p><p>With this approach, testing becomes real simple, powerfull and reduces the time/costs to a minimum.</p>`,22),o=[p];function c(i,l){return s(),a("div",null,o)}var d=n(t,[["render",c],["__file","4_testing.html.vue"]]);export{d as default};
