import{_ as o,c as i,o as a,ag as t}from"./chunks/framework.U_AETC1W.js";const h=JSON.parse('{"title":"Logging","description":"Logging in typescript backend framework PURISTA","frontmatter":{"title":"Logging","description":"Logging in typescript backend framework PURISTA","order":204010},"headers":[],"relativePath":"handbook/2_building_business-logic/logging.md","filePath":"handbook/2_building_business-logic/logging.md","lastUpdated":1707652430000}'),r={name:"handbook/2_building_business-logic/logging.md"};function l(s,e,n,d,c,g){return a(),i("div",null,e[0]||(e[0]=[t('<h1 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">â€‹</a></h1><p>PURISTA provides logging as integral part. Per default, <a href="https://getpino.io/" target="_blank" rel="noreferrer">pino</a> is used under the hood as logging library.</p><p>This means, during development you are able to use <a href="https://github.com/pinojs/pino-pretty" target="_blank" rel="noreferrer">pino-pretty</a> for better human readable console log output.</p><p>But you can in theory use any logging library. There is only the need to build a simple wrapper. This wrapper should be a class which extends <code>Logger</code> from <code>@purista/core</code>. See <code>DefaultLogger.ts</code> in core package.</p><p>The logger is expected to log:</p><ul><li>serviceName</li><li>serviceVersion</li><li>serviceTarget (available logged in context of a command or subscription)</li><li>principalId (if available)</li><li>tenantId (if available)</li><li>traceId (custom traceId)</li><li>OpenTelemetry traces</li></ul><p>When messages are logged - the message payload will be removed to prevent leaking of data.</p><p>To log errors with stacktrace correctly, you should log them as <code>err</code>.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ err }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my own error message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>You <strong>should not use</strong> <code>traceId</code>, <code>spanId</code>, <code>parentId</code>, <code>parentSpanId</code>, <code>traceFlags</code> or <code>principalId</code> as property of the logging object. This might overwrite automatically added log information.</p><p>Available log levels are <code>info</code>, <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>debug</code> and <code>trace</code>.</p><p>Internally, PURISTA tries to cover these use cases with different log levels:</p><ul><li><code>info</code> = general information like used port, service status and so on</li><li><code>fatal</code> = if a service is unable to start at all</li><li><code>error</code> = if some unexpected/unhandled error occurs like a command function is throwing</li><li><code>warning</code> = if for example a http request fails because of input validation</li><li><code>debug</code> = general framework flow information which should not be logged in production</li><li><code>trace</code> = detailed raw data mainly of third party plugins</li></ul><p>In production, log level <code>warn</code> is recommended.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Service instances will create a own logger</p></div>',15)]))}const u=o(r,[["render",l]]);export{h as __pageData,u as default};
