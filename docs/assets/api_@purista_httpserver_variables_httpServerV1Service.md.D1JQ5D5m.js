import{_ as o,c,o as d,ag as t}from"./chunks/framework.U_AETC1W.js";const u=JSON.parse('{"title":"Variable: httpServerV1Service","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/httpserver/variables/httpServerV1Service.md","filePath":"api/@purista/httpserver/variables/httpServerV1Service.md","lastUpdated":1740066608000}'),r={name:"api/@purista/httpserver/variables/httpServerV1Service.md"};function a(s,e,n,i,l,p){return d(),c("div",null,e[0]||(e[0]=[t('<p><a href="./../README.html"><strong>@purista/httpserver v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/httpserver</a> / httpServerV1Service</p><h1 id="variable-httpserverv1service" tabindex="-1">Variable: <s>httpServerV1Service</s> <a class="header-anchor" href="#variable-httpserverv1service" aria-label="Permalink to &quot;Variable: ~~httpServerV1Service~~&quot;">â€‹</a></h1><blockquote><p><code>const</code> <strong>httpServerV1Service</strong>: <a href="./../../core/classes/ServiceBuilder.html"><code>ServiceBuilder</code></a>&lt;<a href="./../../core/type-aliases/SetNewTypeValue.html"><code>SetNewTypeValue</code></a>&lt;<a href="./../../core/type-aliases/SetNewTypeValues.html"><code>SetNewTypeValues</code></a>&lt;<a href="./../../core/type-aliases/ServiceBuilderTypes.html"><code>ServiceBuilderTypes</code></a>, { <code>ConfigInputType</code>: { <code>apiMountPath</code>: <code>string</code>; <code>compressOptions</code>: <code>any</code>; <code>cookieSecret</code>: <code>string</code>; <code>corsOptions</code>: <code>any</code>; <code>domain</code>: <code>string</code>; <code>enableCompress</code>: <code>boolean</code>; <code>enableCors</code>: <code>boolean</code>; <code>enableHealthz</code>: <code>boolean</code>; <code>enableHelmet</code>: <code>boolean</code>; <code>fastify</code>: <code>any</code>; <code>healthzFunction</code>: (...<code>args</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>helmetOptions</code>: { <code>enableCSPNonces</code>: <code>boolean</code>; <code>global</code>: <code>boolean</code>; }; <code>host</code>: <code>string</code>; <code>logLevel</code>: <code>&quot;info&quot;</code> | <code>&quot;error&quot;</code> | <code>&quot;warn&quot;</code> | <code>&quot;debug&quot;</code> | <code>&quot;trace&quot;</code> | <code>&quot;fatal&quot;</code>; <code>openApi</code>: { <code>components</code>: <code>any</code>; <code>enabled</code>: <code>boolean</code>; <code>externalDocs</code>: { <code>description</code>: <code>string</code>; <code>url</code>: <code>string</code>; }; <code>info</code>: { <code>contact</code>: { <code>email</code>: ... | ...; <code>name</code>: ... | ...; <code>url</code>: ... | ...; }; <code>description</code>: <code>string</code>; <code>license</code>: { <code>name</code>: <code>string</code>; <code>url</code>: ... | ...; }; <code>termsOfService</code>: <code>string</code>; <code>title</code>: <code>string</code>; <code>version</code>: <code>string</code>; }; <code>path</code>: <code>string</code>; <code>paths</code>: <code>Record</code>&lt;<code>string</code>, <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;&gt;; <code>security</code>: <code>any</code>[]; <code>servers</code>: <code>object</code>[]; <code>tags</code>: <code>object</code>[]; }; <code>port</code>: <code>number</code>; <code>traceHeaderField</code>: <code>string</code>; <code>uploadDir</code>: <code>string</code>; }; <code>ConfigType</code>: { <code>apiMountPath</code>: <code>string</code>; <code>compressOptions</code>: <code>any</code>; <code>cookieSecret</code>: <code>string</code>; <code>corsOptions</code>: <code>any</code>; <code>domain</code>: <code>string</code>; <code>enableCompress</code>: <code>boolean</code>; <code>enableCors</code>: <code>boolean</code>; <code>enableHealthz</code>: <code>boolean</code>; <code>enableHelmet</code>: <code>boolean</code>; <code>fastify</code>: <code>any</code>; <code>healthzFunction</code>: (...<code>args</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>helmetOptions</code>: { <code>enableCSPNonces</code>: <code>boolean</code>; <code>global</code>: <code>boolean</code>; }; <code>host</code>: <code>string</code>; <code>logLevel</code>: <code>&quot;info&quot;</code> | <code>&quot;error&quot;</code> | <code>&quot;warn&quot;</code> | <code>&quot;debug&quot;</code> | <code>&quot;trace&quot;</code> | <code>&quot;fatal&quot;</code>; <code>openApi</code>: { <code>components</code>: <code>any</code>; <code>enabled</code>: <code>boolean</code>; <code>externalDocs</code>: { <code>description</code>: <code>string</code>; <code>url</code>: <code>string</code>; }; <code>info</code>: { <code>contact</code>: { <code>email</code>: ... | ...; <code>name</code>: ... | ...; <code>url</code>: ... | ...; }; <code>description</code>: <code>string</code>; <code>license</code>: { <code>name</code>: <code>string</code>; <code>url</code>: ... | ...; }; <code>termsOfService</code>: <code>string</code>; <code>title</code>: <code>string</code>; <code>version</code>: <code>string</code>; }; <code>path</code>: <code>string</code>; <code>paths</code>: <code>Record</code>&lt;<code>string</code>, <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;&gt;; <code>security</code>: <code>any</code>[]; <code>servers</code>: <code>object</code>[]; <code>tags</code>: <code>object</code>[]; }; <code>port</code>: <code>number</code>; <code>traceHeaderField</code>: <code>string</code>; <code>uploadDir</code>: <code>string</code>; }; <code>ServiceClassType</code>: <a href="./../../core/classes/Service.html"><code>Service</code></a>&lt;<a href="./../../core/type-aliases/ServiceClassTypes.html"><code>ServiceClassTypes</code></a>&lt;{ <code>apiMountPath</code>: <code>string</code>; <code>compressOptions</code>: <code>any</code>; <code>cookieSecret</code>: <code>string</code>; <code>corsOptions</code>: <code>any</code>; <code>domain</code>: <code>string</code>; <code>enableCompress</code>: <code>boolean</code>; <code>enableCors</code>: <code>boolean</code>; <code>enableHealthz</code>: <code>boolean</code>; <code>enableHelmet</code>: <code>boolean</code>; <code>fastify</code>: <code>any</code>; <code>healthzFunction</code>: (...<code>args</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>helmetOptions</code>: { <code>enableCSPNonces</code>: <code>boolean</code>; <code>global</code>: <code>boolean</code>; }; <code>host</code>: <code>string</code>; <code>logLevel</code>: <code>&quot;info&quot;</code> | <code>&quot;error&quot;</code> | <code>&quot;warn&quot;</code> | <code>&quot;debug&quot;</code> | <code>&quot;trace&quot;</code> | <code>&quot;fatal&quot;</code>; <code>openApi</code>: { <code>components</code>: <code>any</code>; <code>enabled</code>: <code>boolean</code>; <code>externalDocs</code>: { <code>description</code>: ...; <code>url</code>: ...; }; <code>info</code>: { <code>contact</code>: ... | ...; <code>description</code>: <code>string</code>; <code>license</code>: ... | ...; <code>termsOfService</code>: ... | ...; <code>title</code>: <code>string</code>; <code>version</code>: <code>string</code>; }; <code>path</code>: <code>string</code>; <code>paths</code>: <code>Record</code>&lt;..., ...&gt;; <code>security</code>: ...[]; <code>servers</code>: ...[]; <code>tags</code>: ...[]; }; <code>port</code>: <code>number</code>; <code>traceHeaderField</code>: <code>string</code>; <code>uploadDir</code>: <code>string</code>; }, <a href="./../../core/type-aliases/EmptyObject.html"><code>EmptyObject</code></a>&gt;&gt;; }&gt;, <code>&quot;ServiceClassType&quot;</code>, <code>HttpServerClass</code>&lt;{ <code>apiMountPath</code>: <code>string</code>; <code>compressOptions</code>: <code>any</code>; <code>cookieSecret</code>: <code>string</code>; <code>corsOptions</code>: <code>any</code>; <code>domain</code>: <code>string</code>; <code>enableCompress</code>: <code>boolean</code>; <code>enableCors</code>: <code>boolean</code>; <code>enableHealthz</code>: <code>boolean</code>; <code>enableHelmet</code>: <code>boolean</code>; <code>fastify</code>: <code>any</code>; <code>healthzFunction</code>: (...<code>args</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>helmetOptions</code>: { <code>enableCSPNonces</code>: <code>boolean</code>; <code>global</code>: <code>boolean</code>; }; <code>host</code>: <code>string</code>; <code>logLevel</code>: <code>&quot;info&quot;</code> | <code>&quot;error&quot;</code> | <code>&quot;warn&quot;</code> | <code>&quot;debug&quot;</code> | <code>&quot;trace&quot;</code> | <code>&quot;fatal&quot;</code>; <code>openApi</code>: { <code>components</code>: <code>any</code>; <code>enabled</code>: <code>boolean</code>; <code>externalDocs</code>: { <code>description</code>: <code>string</code>; <code>url</code>: <code>string</code>; }; <code>info</code>: { <code>contact</code>: { <code>email</code>: <code>string</code>; <code>name</code>: <code>string</code>; <code>url</code>: <code>string</code>; }; <code>description</code>: <code>string</code>; <code>license</code>: { <code>name</code>: <code>string</code>; <code>url</code>: <code>string</code>; }; <code>termsOfService</code>: <code>string</code>; <code>title</code>: <code>string</code>; <code>version</code>: <code>string</code>; }; <code>path</code>: <code>string</code>; <code>paths</code>: <code>Record</code>&lt;<code>string</code>, <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;&gt;; <code>security</code>: <code>any</code>[]; <code>servers</code>: <code>object</code>[]; <code>tags</code>: <code>object</code>[]; }; <code>port</code>: <code>number</code>; <code>traceHeaderField</code>: <code>string</code>; <code>uploadDir</code>: <code>string</code>; }&gt;&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/httpserver/src/service/httpServer/v1/httpServerV1Service.ts#L19" target="_blank" rel="noreferrer">packages/httpserver/src/service/httpServer/v1/httpServerV1Service.ts:19</a></p><h2 id="deprecated" tabindex="-1">Deprecated <a class="header-anchor" href="#deprecated" aria-label="Permalink to &quot;Deprecated&quot;">â€‹</a></h2><p>Since version 1.10.0. Use {@purista/hono-http-server} instead.</p>',8)]))}const h=o(r,[["render",a]]);export{u as __pageData,h as default};
