import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,b as n,d as s,e as a,w as o,a as u}from"./app-2c9217f0.js";const r={},k=n("p",null,[s("State stores are essential for scaling."),n("br"),s(" Decoupling the business logic from the actual used state store, allows the usage of different databases or vendor solutions."),n("br"),s(" The state store is a simple interface to a key-value-store. They key must be a string and the value can be any type which can be serialized via JSON stringify/parse.")],-1),d=n("h2",{id:"available-state-stores",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#available-state-stores","aria-hidden":"true"},"#"),s(" Available state stores")],-1),v=n("thead",null,[n("tr",null,[n("th",null,"vendor"),n("th",null,"package")])],-1),m={href:"https://redis.io",target:"_blank",rel:"noopener noreferrer"},b={href:"https://dapr.io",target:"_blank",rel:"noopener noreferrer"},g=u(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>The state store is provided inside the <code>context</code> of command functions and subscription functions.<br> It can be used like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">setCommandFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// set a config</span>
  <span class="token keyword">await</span> context<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;port&#39;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>

  <span class="token comment">// get a config</span>
  <span class="token keyword">const</span> myState <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;hostUrl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;port&#39;</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myState<span class="token punctuation">)</span> <span class="token comment">// outputs: { hostUrl: &quot;http://example.com&quot;, port: 8080 }</span>

  <span class="token comment">// remove a config</span>
  <span class="token keyword">await</span> context<span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">removeState</span><span class="token punctuation">(</span><span class="token string">&#39;port&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><strong>Use schemas to validate</strong><br> A production ready approach is, to validate the result of store getters against a schema.<br> It validates the returned values and gives you proper types for further usage in one step.<br> As an example:</p></div><h2 id="custom-state-store" tabindex="-1"><a class="header-anchor" href="#custom-state-store" aria-hidden="true">#</a> Custom state store</h2><p>It is quite simple to build a custom state store.<br> You can simply extend the <code>StateStoreBaseClass</code> with type parameter of your custom store config.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> StateStoreBaseClass<span class="token punctuation">,</span> UnhandledError<span class="token punctuation">,</span> StatusCode<span class="token punctuation">,</span> StoreBaseConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">CustomStoreConfig</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomStore</span> <span class="token keyword">extends</span> <span class="token class-name">StateStoreBaseClass<span class="token operator">&lt;</span>CustomStoreConfig<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> client

  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> StoreBaseConfig<span class="token operator">&lt;</span>CustomStoreConfig<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;CustomStoreName&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> options<span class="token punctuation">)</span>

    <span class="token comment">// your custom logic goes here:</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> customCLient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token operator">...</span>stateNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>enableGet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">,</span> <span class="token string">&#39;get state from store is disabled by config&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> result<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">of</span> stateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// your custom logic goes here:</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error in state store getting value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result

  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">removeState</span><span class="token punctuation">(</span>stateName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>enableRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">,</span> <span class="token string">&#39;remove state from store is disabled by config&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// your custom logic goes here:</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>stateName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error in state store removing value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">setState</span><span class="token punctuation">(</span>stateName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> stateValue<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>enableSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">,</span> <span class="token string">&#39;set state at store is disabled by config&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// your custom logic goes here:</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stateName<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>stateValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error in state store setting value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function y(h,w){const t=p("ExternalLinkIcon"),e=p("RouterLink");return i(),l("div",null,[k,d,n("table",null,[v,n("tbody",null,[n("tr",null,[n("td",null,[n("a",m,[s("Redis"),a(t)])]),n("td",null,[a(e,{to:"/api/modules/purista_redis_state_store.html"},{default:o(()=>[s("@purista/redis-state-store")]),_:1})])]),n("tr",null,[n("td",null,[n("a",b,[s("Dapr"),a(t)])]),n("td",null,[a(e,{to:"/handbook/7._deployment/4_dapr.html"},{default:o(()=>[s("@purista/dapr-sdk")]),_:1})])])])]),g])}const S=c(r,[["render",y],["__file","3_state_store.html.vue"]]);export{S as default};
