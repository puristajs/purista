import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as l,b as e,e as d,w as r,d as t,a as n}from"./app-ccf1f840.js";const h={},g=e("h1",{id:"class-natsbridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-natsbridge","aria-hidden":"true"},"#"),t(" Class: NatsBridge")],-1),p=n(`<p>The event bridge supports brokers with and without JetStream enabled.</p><p>If JetStream is enabled, subscriptions which are marked as durable are persisted by using JetStream.<br> If JetStream is not available, subscription fall back to live-subscriptions without any persistence.</p><p>Example usage:</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NatsBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/natsbridge&#39;</span>

<span class="token comment">// create and init our eventbridge</span>
  <span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NatsBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a> Hierarchy</h2>`,6),f=e("code",null,"EventBridgeBaseClass",-1),u=e("code",null,"NatsBridgeConfig",-1),m=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"NatsBridge")])],-1),b=n('<h2 id="implements" tabindex="-1"><a class="header-anchor" href="#implements" aria-hidden="true">#</a> Implements</h2><ul><li><code>EventBridge</code></li></ul><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',4),y=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),x=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),v=n('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new NatsBridge</strong>(<code>config?</code>)</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>config?</code></td><td style="text-align:left;"><code>Object</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>config.commandResponsePublishTwice?</code></td><td style="text-align:left;"><code>&quot;always&quot;</code> | <code>&quot;never&quot;</code> | <code>&quot;eventOnly&quot;</code> | <code>&quot;eventAndError&quot;</code></td><td style="text-align:left;">Indicates if a command response should be published a second time. If the command response gets published, it will be published to the regular topic pattern. If set to <code>never</code>, subscription might not get messages they are expecting because of the timing. If set to <code>always</code>, every command response is published. Because there might not be a consumer for every message, the broker will store the messages until the <code>defaultMessageExpiryInterval</code> is reached. This might result in a high ressource consumption of the broker. If set to <code>eventOnly</code>, only success responses which have a event name set, are published twice. There, we expect, that an event has at least one consumer subscription and the broker does not unnecessarily stores messages for a long time. <strong><code>Default</code></strong> <code>ts eventOnly </code></td></tr><tr><td style="text-align:left;"><code>config.defaultCommandTimeout?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Overwrite the hardcoded default timeout of command invocations</td></tr><tr><td style="text-align:left;"><code>config.defaultMessageExpiryInterval?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">the message expiry interval in seconds <strong><code>Default</code></strong> <code>ts 30 days in seconds </code></td></tr><tr><td style="text-align:left;"><code>config.emptyTopicPartString?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The string which should be used in topics for parts, which are undefined <strong><code>Default</code></strong> <code>ts __none__ </code></td></tr><tr><td style="text-align:left;"><code>config.instanceId?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The instance id of the event bridge. If not set, a id will generated each time a instance is created. Use this if there is a need to always have the same instance id.</td></tr><tr><td style="text-align:left;"><code>config.logLevel?</code></td><td style="text-align:left;"><code>LogLevelName</code></td><td style="text-align:left;">If no logger instance is given, use this log level</td></tr><tr><td style="text-align:left;"><code>config.logger?</code></td><td style="text-align:left;"><code>Logger</code></td><td style="text-align:left;">A logger instance</td></tr><tr><td style="text-align:left;"><code>config.maxMessages?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">maximum messages to run in parallel per subscription 10 means, each subscription can handle 10 calls at the same time <strong><code>Default</code></strong> <code>ts 10 </code></td></tr><tr><td style="text-align:left;"><code>config.spanProcessor?</code></td><td style="text-align:left;"><code>SpanProcessor</code></td><td style="text-align:left;">A OpenTelemetry span processor</td></tr><tr><td style="text-align:left;"><code>config.topicPrefix?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix for topic to prevent name collisions <strong><code>Default</code></strong> <code>ts purista </code></td></tr></tbody></table><h4 id="overrides" tabindex="-1"><a class="header-anchor" href="#overrides" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass&lt;NatsBridgeConfig&amp;gt;.constructor</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4>',8),_={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L81",target:"_blank",rel:"noopener noreferrer"},B=n('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> commands</h3><p>• <strong>commands</strong>: <code>Map</code>&lt;<code>string</code>, <code>Subscription</code>&gt;</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4>',4),N={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L76",target:"_blank",rel:"noopener noreferrer"},k=n('<hr><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3><p>• <strong>config</strong>: <code>Complete</code>&lt;{ <code>commandResponsePublishTwice</code>: <code>&quot;always&quot;</code> | <code>&quot;never&quot;</code> | <code>&quot;eventOnly&quot;</code> | <code>&quot;eventAndError&quot;</code> ; <code>defaultCommandTimeout?</code>: <code>number</code> ; <code>defaultMessageExpiryInterval</code>: <code>number</code> ; <code>emptyTopicPartString</code>: <code>string</code> ; <code>instanceId?</code>: <code>string</code> ; <code>logLevel?</code>: <code>LogLevelName</code> ; <code>logger?</code>: <code>Logger</code> ; <code>maxMessages</code>: <code>number</code> ; <code>spanProcessor?</code>: <code>SpanProcessor</code> ; <code>topicPrefix</code>: <code>string</code> }&gt;</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.config</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:13</p><hr><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> connection</h3><p>• <strong>connection</strong>: <code>undefined</code> | <code>NatsConnection</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4>',11),E={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L70",target:"_blank",rel:"noopener noreferrer"},T=n('<hr><h3 id="defaultcommandtimeout" tabindex="-1"><a class="header-anchor" href="#defaultcommandtimeout" aria-hidden="true">#</a> defaultCommandTimeout</h3><p>• <strong>defaultCommandTimeout</strong>: <code>number</code></p><h4 id="implementation-of" tabindex="-1"><a class="header-anchor" href="#implementation-of" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.defaultCommandTimeout</p><h4 id="inherited-from-1" tabindex="-1"><a class="header-anchor" href="#inherited-from-1" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.defaultCommandTimeout</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:16</p><hr><h3 id="instanceid" tabindex="-1"><a class="header-anchor" href="#instanceid" aria-hidden="true">#</a> instanceId</h3><p>• <strong>instanceId</strong>: <code>string</code></p><h4 id="implementation-of-1" tabindex="-1"><a class="header-anchor" href="#implementation-of-1" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.instanceId</p><h4 id="inherited-from-2" tabindex="-1"><a class="header-anchor" href="#inherited-from-2" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.instanceId</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:15</p><hr><h3 id="isjetstreamenabled" tabindex="-1"><a class="header-anchor" href="#isjetstreamenabled" aria-hidden="true">#</a> isJetStreamEnabled</h3><p>• <strong>isJetStreamEnabled</strong>: <code>boolean</code> = <code>false</code></p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4>',22),I={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L72",target:"_blank",rel:"noopener noreferrer"},w=e("hr",null,null,-1),C=e("h3",{id:"jsm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jsm","aria-hidden":"true"},"#"),t(" jsm")],-1),P=e("p",null,[t("• "),e("strong",null,"jsm"),t(": "),e("code",null,"undefined"),t(" | "),e("code",null,"JetStreamManager")],-1),S=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),D={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L74",target:"_blank",rel:"noopener noreferrer"},q=n('<hr><h3 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> logger</h3><p>• <strong>logger</strong>: <code>Logger</code></p><h4 id="inherited-from-3" tabindex="-1"><a class="header-anchor" href="#inherited-from-3" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.logger</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:11</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <strong>name</strong>: <code>string</code></p><h4 id="implementation-of-2" tabindex="-1"><a class="header-anchor" href="#implementation-of-2" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.name</p><h4 id="inherited-from-4" tabindex="-1"><a class="header-anchor" href="#inherited-from-4" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.name</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:14</p><hr><h3 id="sc" tabindex="-1"><a class="header-anchor" href="#sc" aria-hidden="true">#</a> sc</h3><p>• <strong>sc</strong>: <code>Codec</code>&lt;<code>unknown</code>&gt;</p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4>',20),L={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L79",target:"_blank",rel:"noopener noreferrer"},R=n('<hr><h3 id="subscriptions" tabindex="-1"><a class="header-anchor" href="#subscriptions" aria-hidden="true">#</a> subscriptions</h3><p>• <strong>subscriptions</strong>: <code>Map</code>&lt;<code>string</code>, <code>Subscription</code>&gt;</p><h4 id="defined-in-11" tabindex="-1"><a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a> Defined in</h4>',4),M={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L77",target:"_blank",rel:"noopener noreferrer"},A=n('<hr><h3 id="traceprovider" tabindex="-1"><a class="header-anchor" href="#traceprovider" aria-hidden="true">#</a> traceProvider</h3><p>• <strong>traceProvider</strong>: <code>NodeTracerProvider</code></p><h4 id="inherited-from-5" tabindex="-1"><a class="header-anchor" href="#inherited-from-5" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.traceProvider</p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:12</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>▸ <strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-3" tabindex="-1"><a class="header-anchor" href="#implementation-of-3" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.destroy</p><h4 id="overrides-1" tabindex="-1"><a class="header-anchor" href="#overrides-1" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass.destroy</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4>',17),K={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L388",target:"_blank",rel:"noopener noreferrer"},O=n('<hr><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h3><p>▸ <strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>parameter?</code>): <code>void</code></p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>parameter?</code></td><td style="text-align:left;">{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-6" tabindex="-1"><a class="header-anchor" href="#inherited-from-6" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.emit</p><h4 id="defined-in-14" tabindex="-1"><a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:13</p><hr><h3 id="emitmessage" tabindex="-1"><a class="header-anchor" href="#emitmessage" aria-hidden="true">#</a> emitMessage</h3><p>▸ <strong>emitMessage</strong>&lt;<code>T</code>&gt;(<code>message</code>, <code>contentType?</code>, <code>contentEncoding?</code>): <code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>EBMessage</code></td></tr></tbody></table><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>message</code></td><td style="text-align:left;"><code>Omit</code>&lt;<code>EBMessage</code>, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td><td style="text-align:left;"><code>undefined</code></td></tr><tr><td style="text-align:left;"><code>contentType</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;application/json&#39;</code></td></tr><tr><td style="text-align:left;"><code>contentEncoding</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;utf-8&#39;</code></td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>Readonly</code>&lt;<code>EBMessage</code>&gt;&gt;</p><h4 id="implementation-of-4" tabindex="-1"><a class="header-anchor" href="#implementation-of-4" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.emitMessage</p><h4 id="defined-in-15" tabindex="-1"><a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a> Defined in</h4>',25),j={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L111",target:"_blank",rel:"noopener noreferrer"},V=n('<hr><h3 id="gettracer" tabindex="-1"><a class="header-anchor" href="#gettracer" aria-hidden="true">#</a> getTracer</h3><p>▸ <strong>getTracer</strong>(): <code>Tracer</code></p><p>Returns open telemetry tracer of this service</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>Tracer</code></p><p>Tracer</p><h4 id="inherited-from-7" tabindex="-1"><a class="header-anchor" href="#inherited-from-7" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.getTracer</p><h4 id="defined-in-16" tabindex="-1"><a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:23</p><hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>▸ <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>commandTimeout?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;messageType&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</td></tr><tr><td style="text-align:left;"><code>commandTimeout</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="implementation-of-5" tabindex="-1"><a class="header-anchor" href="#implementation-of-5" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.invoke</p><h4 id="defined-in-17" tabindex="-1"><a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a> Defined in</h4>',23),F={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L178",target:"_blank",rel:"noopener noreferrer"},J=n('<hr><h3 id="ishealthy" tabindex="-1"><a class="header-anchor" href="#ishealthy" aria-hidden="true">#</a> isHealthy</h3><p>▸ <strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-6" tabindex="-1"><a class="header-anchor" href="#implementation-of-6" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isHealthy</p><h4 id="defined-in-18" tabindex="-1"><a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a> Defined in</h4>',8),H={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L107",target:"_blank",rel:"noopener noreferrer"},G=n('<hr><h3 id="isready" tabindex="-1"><a class="header-anchor" href="#isready" aria-hidden="true">#</a> isReady</h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-7" tabindex="-1"><a class="header-anchor" href="#implementation-of-7" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.isReady</p><h4 id="defined-in-19" tabindex="-1"><a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a> Defined in</h4>',8),U={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L103",target:"_blank",rel:"noopener noreferrer"},z=n('<hr><h3 id="off" tabindex="-1"><a class="header-anchor" href="#off" aria-hidden="true">#</a> off</h3><p>▸ <strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-8" tabindex="-1"><a class="header-anchor" href="#inherited-from-8" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.off</p><h4 id="defined-in-20" tabindex="-1"><a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:12</p><hr><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> on</h3><p>▸ <strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>EventKey</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }&gt;</td></tr></tbody></table><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eventName</code></td><td style="text-align:left;"><code>K</code></td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><code>EventReceiver</code>&lt;{ <code>eventbridge-connected</code>: <code>never</code> ; <code>eventbridge-connection-error</code>: <code>unknown</code> ; <code>eventbridge-disconnected</code>: <code>never</code> ; <code>eventbridge-error</code>: <code>unknown</code> ; <code>eventbridge-reconnecting</code>: <code>never</code> }[<code>K</code>]&gt;</td></tr></tbody></table><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-9" tabindex="-1"><a class="header-anchor" href="#inherited-from-9" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.on</p><h4 id="defined-in-21" tabindex="-1"><a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:11</p><hr><h3 id="registercommand" tabindex="-1"><a class="header-anchor" href="#registercommand" aria-hidden="true">#</a> registerCommand</h3><p>▸ <strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> } | { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt;</td></tr><tr><td style="text-align:left;"><code>metadata</code></td><td style="text-align:left;"><code>CommandDefinitionMetadataBase</code></td></tr><tr><td style="text-align:left;"><code>eventBridgeConfig</code></td><td style="text-align:left;"><code>DefinitionEventBridgeConfig</code></td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-8" tabindex="-1"><a class="header-anchor" href="#implementation-of-8" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerCommand</p><h4 id="defined-in-22" tabindex="-1"><a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a> Defined in</h4>',36),Q={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L318",target:"_blank",rel:"noopener noreferrer"},W=n('<hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>▸ <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>subscription</code></td><td style="text-align:left;"><code>Subscription</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: <code>EBMessage</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-9" tabindex="-1"><a class="header-anchor" href="#implementation-of-9" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.registerSubscription</p><h4 id="defined-in-23" tabindex="-1"><a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a> Defined in</h4>',10),X={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L359",target:"_blank",rel:"noopener noreferrer"},Y=n('<hr><h3 id="removealllisteners" tabindex="-1"><a class="header-anchor" href="#removealllisteners" aria-hidden="true">#</a> removeAllListeners</h3><p>▸ <strong>removeAllListeners</strong>(): <code>void</code></p><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h4 id="inherited-from-10" tabindex="-1"><a class="header-anchor" href="#inherited-from-10" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.removeAllListeners</p><h4 id="defined-in-24" tabindex="-1"><a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/types/GenericEventEmitter.d.ts:14</p><hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>▸ <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-10" tabindex="-1"><a class="header-anchor" href="#implementation-of-10" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.start</p><h4 id="overrides-2" tabindex="-1"><a class="header-anchor" href="#overrides-2" aria-hidden="true">#</a> Overrides</h4><p>EventBridgeBaseClass.start</p><h4 id="defined-in-25" tabindex="-1"><a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a> Defined in</h4>',19),Z={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L90",target:"_blank",rel:"noopener noreferrer"},$=n('<hr><h3 id="startactivespan" tabindex="-1"><a class="header-anchor" href="#startactivespan" aria-hidden="true">#</a> startActiveSpan</h3><p>▸ <strong>startActiveSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start a child span for opentelemetry tracking</p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>context</code></td><td style="text-align:left;"><code>undefined</code> | <code>Context</code></td><td style="text-align:left;">optional context</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function to be executed within the span</td></tr></tbody></table><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-11" tabindex="-1"><a class="header-anchor" href="#inherited-from-11" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.startActiveSpan</p><h4 id="defined-in-26" tabindex="-1"><a class="header-anchor" href="#defined-in-26" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:32</p><hr><h3 id="unregistercommand" tabindex="-1"><a class="header-anchor" href="#unregistercommand" aria-hidden="true">#</a> unregisterCommand</h3><p>▸ <strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-11" tabindex="-1"><a class="header-anchor" href="#implementation-of-11" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterCommand</p><h4 id="defined-in-27" tabindex="-1"><a class="header-anchor" href="#defined-in-27" aria-hidden="true">#</a> Defined in</h4>',25),ee={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L348",target:"_blank",rel:"noopener noreferrer"},te=n('<hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>▸ <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-12" tabindex="-1"><a class="header-anchor" href="#implementation-of-12" aria-hidden="true">#</a> Implementation of</h4><p>EventBridge.unregisterSubscription</p><h4 id="defined-in-28" tabindex="-1"><a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a> Defined in</h4>',10),de={href:"https://github.com/sebastianwessel/purista/blob/master/packages/natsbridge/src/NatsBridge.ts#L375",target:"_blank",rel:"noopener noreferrer"},ae=n('<hr><h3 id="wrapinspan" tabindex="-1"><a class="header-anchor" href="#wrapinspan" aria-hidden="true">#</a> wrapInSpan</h3><p>▸ <strong>wrapInSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context?</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p><p>Start span for opentelemetry tracking on same level. The created span will not become the &quot;active&quot; span within opentelemetry!</p><p>This means during logging and similar the spanId of parent span is logged.</p><p>Use wrapInSpan for marking points in flow of one bigger function, but not to trace the program flow itself</p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of span</td></tr><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><code>SpanOptions</code></td><td style="text-align:left;">span options</td></tr><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;">(<code>span</code>: <code>Span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</td><td style="text-align:left;">function te be executed in the span</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>Context</code></td><td style="text-align:left;">span context</td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-12" tabindex="-1"><a class="header-anchor" href="#inherited-from-12" aria-hidden="true">#</a> Inherited from</h4><p>EventBridgeBaseClass.wrapInSpan</p><h4 id="defined-in-29" tabindex="-1"><a class="header-anchor" href="#defined-in-29" aria-hidden="true">#</a> Defined in</h4><p>core/lib/types/core/EventBridge/EventBridgeBaseClass.impl.d.ts:48</p>',17);function re(ne,oe){const a=i("RouterLink"),o=i("ExternalLinkIcon");return c(),l("div",null,[e("p",null,[d(a,{to:"/api/"},{default:r(()=>[t("PURISTA API")]),_:1}),t(" / "),d(a,{to:"/api/modules.html"},{default:r(()=>[t("Modules")]),_:1}),t(" / "),d(a,{to:"/api/modules/purista_natsbridge.html"},{default:r(()=>[t("@purista/natsbridge")]),_:1}),t(" / NatsBridge")]),g,e("p",null,[d(a,{to:"/api/modules/purista_natsbridge.html"},{default:r(()=>[t("@purista/natsbridge")]),_:1}),t(".NatsBridge")]),p,e("ul",null,[e("li",null,[e("p",null,[f,t("<"),d(a,{to:"/api/modules/purista_natsbridge.html#natsbridgeconfig"},{default:r(()=>[u]),_:1}),t(">")]),m])]),b,e("ul",null,[e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#constructor"},{default:r(()=>[t("constructor")]),_:1})])]),y,e("ul",null,[e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#commands"},{default:r(()=>[t("commands")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#config"},{default:r(()=>[t("config")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#connection"},{default:r(()=>[t("connection")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#defaultcommandtimeout"},{default:r(()=>[t("defaultCommandTimeout")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#instanceid"},{default:r(()=>[t("instanceId")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#isjetstreamenabled"},{default:r(()=>[t("isJetStreamEnabled")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#jsm"},{default:r(()=>[t("jsm")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#logger"},{default:r(()=>[t("logger")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#name"},{default:r(()=>[t("name")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#sc"},{default:r(()=>[t("sc")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#subscriptions"},{default:r(()=>[t("subscriptions")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#traceprovider"},{default:r(()=>[t("traceProvider")]),_:1})])]),x,e("ul",null,[e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#destroy"},{default:r(()=>[t("destroy")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#emit"},{default:r(()=>[t("emit")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#emitmessage"},{default:r(()=>[t("emitMessage")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#gettracer"},{default:r(()=>[t("getTracer")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#invoke"},{default:r(()=>[t("invoke")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#ishealthy"},{default:r(()=>[t("isHealthy")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#isready"},{default:r(()=>[t("isReady")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#off"},{default:r(()=>[t("off")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#on"},{default:r(()=>[t("on")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#registercommand"},{default:r(()=>[t("registerCommand")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#registersubscription"},{default:r(()=>[t("registerSubscription")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#removealllisteners"},{default:r(()=>[t("removeAllListeners")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#start"},{default:r(()=>[t("start")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#startactivespan"},{default:r(()=>[t("startActiveSpan")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#unregistercommand"},{default:r(()=>[t("unregisterCommand")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#unregistersubscription"},{default:r(()=>[t("unregisterSubscription")]),_:1})]),e("li",null,[d(a,{to:"/api/classes/purista_natsbridge.NatsBridge.html#wrapinspan"},{default:r(()=>[t("wrapInSpan")]),_:1})])]),v,e("p",null,[e("a",_,[t("natsbridge/src/NatsBridge.ts:81"),d(o)])]),B,e("p",null,[e("a",N,[t("natsbridge/src/NatsBridge.ts:76"),d(o)])]),k,e("p",null,[e("a",E,[t("natsbridge/src/NatsBridge.ts:70"),d(o)])]),T,e("p",null,[e("a",I,[t("natsbridge/src/NatsBridge.ts:72"),d(o)])]),w,C,P,S,e("p",null,[e("a",D,[t("natsbridge/src/NatsBridge.ts:74"),d(o)])]),q,e("p",null,[e("a",L,[t("natsbridge/src/NatsBridge.ts:79"),d(o)])]),R,e("p",null,[e("a",M,[t("natsbridge/src/NatsBridge.ts:77"),d(o)])]),A,e("p",null,[e("a",K,[t("natsbridge/src/NatsBridge.ts:388"),d(o)])]),O,e("p",null,[e("a",j,[t("natsbridge/src/NatsBridge.ts:111"),d(o)])]),V,e("p",null,[e("a",F,[t("natsbridge/src/NatsBridge.ts:178"),d(o)])]),J,e("p",null,[e("a",H,[t("natsbridge/src/NatsBridge.ts:107"),d(o)])]),G,e("p",null,[e("a",U,[t("natsbridge/src/NatsBridge.ts:103"),d(o)])]),z,e("p",null,[e("a",Q,[t("natsbridge/src/NatsBridge.ts:318"),d(o)])]),W,e("p",null,[e("a",X,[t("natsbridge/src/NatsBridge.ts:359"),d(o)])]),Y,e("p",null,[e("a",Z,[t("natsbridge/src/NatsBridge.ts:90"),d(o)])]),$,e("p",null,[e("a",ee,[t("natsbridge/src/NatsBridge.ts:348"),d(o)])]),te,e("p",null,[e("a",de,[t("natsbridge/src/NatsBridge.ts:375"),d(o)])]),ae])}const ce=s(h,[["render",re],["__file","purista_natsbridge.NatsBridge.html.vue"]]);export{ce as default};
