import{_ as e,c as a,o as t,ag as n}from"./chunks/framework.U_AETC1W.js";const l=JSON.parse('{"title":"Type Alias: CommandDefinition<S, MessagePayloadType, MessageParamsType, TransformInputPayload, TransformInputParams, FunctionPayloadType, FunctionParamsType, FunctionOutputType, FinalFunctionOutputType, TransformOutputHookOutput, Resources, Invokes, EmitList, MetadataType>","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/CommandDefinition.md","filePath":"api/@purista/core/type-aliases/CommandDefinition.md","lastUpdated":1740066608000}'),r={name:"api/@purista/core/type-aliases/CommandDefinition.md"};function s(c,o,d,m,i,p){return t(),a("div",null,o[0]||(o[0]=[n('<p><a href="./../README.html"><strong>@purista/core v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / CommandDefinition</p><h1 id="type-alias-commanddefinition-s-messagepayloadtype-messageparamstype-transforminputpayload-transforminputparams-functionpayloadtype-functionparamstype-functionoutputtype-finalfunctionoutputtype-transformoutputhookoutput-resources-invokes-emitlist-metadatatype" tabindex="-1">Type Alias: CommandDefinition&lt;S, MessagePayloadType, MessageParamsType, TransformInputPayload, TransformInputParams, FunctionPayloadType, FunctionParamsType, FunctionOutputType, FinalFunctionOutputType, TransformOutputHookOutput, Resources, Invokes, EmitList, MetadataType&gt; <a class="header-anchor" href="#type-alias-commanddefinition-s-messagepayloadtype-messageparamstype-transforminputpayload-transforminputparams-functionpayloadtype-functionparamstype-functionoutputtype-finalfunctionoutputtype-transformoutputhookoutput-resources-invokes-emitlist-metadatatype" aria-label="Permalink to &quot;Type Alias: CommandDefinition\\&lt;S, MessagePayloadType, MessageParamsType, TransformInputPayload, TransformInputParams, FunctionPayloadType, FunctionParamsType, FunctionOutputType, FinalFunctionOutputType, TransformOutputHookOutput, Resources, Invokes, EmitList, MetadataType\\&gt;&quot;">​</a></h1><blockquote><p><strong>CommandDefinition</strong>&lt;<code>S</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>TransformInputPayload</code>, <code>TransformInputParams</code>, <code>FunctionPayloadType</code>, <code>FunctionParamsType</code>, <code>FunctionOutputType</code>, <code>FinalFunctionOutputType</code>, <code>TransformOutputHookOutput</code>, <code>Resources</code>, <code>Invokes</code>, <code>EmitList</code>, <code>MetadataType</code>&gt;: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/types/commandType/CommandDefinition.ts#L20" target="_blank" rel="noreferrer">packages/core/src/core/types/commandType/CommandDefinition.ts:20</a></p><p>The definition for a command provided by some service.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>S</strong> <em>extends</em> <a href="./../classes/Service.html"><code>Service</code></a></p><p>• <strong>MessagePayloadType</strong></p><p>• <strong>MessageParamsType</strong></p><p>• <strong>TransformInputPayload</strong></p><p>• <strong>TransformInputParams</strong></p><p>• <strong>FunctionPayloadType</strong></p><p>• <strong>FunctionParamsType</strong></p><p>• <strong>FunctionOutputType</strong></p><p>• <strong>FinalFunctionOutputType</strong></p><p>• <strong>TransformOutputHookOutput</strong></p><p>• <strong>Resources</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>• <strong>Invokes</strong> <em>extends</em> <a href="./InvokeList.html"><code>InvokeList</code></a></p><p>• <strong>EmitList</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>Schema</code>&gt;</p><p>• <strong>MetadataType</strong> <em>extends</em> <a href="./CommandDefinitionMetadataBase.html"><code>CommandDefinitionMetadataBase</code></a> = <a href="./CommandDefinitionMetadataBase.html"><code>CommandDefinitionMetadataBase</code></a></p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="call" tabindex="-1">call <a class="header-anchor" href="#call" aria-label="Permalink to &quot;call&quot;">​</a></h3><blockquote><p><strong>call</strong>: <a href="./CommandFunction.html"><code>CommandFunction</code></a>&lt;<code>S</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>FunctionPayloadType</code>, <code>FunctionParamsType</code>, <code>FunctionOutputType</code>, <code>Resources</code>, <code>Invokes</code>, <code>EmitList</code>&gt;</p></blockquote><p>the command function</p><h3 id="commanddescription" tabindex="-1">commandDescription <a class="header-anchor" href="#commanddescription" aria-label="Permalink to &quot;commandDescription&quot;">​</a></h3><blockquote><p><strong>commandDescription</strong>: <code>string</code></p></blockquote><p>the description of the command</p><h3 id="commandname" tabindex="-1">commandName <a class="header-anchor" href="#commandname" aria-label="Permalink to &quot;commandName&quot;">​</a></h3><blockquote><p><strong>commandName</strong>: <code>string</code></p></blockquote><p>the name of the command</p><h3 id="emitlist" tabindex="-1">emitList <a class="header-anchor" href="#emitlist" aria-label="Permalink to &quot;emitList&quot;">​</a></h3><blockquote><p><strong>emitList</strong>: <a href="./FromEmitToOtherType.html"><code>FromEmitToOtherType</code></a>&lt;<code>EmitList</code>, <code>SchemaObject</code>&gt;</p></blockquote><h3 id="eventbridgeconfig" tabindex="-1">eventBridgeConfig <a class="header-anchor" href="#eventbridgeconfig" aria-label="Permalink to &quot;eventBridgeConfig&quot;">​</a></h3><blockquote><p><strong>eventBridgeConfig</strong>: <a href="./DefinitionEventBridgeConfig.html"><code>DefinitionEventBridgeConfig</code></a></p></blockquote><p>config information for event bridge</p><h3 id="eventname" tabindex="-1">eventName? <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>eventName</strong>: <code>string</code></p></blockquote><p>the eventName for the command response</p><h3 id="hooks" tabindex="-1">hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;hooks&quot;">​</a></h3><blockquote><p><strong>hooks</strong>: <code>object</code></p></blockquote><p>hooks of command</p><h4 id="hooks-afterguard" tabindex="-1">hooks.afterGuard? <a class="header-anchor" href="#hooks-afterguard" aria-label="Permalink to &quot;hooks.afterGuard?&quot;">​</a></h4><blockquote><p><code>optional</code> <strong>hooks.afterGuard</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./CommandAfterGuardHook.html"><code>CommandAfterGuardHook</code></a>&lt;<code>S</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>FunctionPayloadType</code>, <code>FunctionParamsType</code>, <code>FunctionOutputType</code>, <code>Resources</code>, <code>Invokes</code>, <code>EmitList</code>&gt;&gt;</p></blockquote><h4 id="hooks-beforeguard" tabindex="-1">hooks.beforeGuard? <a class="header-anchor" href="#hooks-beforeguard" aria-label="Permalink to &quot;hooks.beforeGuard?&quot;">​</a></h4><blockquote><p><code>optional</code> <strong>hooks.beforeGuard</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./CommandBeforeGuardHook.html"><code>CommandBeforeGuardHook</code></a>&lt;<code>S</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>FunctionPayloadType</code>, <code>FunctionParamsType</code>, <code>Resources</code>, <code>Invokes</code>, <code>EmitList</code>&gt;&gt;</p></blockquote><h4 id="hooks-transforminput" tabindex="-1">hooks.transformInput? <a class="header-anchor" href="#hooks-transforminput" aria-label="Permalink to &quot;hooks.transformInput?&quot;">​</a></h4><blockquote><p><code>optional</code> <strong>hooks.transformInput</strong>: <code>object</code></p></blockquote><h4 id="hooks-transforminput-transformfunction" tabindex="-1">hooks.transformInput.transformFunction <a class="header-anchor" href="#hooks-transforminput-transformfunction" aria-label="Permalink to &quot;hooks.transformInput.transformFunction&quot;">​</a></h4><blockquote><p><strong>hooks.transformInput.transformFunction</strong>: <a href="./CommandTransformInputHook.html"><code>CommandTransformInputHook</code></a>&lt;<code>S</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>TransformInputPayload</code>, <code>TransformInputParams</code>, <code>FunctionPayloadType</code>, <code>FunctionParamsType</code>&gt;</p></blockquote><h4 id="hooks-transforminput-transforminputschema" tabindex="-1">hooks.transformInput.transformInputSchema <a class="header-anchor" href="#hooks-transforminput-transforminputschema" aria-label="Permalink to &quot;hooks.transformInput.transformInputSchema&quot;">​</a></h4><blockquote><p><strong>hooks.transformInput.transformInputSchema</strong>: <code>Schema</code></p></blockquote><h4 id="hooks-transforminput-transformparameterschema" tabindex="-1">hooks.transformInput.transformParameterSchema <a class="header-anchor" href="#hooks-transforminput-transformparameterschema" aria-label="Permalink to &quot;hooks.transformInput.transformParameterSchema&quot;">​</a></h4><blockquote><p><strong>hooks.transformInput.transformParameterSchema</strong>: <code>Schema</code></p></blockquote><h4 id="hooks-transformoutput" tabindex="-1">hooks.transformOutput? <a class="header-anchor" href="#hooks-transformoutput" aria-label="Permalink to &quot;hooks.transformOutput?&quot;">​</a></h4><blockquote><p><code>optional</code> <strong>hooks.transformOutput</strong>: <code>object</code></p></blockquote><h4 id="hooks-transformoutput-transformfunction" tabindex="-1">hooks.transformOutput.transformFunction <a class="header-anchor" href="#hooks-transformoutput-transformfunction" aria-label="Permalink to &quot;hooks.transformOutput.transformFunction&quot;">​</a></h4><blockquote><p><strong>hooks.transformOutput.transformFunction</strong>: <a href="./CommandTransformOutputHook.html"><code>CommandTransformOutputHook</code></a>&lt;<code>S</code>, <code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>FinalFunctionOutputType</code>, <code>FunctionParamsType</code>, <code>TransformOutputHookOutput</code>&gt;</p></blockquote><h4 id="hooks-transformoutput-transformoutputschema" tabindex="-1">hooks.transformOutput.transformOutputSchema <a class="header-anchor" href="#hooks-transformoutput-transformoutputschema" aria-label="Permalink to &quot;hooks.transformOutput.transformOutputSchema&quot;">​</a></h4><blockquote><p><strong>hooks.transformOutput.transformOutputSchema</strong>: <code>Schema</code></p></blockquote><h3 id="invokes" tabindex="-1">invokes <a class="header-anchor" href="#invokes" aria-label="Permalink to &quot;invokes&quot;">​</a></h3><blockquote><p><strong>invokes</strong>: <a href="./FromInvokeToOtherType.html"><code>FromInvokeToOtherType</code></a>&lt;<code>Invokes</code>, { <code>outputSchema</code>: <code>SchemaObject</code>; <code>parameterSchema</code>: <code>SchemaObject</code>; <code>payloadSchema</code>: <code>SchemaObject</code>; }&gt;</p></blockquote><h3 id="metadata" tabindex="-1">metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;metadata&quot;">​</a></h3><blockquote><p><strong>metadata</strong>: <code>MetadataType</code></p></blockquote><p>the metadata of the command</p>',66)]))}const h=e(r,[["render",s]]);export{l as __pageData,h as default};
