import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.U_AETC1W.js";const n="/graphic/amqp_event_bridge_header.png",g=JSON.parse('{"title":"AMQP Event Bridge","description":"Use the AMQP event bridge of PURISTA","frontmatter":{"title":"AMQP Event Bridge","description":"Use the AMQP event bridge of PURISTA","order":301020},"headers":[],"relativePath":"handbook/3_eco_system/eventbridges/amqp.md","filePath":"handbook/3_eco_system/eventbridges/amqp.md","lastUpdated":1739901845000}'),l={name:"handbook/3_eco_system/eventbridges/amqp.md"};function r(p,s,o,h,d,c){return a(),e("div",null,s[0]||(s[0]=[t('<p><img src="'+n+`" alt="AMQP event bridge"></p><h1 id="amqp-event-bridge" tabindex="-1">AMQP Event Bridge <a class="header-anchor" href="#amqp-event-bridge" aria-label="Permalink to &quot;AMQP Event Bridge&quot;">​</a></h1><p>The AMQP protocol and the corresponding brokers are perfectly for PURISTA.</p><p>The package <code>@purista/amqpbridge</code> provides an event bridge for the AMQP protocol. This means you can use <a href="https://www.rabbitmq.com" target="_blank" rel="noreferrer">RabbitMQ</a> as message broker. This is the recommended message broker. Also, <a href="https://activemq.apache.org/" target="_blank" rel="noreferrer">Apache ActiveMQ</a> should work.</p><p>By using the AMQP event bridge, the system will scale and load balance any task across all instances. It also allows you, to choose a more flexible way of deployment, as you are now able to split your monolith into small pieces.</p><p>You can:</p><ul><li>spin up multiple monolith instances</li><li>you can split your monolith by services and run multiple service instances (microservice style)</li><li>you can split even more down to single function and subscription level</li><li>you are able to connect other systems via the amqp broker</li></ul><div class="tip custom-block"><p class="custom-block-title">Pros</p><ul><li>allows scaling</li><li>full subscription support</li><li>support of durable queues</li><li>retry mechanism</li><li>dead letter queues</li></ul></div><div class="warning custom-block"><p class="custom-block-title">Cons</p><ul><li>needs managing of an AMQP broker</li><li>no auto-reconnect</li></ul></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>The AMQP event bridge uses the unified configuration schema as all event bridges.</p><div class="info custom-block"><p class="custom-block-title">API documentation</p><ul><li><a href="./../../../api/@purista/core/classes/EventBridgeBaseClass.html">General event bridge config</a></li><li><a href="./../../../api/@purista/amqpbridge/README.html">AMQP bridge config</a></li></ul></div><h2 id="usage-example" tabindex="-1">Usage example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage example&quot;">​</a></h2><p>The easiest way to start - simply start a RabbitMQ docker container:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-rabbit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 15672:15672</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5672:5672</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq:3-management</span></span></code></pre></div><p>Add the AMQP bridge to your code:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AmqpBridge, AmqpBridgeConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@purista/amqpbridge&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create and init our eventbridge</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AmqpBridgeConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;amqp://my-amqp-host.example.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventBridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AmqpBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( config )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="brokers-and-tools" tabindex="-1">Brokers and tools <a class="header-anchor" href="#brokers-and-tools" aria-label="Permalink to &quot;Brokers and tools&quot;">​</a></h2><ul><li><a href="https://www.rabbitmq.com/" target="_blank" rel="noreferrer">RabbitMQ</a></li></ul><div class="tip custom-block"><p class="custom-block-title">OpenTelemetry</p><p>PURISTA is using the AMQP header feature to add the OpenTelemetry information to each message, as recommended: <a href="https://w3c.github.io/trace-context-mqtt/" target="_blank" rel="noreferrer">https://w3c.github.io/trace-context-mqtt/</a>.</p></div>`,20)]))}const m=i(l,[["render",r]]);export{g as __pageData,m as default};
