import{_ as a,c as o,o as r,ag as t}from"./chunks/framework.U_AETC1W.js";const m=JSON.parse('{"title":"Class: AmqpBridge","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/amqpbridge/classes/AmqpBridge.md","filePath":"api/@purista/amqpbridge/classes/AmqpBridge.md","lastUpdated":1739900666000}'),d={name:"api/@purista/amqpbridge/classes/AmqpBridge.md"};function c(n,e,s,i,l,h){return r(),o("div",null,e[0]||(e[0]=[t(`<p><a href="./../README.html"><strong>@purista/amqpbridge v1.11.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/amqpbridge</a> / AmqpBridge</p><h1 id="class-amqpbridge" tabindex="-1">Class: AmqpBridge <a class="header-anchor" href="#class-amqpbridge" aria-label="Permalink to &quot;Class: AmqpBridge&quot;">​</a></h1><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L67" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:67</a></p><p>The AMQP event bridge connects to a AMQP broker.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AmqpBridge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@purista/amqpbridge&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create and init our eventbridge</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;amqp://localhost&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventBridge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AmqpBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="extends" tabindex="-1">Extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;Extends&quot;">​</a></h2><ul><li><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>&lt;<a href="./../type-aliases/AmqpBridgeConfig.html"><code>AmqpBridgeConfig</code></a>&gt;</li></ul><h2 id="implements" tabindex="-1">Implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;Implements&quot;">​</a></h2><ul><li><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a></li></ul><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="new-amqpbridge" tabindex="-1">new AmqpBridge() <a class="header-anchor" href="#new-amqpbridge" aria-label="Permalink to &quot;new AmqpBridge()&quot;">​</a></h3><blockquote><p><strong>new AmqpBridge</strong>(<code>config</code>?): <a href="./AmqpBridge.html"><code>AmqpBridge</code></a></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L105" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:105</a></p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="config" tabindex="-1">config? <a class="header-anchor" href="#config" aria-label="Permalink to &quot;config?&quot;">​</a></h5><h6 id="defaultcommandtimeout" tabindex="-1">defaultCommandTimeout? <a class="header-anchor" href="#defaultcommandtimeout" aria-label="Permalink to &quot;defaultCommandTimeout?&quot;">​</a></h6><p><code>number</code></p><p>Overwrite the hardcoded default timeout of command invocations</p><h6 id="encoder" tabindex="-1">encoder? <a class="header-anchor" href="#encoder" aria-label="Permalink to &quot;encoder?&quot;">​</a></h6><p><a href="./../type-aliases/Encoder.html"><code>Encoder</code></a></p><p>the encoder(s) to be used for AMQP messages</p><p><strong>Default</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jsonEncoder</span></span></code></pre></div><h6 id="encrypter" tabindex="-1">encrypter? <a class="header-anchor" href="#encrypter" aria-label="Permalink to &quot;encrypter?&quot;">​</a></h6><p><a href="./../type-aliases/Encrypter.html"><code>Encrypter</code></a></p><p>the encrypter(s) to be used for AMQP messages</p><p><strong>Default</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plain</span></span></code></pre></div><h6 id="exchangename" tabindex="-1">exchangeName? <a class="header-anchor" href="#exchangename" aria-label="Permalink to &quot;exchangeName?&quot;">​</a></h6><p><code>string</code></p><p>the AMQP exchage name to be used</p><p><strong>Default</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">purista</span></span></code></pre></div><h6 id="exchangeoptions" tabindex="-1">exchangeOptions? <a class="header-anchor" href="#exchangeoptions" aria-label="Permalink to &quot;exchangeOptions?&quot;">​</a></h6><p><code>AssertExchange</code></p><p>the AMQP exchange options</p><h6 id="instanceid" tabindex="-1">instanceId? <a class="header-anchor" href="#instanceid" aria-label="Permalink to &quot;instanceId?&quot;">​</a></h6><p><code>string</code></p><p>The instance id of the event bridge. If not set, a id will generated each time a instance is created. Use this if there is a need to always have the same instance id.</p><h6 id="logger" tabindex="-1">logger? <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;logger?&quot;">​</a></h6><p><a href="./../../core/classes/Logger.html"><code>Logger</code></a></p><p>A logger instance</p><h6 id="loglevel" tabindex="-1">logLevel? <a class="header-anchor" href="#loglevel" aria-label="Permalink to &quot;logLevel?&quot;">​</a></h6><p><a href="./../../core/type-aliases/LogLevelName.html"><code>LogLevelName</code></a></p><p>If no logger instance is given, use this log level</p><h6 id="nameprefix" tabindex="-1">namePrefix? <a class="header-anchor" href="#nameprefix" aria-label="Permalink to &quot;namePrefix?&quot;">​</a></h6><p><code>string</code></p><p>the queue prefix to be used for all PURISTA queues except short living queues created by the broker on request</p><p><strong>Default</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">purista</span></span></code></pre></div><h6 id="socketoptions" tabindex="-1">socketOptions? <a class="header-anchor" href="#socketoptions" aria-label="Permalink to &quot;socketOptions?&quot;">​</a></h6><p><code>any</code></p><p>socket options</p><h6 id="spanprocessor" tabindex="-1">spanProcessor? <a class="header-anchor" href="#spanprocessor" aria-label="Permalink to &quot;spanProcessor?&quot;">​</a></h6><p><code>SpanProcessor</code></p><p>A OpenTelemetry span processor</p><h6 id="url" tabindex="-1">url? <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url?&quot;">​</a></h6><p><code>string</code> | <code>Connect</code></p><p>the AMQP broker url</p><p><strong>Default</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">amqp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//localhost</span></span></code></pre></div><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./AmqpBridge.html"><code>AmqpBridge</code></a></p><h4 id="overrides" tabindex="-1">Overrides <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#constructors"><code>constructor</code></a></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="channel" tabindex="-1">channel? <a class="header-anchor" href="#channel" aria-label="Permalink to &quot;channel?&quot;">​</a></h3><blockquote><p><code>protected</code> <code>optional</code> <strong>channel</strong>: <code>Channel</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L69" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:69</a></p><hr><h3 id="config-1" tabindex="-1">config <a class="header-anchor" href="#config-1" aria-label="Permalink to &quot;config&quot;">​</a></h3><blockquote><p><strong>config</strong>: <a href="./../../core/type-aliases/Complete.html"><code>Complete</code></a>&lt;{ <code>defaultCommandTimeout</code>: <code>number</code>; <code>encoder</code>: <a href="./../type-aliases/Encoder.html"><code>Encoder</code></a>; <code>encrypter</code>: <a href="./../type-aliases/Encrypter.html"><code>Encrypter</code></a>; <code>exchangeName</code>: <code>string</code>; <code>exchangeOptions</code>: <code>AssertExchange</code>; <code>instanceId</code>: <code>string</code>; <code>logger</code>: <a href="./../../core/classes/Logger.html"><code>Logger</code></a>; <code>logLevel</code>: <a href="./../../core/type-aliases/LogLevelName.html"><code>LogLevelName</code></a>; <code>namePrefix</code>: <code>string</code>; <code>socketOptions</code>: <code>any</code>; <code>spanProcessor</code>: <code>SpanProcessor</code>; <code>url</code>: <code>string</code> | <code>Connect</code>; }&gt;</p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:14</p><h4 id="inherited-from" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#config-1"><code>config</code></a></p><hr><h3 id="connection" tabindex="-1">connection? <a class="header-anchor" href="#connection" aria-label="Permalink to &quot;connection?&quot;">​</a></h3><blockquote><p><code>protected</code> <code>optional</code> <strong>connection</strong>: <code>Connection</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L68" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:68</a></p><hr><h3 id="consumertags" tabindex="-1">consumerTags <a class="header-anchor" href="#consumertags" aria-label="Permalink to &quot;consumerTags&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>consumerTags</strong>: <code>string</code>[] = <code>[]</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L74" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:74</a></p><hr><h3 id="defaultcommandtimeout-1" tabindex="-1">defaultCommandTimeout <a class="header-anchor" href="#defaultcommandtimeout-1" aria-label="Permalink to &quot;defaultCommandTimeout&quot;">​</a></h3><blockquote><p><strong>defaultCommandTimeout</strong>: <code>number</code></p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:17</p><p>The default time until when a command invocation automatically returns a time out error</p><h4 id="implementation-of" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#defaultcommandtimeout"><code>defaultCommandTimeout</code></a></p><h4 id="inherited-from-1" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-1" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#defaultcommandtimeout"><code>defaultCommandTimeout</code></a></p><hr><h3 id="encoder-1" tabindex="-1">encoder <a class="header-anchor" href="#encoder-1" aria-label="Permalink to &quot;encoder&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>encoder</strong>: <a href="./../type-aliases/Encoder.html"><code>Encoder</code></a></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L97" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:97</a></p><hr><h3 id="encrypter-1" tabindex="-1">encrypter <a class="header-anchor" href="#encrypter-1" aria-label="Permalink to &quot;encrypter&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>encrypter</strong>: <a href="./../type-aliases/Encrypter.html"><code>Encrypter</code></a></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L101" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:101</a></p><hr><h3 id="healthy" tabindex="-1">healthy <a class="header-anchor" href="#healthy" aria-label="Permalink to &quot;healthy&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>healthy</strong>: <code>boolean</code> = <code>false</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L71" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:71</a></p><hr><h3 id="instanceid-1" tabindex="-1">instanceId <a class="header-anchor" href="#instanceid-1" aria-label="Permalink to &quot;instanceId&quot;">​</a></h3><blockquote><p><strong>instanceId</strong>: <code>string</code></p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:16</p><h4 id="implementation-of-1" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-1" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#instanceid"><code>instanceId</code></a></p><h4 id="inherited-from-2" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-2" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#instanceid"><code>instanceId</code></a></p><hr><h3 id="logger-1" tabindex="-1">logger <a class="header-anchor" href="#logger-1" aria-label="Permalink to &quot;logger&quot;">​</a></h3><blockquote><p><strong>logger</strong>: <a href="./../../core/classes/Logger.html"><code>Logger</code></a></p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:12</p><h4 id="inherited-from-3" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-3" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#logger"><code>logger</code></a></p><hr><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><blockquote><p><strong>name</strong>: <code>string</code></p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:15</p><h4 id="implementation-of-2" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-2" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#name"><code>name</code></a></p><h4 id="inherited-from-4" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-4" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#name-1"><code>name</code></a></p><hr><h3 id="pendinginvocations" tabindex="-1">pendingInvocations <a class="header-anchor" href="#pendinginvocations" aria-label="Permalink to &quot;pendingInvocations&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>pendingInvocations</strong>: <code>Map</code>&lt;<code>string</code>, <a href="./../../core/type-aliases/PendigInvocation.html"><code>PendigInvocation</code></a>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L85" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:85</a></p><hr><h3 id="ready" tabindex="-1">ready <a class="header-anchor" href="#ready" aria-label="Permalink to &quot;ready&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>ready</strong>: <code>boolean</code> = <code>false</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L72" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:72</a></p><hr><h3 id="replyqueuename" tabindex="-1">replyQueueName? <a class="header-anchor" href="#replyqueuename" aria-label="Permalink to &quot;replyQueueName?&quot;">​</a></h3><blockquote><p><code>protected</code> <code>optional</code> <strong>replyQueueName</strong>: <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L76" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:76</a></p><hr><h3 id="runningsubscriptioncount" tabindex="-1">runningSubscriptionCount <a class="header-anchor" href="#runningsubscriptioncount" aria-label="Permalink to &quot;runningSubscriptionCount&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>runningSubscriptionCount</strong>: <code>number</code> = <code>0</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L87" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:87</a></p><hr><h3 id="servicefunctions" tabindex="-1">serviceFunctions <a class="header-anchor" href="#servicefunctions" aria-label="Permalink to &quot;serviceFunctions&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>serviceFunctions</strong>: <code>Map</code>&lt;<code>string</code>, { <code>cb</code>: (<code>message</code>) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../../core/enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; } | { <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#commandsuccessresponse"><code>CommandSuccessResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>unknown</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;; <code>channel</code>: <code>Channel</code>; }&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L77" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:77</a></p><hr><h3 id="subscriptions" tabindex="-1">subscriptions <a class="header-anchor" href="#subscriptions" aria-label="Permalink to &quot;subscriptions&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>subscriptions</strong>: <code>Map</code>&lt;<code>string</code>, { <code>cb</code>: (<code>message</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#custommessage"><code>CustomMessage</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>unknown</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;; <code>channel</code>: <code>Channel</code>; }&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L89" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:89</a></p><hr><h3 id="traceprovider" tabindex="-1">traceProvider <a class="header-anchor" href="#traceprovider" aria-label="Permalink to &quot;traceProvider&quot;">​</a></h3><blockquote><p><strong>traceProvider</strong>: <code>NodeTracerProvider</code></p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:13</p><h4 id="inherited-from-5" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-5" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#traceprovider"><code>traceProvider</code></a></p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="decodecontent" tabindex="-1">decodeContent() <a class="header-anchor" href="#decodecontent" aria-label="Permalink to &quot;decodeContent()&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>decodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L821" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:821</a></p><p>Decode buffer into given type</p><h4 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong></p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h5><p><code>Buffer</code></p><p>the input buffer</p><h5 id="contenttype" tabindex="-1">contentType <a class="header-anchor" href="#contenttype" aria-label="Permalink to &quot;contentType&quot;">​</a></h5><p><code>string</code></p><p>the content type of buffer content</p><h5 id="contentencoding" tabindex="-1">contentEncoding <a class="header-anchor" href="#contentencoding" aria-label="Permalink to &quot;contentEncoding&quot;">​</a></h5><p><code>string</code></p><p>the encoding type of buffer content</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><hr><h3 id="destroy" tabindex="-1">destroy() <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy()&quot;">​</a></h3><blockquote><p><strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L836" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:836</a></p><p>Shut down event bridge as gracefully as possible</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-3" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-3" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#destroy"><code>destroy</code></a></p><h4 id="overrides-1" tabindex="-1">Overrides <a class="header-anchor" href="#overrides-1" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#destroy"><code>destroy</code></a></p><hr><h3 id="emit" tabindex="-1">emit() <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;emit()&quot;">​</a></h3><blockquote><p><strong>emit</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>parameter</code>?): <code>void</code></p></blockquote><p>Defined in: core/dist/commonjs/core/types/GenericEventEmitter.d.ts:13</p><h4 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>K</strong> <em>extends</em> <a href="./../../core/type-aliases/EventKey.html"><code>EventKey</code></a>&lt;{ <code>[key: </code>custom-\${string}<code>]</code>: <code>unknown</code>; <code>[key: </code>adapter-\${string}<code>]</code>: <code>unknown</code>; <code>eventbridge-connected</code>: <code>never</code>; <code>eventbridge-connection-error</code>: <code>unknown</code>; <code>eventbridge-disconnected</code>: <code>never</code>; <code>eventbridge-error</code>: <code>unknown</code>; <code>eventbridge-reconnecting</code>: <code>never</code>; }&gt;</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="eventname" tabindex="-1">eventName <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName&quot;">​</a></h5><p><code>K</code></p><h5 id="parameter" tabindex="-1">parameter? <a class="header-anchor" href="#parameter" aria-label="Permalink to &quot;parameter?&quot;">​</a></h5><p><code>object</code>[<code>K</code>]</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="inherited-from-6" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-6" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#emit"><code>emit</code></a></p><hr><h3 id="emitmessage" tabindex="-1">emitMessage() <a class="header-anchor" href="#emitmessage" aria-label="Permalink to &quot;emitMessage()&quot;">​</a></h3><blockquote><p><strong>emitMessage</strong>&lt;<code>T</code>&gt;(<code>message</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>Readonly</code>&lt;<a href="./../../core/type-aliases/EBMessage.html"><code>EBMessage</code></a>&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L279" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:279</a></p><p>Emit a message to the eventbridge without awaiting a result</p><h4 id="type-parameters-2" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong> <em>extends</em> <a href="./../../core/type-aliases/EBMessage.html"><code>EBMessage</code></a></p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h5><p><code>Omit</code>&lt;<a href="./../../core/type-aliases/EBMessage.html"><code>EBMessage</code></a>, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code>&gt;</p><p>the message</p><h5 id="contenttype-1" tabindex="-1">contentType <a class="header-anchor" href="#contenttype-1" aria-label="Permalink to &quot;contentType&quot;">​</a></h5><p><code>string</code> = <code>&#39;application/json&#39;</code></p><h5 id="contentencoding-1" tabindex="-1">contentEncoding <a class="header-anchor" href="#contentencoding-1" aria-label="Permalink to &quot;contentEncoding&quot;">​</a></h5><p><code>string</code> = <code>&#39;utf-8&#39;</code></p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>Readonly</code>&lt;<a href="./../../core/type-aliases/EBMessage.html"><code>EBMessage</code></a>&gt;&gt;</p><h4 id="implementation-of-4" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-4" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#emitmessage"><code>emitMessage</code></a></p><hr><h3 id="encodecontent" tabindex="-1">encodeContent() <a class="header-anchor" href="#encodecontent" aria-label="Permalink to &quot;encodeContent()&quot;">​</a></h3><blockquote><p><code>protected</code> <strong>encodeContent</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>contentType</code>, <code>contentEncoding</code>): <code>Promise</code>&lt;<code>Buffer</code>&lt;<code>ArrayBufferLike</code>&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L800" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:800</a></p><p>Encode given payload to buffer</p><h4 id="type-parameters-3" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-3" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong></p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input-1" tabindex="-1">input <a class="header-anchor" href="#input-1" aria-label="Permalink to &quot;input&quot;">​</a></h5><p><code>T</code></p><h5 id="contenttype-2" tabindex="-1">contentType <a class="header-anchor" href="#contenttype-2" aria-label="Permalink to &quot;contentType&quot;">​</a></h5><p><code>string</code></p><h5 id="contentencoding-2" tabindex="-1">contentEncoding <a class="header-anchor" href="#contentencoding-2" aria-label="Permalink to &quot;contentEncoding&quot;">​</a></h5><p><code>string</code></p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>Buffer</code>&lt;<code>ArrayBufferLike</code>&gt;&gt;</p><hr><h3 id="gettracer" tabindex="-1">getTracer() <a class="header-anchor" href="#gettracer" aria-label="Permalink to &quot;getTracer()&quot;">​</a></h3><blockquote><p><strong>getTracer</strong>(): <code>Tracer</code></p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:24</p><p>Returns open telemetry tracer of this service</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Tracer</code></p><p>Tracer</p><h4 id="inherited-from-7" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-7" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#gettracer"><code>getTracer</code></a></p><hr><h3 id="invoke" tabindex="-1">invoke() <a class="header-anchor" href="#invoke" aria-label="Permalink to &quot;invoke()&quot;">​</a></h3><blockquote><p><strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>commandTimeout</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L354" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:354</a></p><p>Call a command of a service and return the result of this command</p><h4 id="type-parameters-4" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-4" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong></p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input-2" tabindex="-1">input <a class="header-anchor" href="#input-2" aria-label="Permalink to &quot;input&quot;">​</a></h5><p><code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#command"><code>Command</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>parameter</code>: <code>unknown</code>; <code>payload</code>: <code>unknown</code>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code> | <code>&quot;correlationId&quot;</code> | <code>&quot;messageType&quot;</code>&gt;</p><p>a partial command message</p><h5 id="commandtimeout" tabindex="-1">commandTimeout <a class="header-anchor" href="#commandtimeout" aria-label="Permalink to &quot;commandTimeout&quot;">​</a></h5><p><code>number</code> = <code>...</code></p><p>the time to live (timeout) of the invocation</p><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="implementation-of-5" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-5" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#invoke"><code>invoke</code></a></p><hr><h3 id="ishealthy" tabindex="-1">isHealthy() <a class="header-anchor" href="#ishealthy" aria-label="Permalink to &quot;isHealthy()&quot;">​</a></h3><blockquote><p><strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L128" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:128</a></p><p>Indicates if the eventbridge is running and works correctly</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-6" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-6" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#ishealthy"><code>isHealthy</code></a></p><hr><h3 id="isready" tabindex="-1">isReady() <a class="header-anchor" href="#isready" aria-label="Permalink to &quot;isReady()&quot;">​</a></h3><blockquote><p><strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L124" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:124</a></p><p>Indicates if the eventbridge has been started and is connected to underlaying message broker</p><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="implementation-of-7" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-7" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#isready"><code>isReady</code></a></p><hr><h3 id="off" tabindex="-1">off() <a class="header-anchor" href="#off" aria-label="Permalink to &quot;off()&quot;">​</a></h3><blockquote><p><strong>off</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p></blockquote><p>Defined in: core/dist/commonjs/core/types/GenericEventEmitter.d.ts:12</p><h4 id="type-parameters-5" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-5" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>K</strong> <em>extends</em> <a href="./../../core/type-aliases/EventKey.html"><code>EventKey</code></a>&lt;{ <code>[key: </code>custom-\${string}<code>]</code>: <code>unknown</code>; <code>[key: </code>adapter-\${string}<code>]</code>: <code>unknown</code>; <code>eventbridge-connected</code>: <code>never</code>; <code>eventbridge-connection-error</code>: <code>unknown</code>; <code>eventbridge-disconnected</code>: <code>never</code>; <code>eventbridge-error</code>: <code>unknown</code>; <code>eventbridge-reconnecting</code>: <code>never</code>; }&gt;</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="eventname-1" tabindex="-1">eventName <a class="header-anchor" href="#eventname-1" aria-label="Permalink to &quot;eventName&quot;">​</a></h5><p><code>K</code></p><h5 id="fn" tabindex="-1">fn <a class="header-anchor" href="#fn" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p><code>EventReceiver</code>&lt;<code>object</code>[<code>K</code>]&gt;</p><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="inherited-from-8" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-8" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#off"><code>off</code></a></p><hr><h3 id="on" tabindex="-1">on() <a class="header-anchor" href="#on" aria-label="Permalink to &quot;on()&quot;">​</a></h3><blockquote><p><strong>on</strong>&lt;<code>K</code>&gt;(<code>eventName</code>, <code>fn</code>): <code>void</code></p></blockquote><p>Defined in: core/dist/commonjs/core/types/GenericEventEmitter.d.ts:11</p><h4 id="type-parameters-6" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-6" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>K</strong> <em>extends</em> <a href="./../../core/type-aliases/EventKey.html"><code>EventKey</code></a>&lt;{ <code>[key: </code>custom-\${string}<code>]</code>: <code>unknown</code>; <code>[key: </code>adapter-\${string}<code>]</code>: <code>unknown</code>; <code>eventbridge-connected</code>: <code>never</code>; <code>eventbridge-connection-error</code>: <code>unknown</code>; <code>eventbridge-disconnected</code>: <code>never</code>; <code>eventbridge-error</code>: <code>unknown</code>; <code>eventbridge-reconnecting</code>: <code>never</code>; }&gt;</p><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="eventname-2" tabindex="-1">eventName <a class="header-anchor" href="#eventname-2" aria-label="Permalink to &quot;eventName&quot;">​</a></h5><p><code>K</code></p><h5 id="fn-1" tabindex="-1">fn <a class="header-anchor" href="#fn-1" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p><code>EventReceiver</code>&lt;<code>object</code>[<code>K</code>]&gt;</p><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="inherited-from-9" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-9" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#on"><code>on</code></a></p><hr><h3 id="registercommand" tabindex="-1">registerCommand() <a class="header-anchor" href="#registercommand" aria-label="Permalink to &quot;registerCommand()&quot;">​</a></h3><blockquote><p><strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L472" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:472</a></p><p>Register a service function and ensure that there is a queue for all incoming command requests.</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="address" tabindex="-1">address <a class="header-anchor" href="#address" aria-label="Permalink to &quot;address&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><p>The service function address</p><h5 id="cb" tabindex="-1">cb <a class="header-anchor" href="#cb" aria-label="Permalink to &quot;cb&quot;">​</a></h5><p>(<code>message</code>) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../../core/enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; } | { <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#commandsuccessresponse"><code>CommandSuccessResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>unknown</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p><p>the function to call if a matching command message arrives</p><h5 id="metadata" tabindex="-1">metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;metadata&quot;">​</a></h5><p><a href="./../../core/type-aliases/CommandDefinitionMetadataBase.html"><code>CommandDefinitionMetadataBase</code></a></p><h5 id="eventbridgeconfig" tabindex="-1">eventBridgeConfig <a class="header-anchor" href="#eventbridgeconfig" aria-label="Permalink to &quot;eventBridgeConfig&quot;">​</a></h5><p><a href="./../../core/type-aliases/DefinitionEventBridgeConfig.html"><code>DefinitionEventBridgeConfig</code></a></p><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>the id of command function queue</p><h4 id="implementation-of-8" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-8" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#registercommand"><code>registerCommand</code></a></p><hr><h3 id="registersubscription" tabindex="-1">registerSubscription() <a class="header-anchor" href="#registersubscription" aria-label="Permalink to &quot;registerSubscription()&quot;">​</a></h3><blockquote><p><strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L654" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:654</a></p><p>Register a new subscription</p><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="subscription" tabindex="-1">subscription <a class="header-anchor" href="#subscription" aria-label="Permalink to &quot;subscription&quot;">​</a></h5><p><a href="./../../core/type-aliases/Subscription.html"><code>Subscription</code></a></p><p>the subscription definition</p><h5 id="cb-1" tabindex="-1">cb <a class="header-anchor" href="#cb-1" aria-label="Permalink to &quot;cb&quot;">​</a></h5><p>(<code>message</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#custommessage"><code>CustomMessage</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>unknown</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</p><p>the function to be called if a matching message arrives</p><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="implementation-of-9" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-9" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#registersubscription"><code>registerSubscription</code></a></p><hr><h3 id="removealllisteners" tabindex="-1">removeAllListeners() <a class="header-anchor" href="#removealllisteners" aria-label="Permalink to &quot;removeAllListeners()&quot;">​</a></h3><blockquote><p><strong>removeAllListeners</strong>(): <code>void</code></p></blockquote><p>Defined in: core/dist/commonjs/core/types/GenericEventEmitter.d.ts:14</p><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="inherited-from-10" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-10" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#removealllisteners"><code>removeAllListeners</code></a></p><hr><h3 id="start" tabindex="-1">start() <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start()&quot;">​</a></h3><blockquote><p><strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L135" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:135</a></p><p>Connect to RabbitMQ broker, ensure exchange, call back queue</p><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-10" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-10" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#start"><code>start</code></a></p><h4 id="overrides-2" tabindex="-1">Overrides <a class="header-anchor" href="#overrides-2" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#start"><code>start</code></a></p><hr><h3 id="startactivespan" tabindex="-1">startActiveSpan() <a class="header-anchor" href="#startactivespan" aria-label="Permalink to &quot;startActiveSpan()&quot;">​</a></h3><blockquote><p><strong>startActiveSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>): <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:33</p><p>Start a child span for opentelemetry tracking</p><h4 id="type-parameters-7" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-7" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>F</strong></p><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="name-1" tabindex="-1">name <a class="header-anchor" href="#name-1" aria-label="Permalink to &quot;name&quot;">​</a></h5><p><code>string</code></p><p>name of span</p><h5 id="opts" tabindex="-1">opts <a class="header-anchor" href="#opts" aria-label="Permalink to &quot;opts&quot;">​</a></h5><p><code>SpanOptions</code></p><p>span options</p><h5 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h5><p>optional context</p><p><code>undefined</code> | <code>Context</code></p><h5 id="fn-2" tabindex="-1">fn <a class="header-anchor" href="#fn-2" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><p>function to be executed within the span</p><h4 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-11" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-11" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#startactivespan"><code>startActiveSpan</code></a></p><hr><h3 id="unregistercommand" tabindex="-1">unregisterCommand() <a class="header-anchor" href="#unregistercommand" aria-label="Permalink to &quot;unregisterCommand()&quot;">​</a></h3><blockquote><p><strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L635" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:635</a></p><p>Unregister a service command</p><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="address-1" tabindex="-1">address <a class="header-anchor" href="#address-1" aria-label="Permalink to &quot;address&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><p>The address (service name, version and command name) of the command to be de-registered</p><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-11" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-11" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#unregistercommand"><code>unregisterCommand</code></a></p><hr><h3 id="unregistersubscription" tabindex="-1">unregisterSubscription() <a class="header-anchor" href="#unregistersubscription" aria-label="Permalink to &quot;unregisterSubscription()&quot;">​</a></h3><blockquote><p><strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/AmqpBridge.impl.ts#L774" target="_blank" rel="noreferrer">amqpbridge/src/AmqpBridge.impl.ts:774</a></p><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="address-2" tabindex="-1">address <a class="header-anchor" href="#address-2" aria-label="Permalink to &quot;address&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="implementation-of-12" tabindex="-1">Implementation of <a class="header-anchor" href="#implementation-of-12" aria-label="Permalink to &quot;Implementation of&quot;">​</a></h4><p><a href="./../../core/interfaces/EventBridge.html"><code>EventBridge</code></a>.<a href="./../../core/interfaces/EventBridge.html#unregistersubscription"><code>unregisterSubscription</code></a></p><hr><h3 id="wrapinspan" tabindex="-1">wrapInSpan() <a class="header-anchor" href="#wrapinspan" aria-label="Permalink to &quot;wrapInSpan()&quot;">​</a></h3><blockquote><p><strong>wrapInSpan</strong>&lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context</code>?): <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>Defined in: core/dist/commonjs/core/EventBridge/EventBridgeBaseClass.impl.d.ts:49</p><p>Start span for opentelemetry tracking on same level. The created span will not become the &quot;active&quot; span within opentelemetry!</p><p>This means during logging and similar the spanId of parent span is logged.</p><p>Use wrapInSpan for marking points in flow of one bigger function, but not to trace the program flow itself</p><h4 id="type-parameters-8" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-8" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>F</strong></p><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="name-2" tabindex="-1">name <a class="header-anchor" href="#name-2" aria-label="Permalink to &quot;name&quot;">​</a></h5><p><code>string</code></p><p>name of span</p><h5 id="opts-1" tabindex="-1">opts <a class="header-anchor" href="#opts-1" aria-label="Permalink to &quot;opts&quot;">​</a></h5><p><code>SpanOptions</code></p><p>span options</p><h5 id="fn-3" tabindex="-1">fn <a class="header-anchor" href="#fn-3" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><p>function te be executed in the span</p><h5 id="context-1" tabindex="-1">context? <a class="header-anchor" href="#context-1" aria-label="Permalink to &quot;context?&quot;">​</a></h5><p><code>Context</code></p><p>span context</p><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><p>return value of fn</p><h4 id="inherited-from-12" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from-12" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./../../core/classes/EventBridgeBaseClass.html"><code>EventBridgeBaseClass</code></a>.<a href="./../../core/classes/EventBridgeBaseClass.html#wrapinspan"><code>wrapInSpan</code></a></p>`,447)]))}const g=a(d,[["render",c]]);export{m as __pageData,g as default};
