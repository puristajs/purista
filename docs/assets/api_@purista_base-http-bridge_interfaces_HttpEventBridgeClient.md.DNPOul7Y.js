import{_ as a,c as t,o as r,ag as o}from"./chunks/framework.U_AETC1W.js";const m=JSON.parse('{"title":"Interface: HttpEventBridgeClient","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/base-http-bridge/interfaces/HttpEventBridgeClient.md","filePath":"api/@purista/base-http-bridge/interfaces/HttpEventBridgeClient.md","lastUpdated":1740066608000}'),s={name:"api/@purista/base-http-bridge/interfaces/HttpEventBridgeClient.md"};function n(d,e,i,c,p,h){return r(),t("div",null,e[0]||(e[0]=[o('<p><a href="./../README.html"><strong>@purista/base-http-bridge v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/base-http-bridge</a> / HttpEventBridgeClient</p><h1 id="interface-httpeventbridgeclient" tabindex="-1">Interface: HttpEventBridgeClient <a class="header-anchor" href="#interface-httpeventbridgeclient" aria-label="Permalink to &quot;Interface: HttpEventBridgeClient&quot;">​</a></h1><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L7" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:7</a></p><p>The HttpEventBridgeClient connects the HTTPEventBridge with the sidecar service. This client is responsible for the communication to the sidecar service.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="getapipathforcommand" tabindex="-1">getApiPathForCommand() <a class="header-anchor" href="#getapipathforcommand" aria-label="Permalink to &quot;getApiPathForCommand()&quot;">​</a></h3><blockquote><p><strong>getApiPathForCommand</strong>: (<code>addess</code>, <code>metadata</code>) =&gt; <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L22" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:22</a></p><p>Generate the url path of the command based on the command builder <code>exposeAsHttpEndpoint</code> settings. This url is a POST endpoint and expects the payload and parameter as defined for exposing.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="addess" tabindex="-1">addess <a class="header-anchor" href="#addess" aria-label="Permalink to &quot;addess&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h5 id="metadata" tabindex="-1">metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;metadata&quot;">​</a></h5><h6 id="expose" tabindex="-1">expose <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;expose&quot;">​</a></h6><p><code>object</code> &amp; <code>object</code></p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code></p><p>url path of endpoint</p><hr><h3 id="getinternalpathforcommand" tabindex="-1">getInternalPathForCommand() <a class="header-anchor" href="#getinternalpathforcommand" aria-label="Permalink to &quot;getInternalPathForCommand()&quot;">​</a></h3><blockquote><p><strong>getInternalPathForCommand</strong>: (<code>address</code>) =&gt; <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L14" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:14</a></p><p>Generate the url path of the command. This url is a POST endpoint and expects a command message as payload</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="address" tabindex="-1">address <a class="header-anchor" href="#address" aria-label="Permalink to &quot;address&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code></p><p>url path of endpoint</p><hr><h3 id="getinternalpathforsubscription" tabindex="-1">getInternalPathForSubscription() <a class="header-anchor" href="#getinternalpathforsubscription" aria-label="Permalink to &quot;getInternalPathForSubscription()&quot;">​</a></h3><blockquote><p><strong>getInternalPathForSubscription</strong>: (<code>address</code>) =&gt; <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L31" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:31</a></p><p>Generate the url path of the subscription. This url is a POST endpoint. The expected payload is a EBMessage or an CloudEvent with an EBMessage as data depending on config settings</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="address-1" tabindex="-1">address <a class="header-anchor" href="#address-1" aria-label="Permalink to &quot;address&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code></p><p>url path of endpoint</p><hr><h3 id="invoke" tabindex="-1">invoke() <a class="header-anchor" href="#invoke" aria-label="Permalink to &quot;invoke()&quot;">​</a></h3><blockquote><p><strong>invoke</strong>: (<code>command</code>, <code>headers</code>?, <code>timeout</code>?) =&gt; <code>Promise</code>&lt;<a href="./../../core/type-aliases/CommandResponse.html"><code>CommandResponse</code></a>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L40" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:40</a></p><p>Invoke a command</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="command" tabindex="-1">command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;command&quot;">​</a></h5><p>Command</p><h6 id="contentencoding" tabindex="-1">contentEncoding <a class="header-anchor" href="#contentencoding" aria-label="Permalink to &quot;contentEncoding&quot;">​</a></h6><p><code>string</code></p><p>content encoding of message payload</p><h6 id="contenttype" tabindex="-1">contentType <a class="header-anchor" href="#contenttype" aria-label="Permalink to &quot;contentType&quot;">​</a></h6><p><code>string</code></p><p>content type of message payload</p><h6 id="correlationid" tabindex="-1">correlationId <a class="header-anchor" href="#correlationid" aria-label="Permalink to &quot;correlationId&quot;">​</a></h6><p><code>string</code></p><p>correlation id to know which command response referrs to which command</p><h6 id="eventname" tabindex="-1">eventName? <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName?&quot;">​</a></h6><p><code>string</code></p><p>event name for this message</p><h6 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h6><p><code>string</code></p><p>global unique id of message</p><h6 id="messagetype" tabindex="-1">messageType <a class="header-anchor" href="#messagetype" aria-label="Permalink to &quot;messageType&quot;">​</a></h6><p><a href="./../../core/enumerations/EBMessageType.html#command"><code>Command</code></a></p><h6 id="otp" tabindex="-1">otp? <a class="header-anchor" href="#otp" aria-label="Permalink to &quot;otp?&quot;">​</a></h6><p><code>string</code></p><p>stringified Opentelemetry parent trace id</p><h6 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h6><p>{ <code>parameter</code>: <code>unknown</code>; <code>payload</code>: <code>unknown</code>; }</p><h6 id="payload-parameter" tabindex="-1">payload.parameter <a class="header-anchor" href="#payload-parameter" aria-label="Permalink to &quot;payload.parameter&quot;">​</a></h6><p><code>unknown</code></p><h6 id="payload-payload" tabindex="-1">payload.payload <a class="header-anchor" href="#payload-payload" aria-label="Permalink to &quot;payload.payload&quot;">​</a></h6><p><code>unknown</code></p><h6 id="principalid" tabindex="-1">principalId? <a class="header-anchor" href="#principalid" aria-label="Permalink to &quot;principalId?&quot;">​</a></h6><p><code>string</code></p><p>principal id</p><h6 id="receiver" tabindex="-1">receiver <a class="header-anchor" href="#receiver" aria-label="Permalink to &quot;receiver&quot;">​</a></h6><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h6 id="sender" tabindex="-1">sender <a class="header-anchor" href="#sender" aria-label="Permalink to &quot;sender&quot;">​</a></h6><p>{ <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }</p><h6 id="sender-instanceid" tabindex="-1">sender.instanceId <a class="header-anchor" href="#sender-instanceid" aria-label="Permalink to &quot;sender.instanceId&quot;">​</a></h6><p><code>string</code></p><p>instance id of eventbridge</p><h6 id="sender-servicename" tabindex="-1">sender.serviceName <a class="header-anchor" href="#sender-servicename" aria-label="Permalink to &quot;sender.serviceName&quot;">​</a></h6><p><code>string</code></p><p>the name of the service</p><h6 id="sender-servicetarget" tabindex="-1">sender.serviceTarget <a class="header-anchor" href="#sender-servicetarget" aria-label="Permalink to &quot;sender.serviceTarget&quot;">​</a></h6><p><code>string</code></p><p>the name of the command or subscription</p><h6 id="sender-serviceversion" tabindex="-1">sender.serviceVersion <a class="header-anchor" href="#sender-serviceversion" aria-label="Permalink to &quot;sender.serviceVersion&quot;">​</a></h6><p><code>string</code></p><p>the version of the service</p><h6 id="tenantid" tabindex="-1">tenantId? <a class="header-anchor" href="#tenantid" aria-label="Permalink to &quot;tenantId?&quot;">​</a></h6><p><code>string</code></p><p>principal id</p><h6 id="timestamp" tabindex="-1">timestamp <a class="header-anchor" href="#timestamp" aria-label="Permalink to &quot;timestamp&quot;">​</a></h6><p><code>number</code></p><p>timestamp of message creation time</p><h6 id="traceid" tabindex="-1">traceId? <a class="header-anchor" href="#traceid" aria-label="Permalink to &quot;traceId?&quot;">​</a></h6><p><code>string</code></p><p>trace id of message</p><h5 id="headers" tabindex="-1">headers? <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;headers?&quot;">​</a></h5><p><code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;</p><p>optional HTTP header</p><h5 id="timeout" tabindex="-1">timeout? <a class="header-anchor" href="#timeout" aria-label="Permalink to &quot;timeout?&quot;">​</a></h5><p><code>number</code></p><p>the command timeout</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./../../core/type-aliases/CommandResponse.html"><code>CommandResponse</code></a>&gt;</p><hr><h3 id="issidecaravailable" tabindex="-1">isSidecarAvailable() <a class="header-anchor" href="#issidecaravailable" aria-label="Permalink to &quot;isSidecarAvailable()&quot;">​</a></h3><blockquote><p><strong>isSidecarAvailable</strong>: () =&gt; <code>Promise</code>&lt;<code>boolean</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L54" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:54</a></p><p>Checks if the sidecar container is available to be able to send events and invoke commands</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>boolean</p><hr><h3 id="sendevent" tabindex="-1">sendEvent() <a class="header-anchor" href="#sendevent" aria-label="Permalink to &quot;sendEvent()&quot;">​</a></h3><blockquote><p><strong>sendEvent</strong>: (<code>message</code>, <code>headers</code>?) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts#L48" target="_blank" rel="noreferrer">base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeClient.ts:48</a></p><p>Send a EBMessage as event to the underlaying message infrastructure.</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h5><p><a href="./../../core/type-aliases/EBMessage.html"><code>EBMessage</code></a></p><h5 id="headers-1" tabindex="-1">headers? <a class="header-anchor" href="#headers-1" aria-label="Permalink to &quot;headers?&quot;">​</a></h5><p><code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p>',132)]))}const b=a(s,[["render",n]]);export{m as __pageData,b as default};
