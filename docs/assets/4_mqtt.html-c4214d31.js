import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as e,d as n,e as s,w as i,a as r}from"./app-9aedf0b4.js";const u="/graphic/mqtt_event_bridge_header.png",d={},h=e("p",null,[e("img",{src:u,alt:"AMQP event bridge"})],-1),m=e("h2",{id:"general",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#general","aria-hidden":"true"},"#"),n(" General")],-1),k={href:"https://mosquitto.org",target:"_blank",rel:"noopener noreferrer"},g=r('<p>The MQTT protocol version 5 has some interesting additions, like shared subscriptions, session ttl, message ttl and response fields. This reduces the gap between available broker features and our needs.</p><p>PURISTA provides the <code>@purista/mqttbridge</code></p><div class="hint-container tip"><p class="hint-container-title">Pros</p><ul><li>allows scaling</li><li>fault tollerant</li><li>MQTT is a mature protocol and widely used (IoT/edge)</li></ul></div><div class="hint-container danger"><p class="hint-container-title">Cons</p><ul><li>needs managing of an MQTT broker</li><li>only MQTT 5 is supported</li><li>hard to handle dead letters</li></ul></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2><p>The MQTT event bridge uses the unified configuration schema as all event bridges.</p>',6),v={class:"hint-container info"},b=e("p",{class:"hint-container-title"},"API documentation",-1),f=r(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MqttBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/mqttbridge&#39;</span>

<span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="topic-names" tabindex="-1"><a class="header-anchor" href="#topic-names" aria-hidden="true">#</a> Topic names</h2><p>The MQTT protocol relays on topics for message publishing/subscribe.</p><p>PURISTA is using the following schema for topics:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> topicPrefix <span class="token operator">=</span> config<span class="token punctuation">.</span>topicPrefix
<span class="token keyword">const</span> empty <span class="token operator">=</span> config<span class="token punctuation">.</span>emptyTopicPartString

<span class="token keyword">const</span> path <span class="token function">join</span><span class="token punctuation">(</span>
  topicPrefix<span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>messageType<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>principalId <span class="token operator">||</span> empty<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>instanceId<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>serviceVersion<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>serviceTarget<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>eventName <span class="token operator">||</span> empty<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message <span class="token keyword">as</span> Command<span class="token punctuation">)</span><span class="token punctuation">.</span>receiver<span class="token operator">?.</span>instanceId <span class="token operator">||</span> empty<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message <span class="token keyword">as</span> Command<span class="token punctuation">)</span><span class="token punctuation">.</span>receiver<span class="token operator">?.</span>serviceName <span class="token operator">||</span> empty<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message <span class="token keyword">as</span> Command<span class="token punctuation">)</span><span class="token punctuation">.</span>receiver<span class="token operator">?.</span>serviceVersion <span class="token operator">||</span> empty<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">convertToSnakeCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message <span class="token keyword">as</span> Command<span class="token punctuation">)</span><span class="token punctuation">.</span>receiver<span class="token operator">?.</span>serviceTarget <span class="token operator">||</span> empty<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows to have subscriptions for very specific messages.<br> The MQTT 5 topic alias feature is used for mapping a message to the correlating subscription.</p><h3 id="shared-subscriptions" tabindex="-1"><a class="header-anchor" href="#shared-subscriptions" aria-hidden="true">#</a> Shared subscriptions</h3><p>Subscriptions are per default MQTT 5 shared subscriptions.<br> Shared subscriptions in MQTT are simple to use. It only requires prefixing the topic with <code>$share</code> and a shared subscription name (pubsub name).</p><div class="hint-container danger"><p class="hint-container-title">Be aware</p><p>The shared subscription name (pubsub name) must differ from the topic prefix. Otherwise shared subscriptions are not working (at least in mosquitto). <code>$share/purista/purista/...</code> does not work, while <code>$share/purista_group/purista/...</code> is working</p></div><p>To align these settings, the configuration provides <code>shareTopicPrefix</code> which defaults to <code>$share</code> and should work on most of the brokers.<br> If the broker might require some different prefix, you can align it here.<br> The <code>shareTopicName</code> can be used to set a custom name for your shared subscriptions to prevent name collisions or to use a broker, which is a multi-tenant broker. It defaults to <code>sharedpurista</code>.</p><h2 id="message-timeouts-qos-and-subscriptions" tabindex="-1"><a class="header-anchor" href="#message-timeouts-qos-and-subscriptions" aria-hidden="true">#</a> Message timeouts, QOS, and subscriptions</h2><p>The configuration for the <code>MqttEventBridge</code> differentiates between command &amp; command responses and subscriptions.</p><p>Commands and command responses are basically short-living messages, which are only needed for the time a command is requested, executed and the result is returned.<br> The timeout handling of invocations will be triggered, if commands can&#39;t be handled within the given time.<br> Because of this, we can set command requests and responses to lower QOS and set a low MQTT message expiry time.<br> This will reduce resource consumption and prevent the broker from storing unnecessary data for a long time.</p><p>You can use the MQTT event bridge config options <code>qosCommand</code> and <code>defaultCommandTimeout</code> to align it to your needs.</p><p>On the other hand, subscriptions will need to receive every subscribed message at least once, and they can run at any time.<br> To prevent timing issues, a few things will automatically happen.</p><p>If a command request has the <code>eventName</code> field set as an event name, the command request will be published with the <code>defaultMessageExpiryInterval</code> message expiry time. Otherwise, the <code>defaultCommandTimeout</code> is used, which is most likely a much smaller value.<br> Also, the QOS level is set to the higher value of <code>qosCommand</code> or <code>qoSSubscription</code>. The value of <code>qoSSubscription</code> will most likely be the same or a higher value than <code>qosCommand</code>.<br> This will ensure subscriptions are getting the command request message - if an event name is set.<br> Command responses will have the same behavior.</p><h2 id="hints" tabindex="-1"><a class="header-anchor" href="#hints" aria-hidden="true">#</a> Hints</h2><div class="hint-container warning"><p class="hint-container-title">Ensure settings across instances</p><p>Remember to ensure, that QOS, prefixes, and so on are the same on every event bridge instance.<br> Otherwise, you might get some unexpected behaviors.</p></div>`,19),_={class:"hint-container tip"},T=e("p",{class:"hint-container-title"},"OpenTelemetry",-1),w=e("br",null,null,-1),y={href:"https://w3c.github.io/trace-context-mqtt/",target:"_blank",rel:"noopener noreferrer"},q=e("h2",{id:"brokers-and-tools",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#brokers-and-tools","aria-hidden":"true"},"#"),n(" Brokers and tools")],-1),x={href:"https://mosquitto.org/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.emqx.com/en/products/nanomq",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.emqx.com/en/products/mqttx",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.hivemq.com/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://vernemq.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://activemq.apache.org/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://twitter.com/purista_js",target:"_blank",rel:"noopener noreferrer"},B={href:"https://discord.gg/9feaUm3H2v",target:"_blank",rel:"noopener noreferrer"};function N(O,A){const a=o("ExternalLinkIcon"),t=o("RouterLink");return c(),l("div",null,[h,m,e("p",null,[n("MQTT with the popular "),e("a",k,[n("mosquitto broker"),s(a)]),n(" is one of the most mature and widely used messaging protocols.")]),g,e("div",v,[b,e("ul",null,[e("li",null,[s(t,{to:"/api/modules/purista_core.html#eventbridgeconfig"},{default:i(()=>[n("General event bridge config")]),_:1})]),e("li",null,[s(t,{to:"/api/modules/purista_mqttbridge.html#mqttbridgeconfig"},{default:i(()=>[n("MQTT bridge config")]),_:1})])])]),f,e("div",_,[T,e("p",null,[n("PURISTA is using the MQTT 5 user properties feature to add the OpenTelemetry information to each message, as recommended:"),w,e("a",y,[n("https://w3c.github.io/trace-context-mqtt/"),s(a)]),n(".")])]),q,e("ul",null,[e("li",null,[e("a",x,[n("Eclipse Mosquitto™"),s(a)])]),e("li",null,[e("a",S,[n("NanoMQ"),s(a)]),n(" and a MQTT UI "),e("a",M,[n("MQTTX"),s(a)])]),e("li",null,[e("a",C,[n("HiveMQ"),s(a)])]),e("li",null,[e("a",Q,[n("VerneMQ"),s(a)])]),e("li",null,[e("a",I,[n("ActiveMQ"),s(a)])])]),e("p",null,[e("strong",null,[n("You can follow updated on Twitter "),e("a",P,[n("@purista_js"),s(a)]),n(" or join the "),e("a",B,[n("Discord server"),s(a)]),n(" to get in touch with PURISTA maintainers and other developers.")])])])}const V=p(d,[["render",N],["__file","4_mqtt.html.vue"]]);export{V as default};
