import{_ as t,c as r,o,ag as a}from"./chunks/framework.U_AETC1W.js";const l=JSON.parse('{"title":"Type Alias: FromInvokeToOtherType<Entry, NewType>","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/FromInvokeToOtherType.md","filePath":"api/@purista/core/type-aliases/FromInvokeToOtherType.md","lastUpdated":1739900666000}'),p={name:"api/@purista/core/type-aliases/FromInvokeToOtherType.md"};function n(s,e,y,i,T,c){return o(),r("div",null,e[0]||(e[0]=[a('<p><a href="./../README.html"><strong>@purista/core v1.11.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / FromInvokeToOtherType</p><h1 id="type-alias-frominvoketoothertype-entry-newtype" tabindex="-1">Type Alias: FromInvokeToOtherType&lt;Entry, NewType&gt; <a class="header-anchor" href="#type-alias-frominvoketoothertype-entry-newtype" aria-label="Permalink to &quot;Type Alias: FromInvokeToOtherType\\&lt;Entry, NewType\\&gt;&quot;">​</a></h1><blockquote><p><strong>FromInvokeToOtherType</strong>&lt;<code>Entry</code>, <code>NewType</code>&gt;: <code>{ [TKey in keyof Entry]: { [TKey2 in keyof Entry[TKey]]: { [TKey3 in keyof Entry[TKey][TKey2]]: NewType } } }</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/types/FromInvokeToOtherType.ts#L6" target="_blank" rel="noreferrer">packages/core/src/core/types/FromInvokeToOtherType.ts:6</a></p><p>Changes the canInvoke proxy type to given type</p><p>serviceName.ServiceVersion.FunctionName becomes type of NewType</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Entry</strong></p><p>• <strong>NewType</strong></p>',11)]))}const m=t(p,[["render",n]]);export{l as __pageData,m as default};
