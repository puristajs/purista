import{_ as i,W as r,X as o,Z as e,a0 as s,a1 as a,$ as t,Y as n,D as l}from"./framework-d89ed822.js";const c={},h=e("h1",{id:"interface-eventbridge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-eventbridge","aria-hidden":"true"},"#"),t(" Interface: EventBridge")],-1),u=e("p",null,"Event bridge interface The event bridge must implement this interface.",-1),_=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),m=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),p=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),g=n('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="defaultcommandtimeout" tabindex="-1"><a class="header-anchor" href="#defaultcommandtimeout" aria-hidden="true">#</a> defaultCommandTimeout</h3><p>• <code>Readonly</code> <strong>defaultCommandTimeout</strong>: <code>number</code></p><p>The default time until when a command invocation automatically returns a time out error</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:13</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <code>Readonly</code> <strong>name</strong>: <code>string</code></p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:9</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>▸ <strong>destroy</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Shut down event bridge as gracefully as possible</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:64</p><hr><h3 id="emitmessage" tabindex="-1"><a class="header-anchor" href="#emitmessage" aria-hidden="true">#</a> emitMessage</h3>',21),f=e("strong",null,"emitMessage",-1),b=e("code",null,"message",-1),y=e("code",null,"Promise",-1),x=e("code",null,"Readonly",-1),k=e("code",null,"EBMessage",-1),v=e("p",null,"Emit a message to the eventbridge without awaiting a result",-1),B=e("h4",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters","aria-hidden":"true"},"#"),t(" Parameters")],-1),E=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),P=e("td",{style:{"text-align":"left"}},[e("code",null,"message")],-1),R={style:{"text-align":"left"}},C=e("code",null,"Omit",-1),T=e("code",null,"EBMessage",-1),D=e("code",null,'"id"',-1),M=e("code",null,'"timestamp"',-1),I=e("code",null,'"instanceId"',-1),S=e("code",null,'"correlationId"',-1),N=e("td",{style:{"text-align":"left"}},"the message",-1),w=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),A=e("code",null,"Promise",-1),O=e("code",null,"Readonly",-1),V=e("code",null,"EBMessage",-1),H=n('<h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:22</p><hr><h3 id="invoke" tabindex="-1"><a class="header-anchor" href="#invoke" aria-hidden="true">#</a> invoke</h3><p>▸ <strong>invoke</strong>&lt;<code>T</code>&gt;(<code>input</code>, <code>ttl?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>Call a command of a service and return the result of this command</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',9),L=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),U=e("td",{style:{"text-align":"left"}},[e("code",null,"input")],-1),W={style:{"text-align":"left"}},X=e("code",null,"Omit",-1),Y=e("code",null,"Command",-1),Z=e("code",null,'"id"',-1),$=e("code",null,'"messageType"',-1),j=e("code",null,'"timestamp"',-1),q=e("code",null,'"instanceId"',-1),z=e("code",null,'"correlationId"',-1),F=e("td",{style:{"text-align":"left"}},"a partial command message",-1),G=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"ttl?")]),e("td",{style:{"text-align":"left"}},[e("code",null,"number")]),e("td",{style:{"text-align":"left"}},"the time to live (timeout) of the invocation")],-1),J=n('<h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:30</p><hr><h3 id="ishealthy" tabindex="-1"><a class="header-anchor" href="#ishealthy" aria-hidden="true">#</a> isHealthy</h3><p>▸ <strong>isHealthy</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>Indicates if the eventbridge is running and works correctly</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:60</p><hr><h3 id="isready" tabindex="-1"><a class="header-anchor" href="#isready" aria-hidden="true">#</a> isReady</h3><p>▸ <strong>isReady</strong>(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>Indicates if the eventbridge has been started and is connected to underlaying message broker</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:56</p><hr><h3 id="registercommand" tabindex="-1"><a class="header-anchor" href="#registercommand" aria-hidden="true">#</a> registerCommand</h3><p>▸ <strong>registerCommand</strong>(<code>address</code>, <code>cb</code>, <code>metadata</code>, <code>eventBridgeConfig</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',24),K=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Q=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),ee={style:{"text-align":"left"}},te=e("code",null,"EBMessageAddress",-1),de=e("td",{style:{"text-align":"left"}},"the address of the service command (service name, version and command name)",-1),se=e("td",{style:{"text-align":"left"}},[e("code",null,"cb")],-1),ae={style:{"text-align":"left"}},ne=e("code",null,"message",-1),ie=e("code",null,"Command",-1),re=e("code",null,"Promise",-1),oe=e("code",null,"Readonly",-1),le=e("code",null,"Omit",-1),ce=e("code",null,"CommandSuccessResponse",-1),he=e("code",null,'"instanceId"',-1),ue=e("code",null,"Readonly",-1),_e=e("code",null,"Omit",-1),me=e("code",null,"CommandErrorResponse",-1),pe=e("code",null,'"instanceId"',-1),ge=e("td",{style:{"text-align":"left"}},"the function to be called if a matching command arrives",-1),fe=e("td",{style:{"text-align":"left"}},[e("code",null,"metadata")],-1),be={style:{"text-align":"left"}},ye=e("code",null,"CommandDefinitionMetadataBase",-1),xe=e("td",{style:{"text-align":"left"}},"-",-1),ke=e("td",{style:{"text-align":"left"}},[e("code",null,"eventBridgeConfig")],-1),ve={style:{"text-align":"left"}},Be=e("code",null,"DefinitionEventBridgeConfig",-1),Ee=e("td",{style:{"text-align":"left"}},"-",-1),Pe=n('<h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:36</p><hr><h3 id="registersubscription" tabindex="-1"><a class="header-anchor" href="#registersubscription" aria-hidden="true">#</a> registerSubscription</h3><p>▸ <strong>registerSubscription</strong>(<code>subscription</code>, <code>cb</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p><p>Register a new subscription</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4>',9),Re=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Ce=e("td",{style:{"text-align":"left"}},[e("code",null,"subscription")],-1),Te={style:{"text-align":"left"}},De=e("code",null,"Subscription",-1),Me=e("td",{style:{"text-align":"left"}},"the subscription definition",-1),Ie=e("td",{style:{"text-align":"left"}},[e("code",null,"cb")],-1),Se={style:{"text-align":"left"}},Ne=e("code",null,"message",-1),we=e("code",null,"EBMessage",-1),Ae=e("code",null,"Promise",-1),Oe=e("code",null,"undefined",-1),Ve=e("code",null,"Omit",-1),He=e("code",null,"CustomMessage",-1),Le=e("code",null,'"id"',-1),Ue=e("code",null,'"timestamp"',-1),We=e("code",null,'"instanceId"',-1),Xe=e("td",{style:{"text-align":"left"}},"the function to be called if a matching message arrives",-1),Ye=n('<h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>string</code>&gt;</p><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:47</p><hr><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><p>▸ <strong>start</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Start the eventbridge and connect to the underlaying message broker</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="defined-in-9" tabindex="-1"><a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:17</p><hr><h3 id="unregistercommand" tabindex="-1"><a class="header-anchor" href="#unregistercommand" aria-hidden="true">#</a> unregisterCommand</h3><p>▸ <strong>unregisterCommand</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>Unregister a service command</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',17),Ze=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),$e=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),je={style:{"text-align":"left"}},qe=e("code",null,"EBMessageAddress",-1),ze=e("td",{style:{"text-align":"left"}},"The address (service name, version and command name) of the command to be de-registered",-1),Fe=n('<h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="defined-in-10" tabindex="-1"><a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a> Defined in</h4><p>packages/core/lib/core/EventBridge/types/EventBridge.d.ts:41</p><hr><h3 id="unregistersubscription" tabindex="-1"><a class="header-anchor" href="#unregistersubscription" aria-hidden="true">#</a> unregisterSubscription</h3><p>▸ <strong>unregisterSubscription</strong>(<code>address</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4>',8),Ge=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Je=e("td",{style:{"text-align":"left"}},[e("code",null,"address")],-1),Ke={style:{"text-align":"left"}},Qe=e("code",null,"EBMessageAddress",-1),et=e("h4",{id:"returns-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),t(" Returns")],-1),tt=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),dt=e("h4",{id:"defined-in-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-11","aria-hidden":"true"},"#"),t(" Defined in")],-1),st=e("p",null,"packages/core/lib/core/EventBridge/types/EventBridge.d.ts:52",-1);function at(nt,it){const d=l("RouterLink");return r(),o("div",null,[e("p",null,[s(d,{to:"/api/"},{default:a(()=>[t("PURISTA API - v1.4.9")]),_:1}),t(" / "),s(d,{to:"/api/modules.html"},{default:a(()=>[t("Modules")]),_:1}),t(" / "),s(d,{to:"/api/modules/purista_k8s_sdk.html"},{default:a(()=>[t("@purista/k8s-sdk")]),_:1}),t(" / "),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html"},{default:a(()=>[t("internal")]),_:1}),t(" / EventBridge")]),h,e("p",null,[s(d,{to:"/api/modules/purista_k8s_sdk.html"},{default:a(()=>[t("@purista/k8s-sdk")]),_:1}),t("."),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html"},{default:a(()=>[t("internal")]),_:1}),t(".EventBridge")]),u,_,m,e("ul",null,[e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#defaultcommandtimeout"},{default:a(()=>[t("defaultCommandTimeout")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#name"},{default:a(()=>[t("name")]),_:1})])]),p,e("ul",null,[e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#destroy"},{default:a(()=>[t("destroy")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#emitmessage"},{default:a(()=>[t("emitMessage")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#invoke"},{default:a(()=>[t("invoke")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#ishealthy"},{default:a(()=>[t("isHealthy")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#isready"},{default:a(()=>[t("isReady")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#registercommand"},{default:a(()=>[t("registerCommand")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#registersubscription"},{default:a(()=>[t("registerSubscription")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#start"},{default:a(()=>[t("start")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#unregistercommand"},{default:a(()=>[t("unregisterCommand")]),_:1})]),e("li",null,[s(d,{to:"/api/interfaces/purista_k8s_sdk.internal.EventBridge.html#unregistersubscription"},{default:a(()=>[t("unregisterSubscription")]),_:1})])]),g,e("p",null,[t("▸ "),f,t("("),b,t("): "),y,t("<"),x,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessage"},{default:a(()=>[k]),_:1}),t(">>")]),v,B,e("table",null,[E,e("tbody",null,[e("tr",null,[P,e("td",R,[C,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessage"},{default:a(()=>[T]),_:1}),t(", "),D,t(" | "),M,t(" | "),I,t(" | "),S,t(">")]),N])])]),w,e("p",null,[A,t("<"),O,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessage"},{default:a(()=>[V]),_:1}),t(">>")]),H,e("table",null,[L,e("tbody",null,[e("tr",null,[U,e("td",W,[X,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#command-1"},{default:a(()=>[Y]),_:1}),t(", "),Z,t(" | "),$,t(" | "),j,t(" | "),q,t(" | "),z,t(">")]),F]),G])]),J,e("table",null,[K,e("tbody",null,[e("tr",null,[Q,e("td",ee,[s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessageaddress"},{default:a(()=>[te]),_:1})]),de]),e("tr",null,[se,e("td",ae,[t("("),ne,t(": "),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#command-1"},{default:a(()=>[ie]),_:1}),t(") => "),re,t("<"),oe,t("<"),le,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#commandsuccessresponse-1"},{default:a(()=>[ce]),_:1}),t(", "),he,t(">> | "),ue,t("<"),_e,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#commanderrorresponse-1"},{default:a(()=>[me]),_:1}),t(", "),pe,t(">>>")]),ge]),e("tr",null,[fe,e("td",be,[s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#commanddefinitionmetadatabase"},{default:a(()=>[ye]),_:1})]),xe]),e("tr",null,[ke,e("td",ve,[s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#definitioneventbridgeconfig"},{default:a(()=>[Be]),_:1})]),Ee])])]),Pe,e("table",null,[Re,e("tbody",null,[e("tr",null,[Ce,e("td",Te,[s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#subscription"},{default:a(()=>[De]),_:1})]),Me]),e("tr",null,[Ie,e("td",Se,[t("("),Ne,t(": "),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessage"},{default:a(()=>[we]),_:1}),t(") => "),Ae,t("<"),Oe,t(" | "),Ve,t("<"),s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#custommessage-1"},{default:a(()=>[He]),_:1}),t(", "),Le,t(" | "),Ue,t(" | "),We,t(">>")]),Xe])])]),Ye,e("table",null,[Ze,e("tbody",null,[e("tr",null,[$e,e("td",je,[s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessageaddress"},{default:a(()=>[qe]),_:1})]),ze])])]),Fe,e("table",null,[Ge,e("tbody",null,[e("tr",null,[Je,e("td",Ke,[s(d,{to:"/api/modules/purista_k8s_sdk.internal.html#ebmessageaddress"},{default:a(()=>[Qe]),_:1})])])])]),et,tt,dt,st])}const ot=i(c,[["render",at],["__file","purista_k8s_sdk.internal.EventBridge.html.vue"]]);export{ot as default};
