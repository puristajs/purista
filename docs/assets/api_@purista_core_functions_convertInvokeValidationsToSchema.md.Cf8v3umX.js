import{_ as o,c as a,o as t,ag as c}from"./chunks/framework.U_AETC1W.js";const p=JSON.parse('{"title":"Function: convertInvokeValidationsToSchema()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/functions/convertInvokeValidationsToSchema.md","filePath":"api/@purista/core/functions/convertInvokeValidationsToSchema.md","lastUpdated":1739900666000}'),r={name:"api/@purista/core/functions/convertInvokeValidationsToSchema.md"};function n(s,e,i,d,h,l){return t(),a("div",null,e[0]||(e[0]=[c('<p><a href="./../README.html"><strong>@purista/core v1.11.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / convertInvokeValidationsToSchema</p><h1 id="function-convertinvokevalidationstoschema" tabindex="-1">Function: convertInvokeValidationsToSchema() <a class="header-anchor" href="#function-convertinvokevalidationstoschema" aria-label="Permalink to &quot;Function: convertInvokeValidationsToSchema()&quot;">​</a></h1><blockquote><p><strong>convertInvokeValidationsToSchema</strong>&lt;<code>T</code>&gt;(<code>invokes</code>): <code>Promise</code>&lt;<a href="./../type-aliases/FromInvokeToOtherType.html"><code>FromInvokeToOtherType</code></a>&lt;<code>T</code>, { <code>outputSchema</code>: <code>SchemaObject</code>; <code>parameterSchema</code>: <code>SchemaObject</code>; <code>payloadSchema</code>: <code>SchemaObject</code>; }&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/helper/convertInvokeValidationsToSchema.impl.ts#L30" target="_blank" rel="noreferrer">packages/core/src/helper/convertInvokeValidationsToSchema.impl.ts:30</a></p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <code>InputType</code></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="invokes" tabindex="-1">invokes <a class="header-anchor" href="#invokes" aria-label="Permalink to &quot;invokes&quot;">​</a></h3><p><code>T</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Promise</code>&lt;<a href="./../type-aliases/FromInvokeToOtherType.html"><code>FromInvokeToOtherType</code></a>&lt;<code>T</code>, { <code>outputSchema</code>: <code>SchemaObject</code>; <code>parameterSchema</code>: <code>SchemaObject</code>; <code>payloadSchema</code>: <code>SchemaObject</code>; }&gt;&gt;</p>',13)]))}const u=o(r,[["render",n]]);export{p as __pageData,u as default};
