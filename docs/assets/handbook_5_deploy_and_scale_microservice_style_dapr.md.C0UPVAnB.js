import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.U_AETC1W.js";const t="/graphic/dapr.svg",y=JSON.parse('{"title":"Deploy to Dapr","description":"Deploy your typescript application in a microservice styled way","frontmatter":{"title":"Deploy to Dapr","description":"Deploy your typescript application in a microservice styled way","order":503020},"headers":[],"relativePath":"handbook/5_deploy_and_scale/microservice_style/dapr.md","filePath":"handbook/5_deploy_and_scale/microservice_style/dapr.md","lastUpdated":1710090869000}'),p={name:"handbook/5_deploy_and_scale/microservice_style/dapr.md"};function r(l,s,o,h,d,k){return e(),i("div",null,s[0]||(s[0]=[n('<h1 id="deploy-to-dapr" tabindex="-1">Deploy to Dapr <a class="header-anchor" href="#deploy-to-dapr" aria-label="Permalink to &quot;Deploy to Dapr&quot;">​</a></h1><h2 id="dapr-core-concept" tabindex="-1">Dapr core concept <a class="header-anchor" href="#dapr-core-concept" aria-label="Permalink to &quot;Dapr core concept&quot;">​</a></h2><p>Deployments to Dapr as similar to Kubernetes deployments. Your single services are deployed as container (pod) on a Kubernetes cluster. On plain Kubernetes deployments, the event bridge of a service is directly connected to the message broker. If you are on a Dapr infrastructure, Dapr will automatically add a sidecar container to your service instance. The whole communication from and to your service is passed through this sidecar container.</p><p>Dapr also provides some abstraction and adapters for config, state and secret stores.</p><p>To learn more about Dapr, visit the official site <strong><a href="https://dapr.io/" target="_blank" rel="noreferrer">dapr.io</a></strong>.</p><p><img src="'+t+`" alt="single instance"></p><h2 id="prepare-your-code" tabindex="-1">Prepare your code <a class="header-anchor" href="#prepare-your-code" aria-label="Permalink to &quot;Prepare your code&quot;">​</a></h2><p>Similar to Kubernetes deployments, a http server must be provided by your service instance. The <code>@purista/dapr-sdk</code> package provides an event bridge which working as HTTP server. In addition, adapters for config, state and secrets stores are available.</p><p>You can find an example in the <a href="https://github.com/puristajs/purista/tree/master/examples/dapr-example" target="_blank" rel="noreferrer">PURISTA repository</a>. This example also contains the usage of the Dapr config store, secret store and state store.</p><h3 id="kubernetes-deployment-file" tabindex="-1">Kubernetes deployment file <a class="header-anchor" href="#kubernetes-deployment-file" aria-label="Permalink to &quot;Kubernetes deployment file&quot;">​</a></h3><p>The deployment of an application or service follows teh regular Kubernetes deployment. The only difference here is, to provide the information, required by Dapr to work properly.</p><p>Dapr requires to have a unique app-ID for a service defined in the deployment. This id match the pattern <code>[prefix-][convertToKebabCase(service-name)]-v[convertToKebabCase(service version)]</code>. If the app-ID does not follow this pattern, PURISTA services might be not able to invoke commands or subscribe to events correctly</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># file order-service-deployment.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">purista-order-service-deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">purista-order-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # We add the annotations below to let Dapr recognize</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # and deploy the sidecar together with our service in the pod.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        dapr.io/enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # The client service will use this name to locate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # the Order service through the Dapr sidecar.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        dapr.io/app-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;purista-order-v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # The port that your application is listening on</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        dapr.io/app-port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3000&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">purista-order-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      containers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">purista-order-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example/dapr-example-purista-order-service</span></span></code></pre></div><h3 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h3><p>Dapr provides some additional functionality, like the concept of actors or bulk messageing. Currently these functionalities are not supported by the <code>@purista/dapr-sdk</code></p><p>It is also not possible to deploy multiple services or service versions in one container (pod). Each service/service-version must be deployed independently.</p>`,16)]))}const E=a(p,[["render",r]]);export{y as __pageData,E as default};
