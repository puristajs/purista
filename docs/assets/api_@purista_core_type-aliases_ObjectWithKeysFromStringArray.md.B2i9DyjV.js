import{_ as r,c as t,o as a,ag as s}from"./chunks/framework.U_AETC1W.js";const h=JSON.parse('{"title":"Type Alias: ObjectWithKeysFromStringArray<T, Value>","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/ObjectWithKeysFromStringArray.md","filePath":"api/@purista/core/type-aliases/ObjectWithKeysFromStringArray.md","lastUpdated":1739900666000}'),o={name:"api/@purista/core/type-aliases/ObjectWithKeysFromStringArray.md"};function i(n,e,c,p,l,y){return a(),t("div",null,e[0]||(e[0]=[s('<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / ObjectWithKeysFromStringArray</p><h1 id="type-alias-objectwithkeysfromstringarray-t-value" tabindex="-1">Type Alias: ObjectWithKeysFromStringArray&lt;T, Value&gt; <a class="header-anchor" href="#type-alias-objectwithkeysfromstringarray-t-value" aria-label="Permalink to &quot;Type Alias: ObjectWithKeysFromStringArray\\&lt;T, Value\\&gt;&quot;">​</a></h1><blockquote><p><strong>ObjectWithKeysFromStringArray</strong>&lt;<code>T</code>, <code>Value</code>&gt;: <code>{ [K in T extends ReadonlyArray&lt;infer U&gt; ? U : never]: Value }</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/helper/types/ObjectWithKeysFromStringArray.ts#L5" target="_blank" rel="noreferrer">packages/core/src/helper/types/ObjectWithKeysFromStringArray.ts:5</a></p><p>Type helper which can create a typed record, based on given string array type.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <code>ReadonlyArray</code>&lt;<code>string</code>&gt;</p><p>• <strong>Value</strong> = <code>unknown</code> | <code>undefined</code></p>',10)]))}const g=r(o,[["render",i]]);export{h as __pageData,g as default};
