import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as c,c as l,b as e,e as d,w as o,d as t,a as i}from"./app-9aedf0b4.js";const h={},g=i(`<h1 id="module-purista-mqttbridge" tabindex="-1"><a class="header-anchor" href="#module-purista-mqttbridge" aria-hidden="true">#</a> Module: @purista/mqttbridge</h1><p>Package for using a MQTT broker like rabbitMQ as event bridge.</p><p>Example usage:</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MqttBridge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/mqttbridge&#39;</span>

<span class="token comment">// create and init our eventbridge</span>
<span class="token keyword">const</span> eventBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> eventBridge<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3>`,7),p=e("h3",{id:"type-aliases",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-aliases","aria-hidden":"true"},"#"),t(" Type Aliases")],-1),u=e("h3",{id:"functions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),t(" Functions")],-1),m=i('<h2 id="type-aliases-1" tabindex="-1"><a class="header-anchor" href="#type-aliases-1" aria-hidden="true">#</a> Type Aliases</h2><h3 id="isubscriptionresponse" tabindex="-1"><a class="header-anchor" href="#isubscriptionresponse" aria-hidden="true">#</a> ISubscriptionResponse</h3><p>Ƭ <strong>ISubscriptionResponse</strong>: <code>Prettify</code>&lt;<code>ISubscriptionGrant</code> &amp; { <code>properties?</code>: { <code>subscriptionIdentifier?</code>: <code>number</code> } }&gt;</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4>',4),f={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/AsyncClient/AsyncClient.ts#L12",target:"_blank",rel:"noopener noreferrer"},_=e("hr",null,null,-1),b=e("h3",{id:"incomingmessagefunction",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#incomingmessagefunction","aria-hidden":"true"},"#"),t(" IncomingMessageFunction")],-1),y=e("strong",null,"IncomingMessageFunction",-1),x=e("code",null,"this",-1),q=e("code",null,"MqttBridge",-1),k=e("code",null,"payload",-1),T=e("code",null,"EBMessage",-1),v=e("code",null,"packet",-1),M=e("code",null,"IPublishPacket",-1),S=e("code",null,"Promise",-1),C=e("code",null,"void",-1),B=i('<h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><p>▸ (<code>this</code>, <code>payload</code>, <code>packet</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h5>',3),I=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),N=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),P={style:{"text-align":"left"}},w=e("code",null,"MqttBridge",-1),D=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessage")])],-1),R=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"packet")]),e("td",{style:{"text-align":"left"}},[e("code",null,"IPublishPacket")])],-1),E=e("h5",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),L=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),A=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),F={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/types/IncomingMessageFunction.ts#L6",target:"_blank",rel:"noopener noreferrer"},H=i('<hr><h3 id="mqttbridgeconfig" tabindex="-1"><a class="header-anchor" href="#mqttbridgeconfig" aria-hidden="true">#</a> MqttBridgeConfig</h3><p>Ƭ <strong>MqttBridgeConfig</strong>: <code>Prettify</code>&lt;{ <code>allowRetries?</code>: <code>boolean</code> ; <code>defaultMessageExpiryInterval</code>: <code>number</code> ; <code>defaultSessionExpiryInterval</code>: <code>number</code> ; <code>emptyTopicPartString</code>: <code>string</code> ; <code>qoSSubscription</code>: <code>QoS</code> ; <code>qosCommand</code>: <code>QoS</code> ; <code>shareTopicName</code>: <code>string</code> ; <code>shareTopicPrefix</code>: <code>string</code> ; <code>topicPrefix</code>: <code>string</code> } &amp; <code>IClientOptions</code>&gt;</p><p>the configuration for the MQTT event bridge</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4>',5),Q={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/types/MqttBridgeConfig.ts#L7",target:"_blank",rel:"noopener noreferrer"},V=e("h2",{id:"functions-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions-1","aria-hidden":"true"},"#"),t(" Functions")],-1),O=e("h3",{id:"getcommandhandler",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getcommandhandler","aria-hidden":"true"},"#"),t(" getCommandHandler")],-1),j=e("strong",null,"getCommandHandler",-1),G=e("code",null,"address",-1),U=e("code",null,"cb",-1),$=e("code",null,"_metadata",-1),z=e("code",null,"_eventBridgeConfig",-1),J=e("code",null,"IncomingMessageFunction",-1),K=i('<h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>address</code></td><td style="text-align:left;"><code>EBMessageAddress</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>Command</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>parameter</code>: <code>unknown</code> ; <code>payload</code>: <code>unknown</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code> ; <code>contentType</code>: <code>&quot;application/json&quot;</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>isHandledError</code>: <code>boolean</code> ; <code>messageType</code>: <code>CommandErrorResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: { <code>data?</code>: <code>unknown</code> ; <code>message</code>: <code>string</code> ; <code>status</code>: <code>StatusCode</code> } ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> } | { <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId</code>: <code>string</code> ; <code>eventName?</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CommandSuccessResponse</code> ; <code>otp?</code>: <code>string</code> ; <code>payload</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }&gt;</td></tr><tr><td style="text-align:left;"><code>_metadata</code></td><td style="text-align:left;"><code>CommandDefinitionMetadataBase</code></td></tr><tr><td style="text-align:left;"><code>_eventBridgeConfig</code></td><td style="text-align:left;"><code>DefinitionEventBridgeConfig</code></td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4>',3),W=e("code",null,"IncomingMessageFunction",-1),X=e("h4",{id:"defined-in-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-3","aria-hidden":"true"},"#"),t(" Defined in")],-1),Y={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/handler/getCommandHandler.impl.ts#L27",target:"_blank",rel:"noopener noreferrer"},Z=e("hr",null,null,-1),ee=e("h3",{id:"getcommandresponsesubscriptiontopic",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getcommandresponsesubscriptiontopic","aria-hidden":"true"},"#"),t(" getCommandResponseSubscriptionTopic")],-1),te=e("p",null,[t("▸ "),e("strong",null,"getCommandResponseSubscriptionTopic"),t("("),e("code",null,"this"),t("): "),e("code",null,"string")],-1),de=e("h4",{id:"parameters-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters-2","aria-hidden":"true"},"#"),t(" Parameters")],-1),se=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),oe=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),ne={style:{"text-align":"left"}},ie=e("code",null,"MqttBridge",-1),ae=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2","aria-hidden":"true"},"#"),t(" Returns")],-1),re=e("p",null,[e("code",null,"string")],-1),ce=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),le={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getCommandResponseSubscriptionTopic.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},he=i('<hr><h3 id="getcommandsubscriptiontopic" tabindex="-1"><a class="header-anchor" href="#getcommandsubscriptiontopic" aria-hidden="true">#</a> getCommandSubscriptionTopic</h3><p>▸ <strong>getCommandSubscriptionTopic</strong>(<code>this</code>, <code>address</code>): <code>string</code></p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4>',4),ge=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),pe=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),ue={style:{"text-align":"left"}},me=e("code",null,"MqttBridge",-1),fe=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"address")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessageAddress")])],-1),_e=e("h4",{id:"returns-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-3","aria-hidden":"true"},"#"),t(" Returns")],-1),be=e("p",null,[e("code",null,"string")],-1),ye=e("h4",{id:"defined-in-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-5","aria-hidden":"true"},"#"),t(" Defined in")],-1),xe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getCommandSubscriptionTopic.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},qe=i('<hr><h3 id="getdefaultmqttbridgeconfig" tabindex="-1"><a class="header-anchor" href="#getdefaultmqttbridgeconfig" aria-hidden="true">#</a> getDefaultMqttBridgeConfig</h3><p>▸ <strong>getDefaultMqttBridgeConfig</strong>(): <code>Object</code></p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>allowRetries?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">allow retry of the initial connect</td></tr><tr><td style="text-align:left;"><code>defaultMessageExpiryInterval</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">the message expiry interval in seconds <strong><code>Default</code></strong> <code>ts </code></td></tr><tr><td style="text-align:left;"><code>defaultSessionExpiryInterval</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;"><strong><code>Default</code></strong> <code>ts 0 </code></td></tr><tr><td style="text-align:left;"><code>emptyTopicPartString</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The string which should be used in topics for parts, which are undefined <strong><code>Default</code></strong> <code>ts __none__ </code></td></tr><tr><td style="text-align:left;"><code>qoSSubscription</code></td><td style="text-align:left;"><code>QoS</code></td><td style="text-align:left;">QOS for all subscriptions <strong><code>Default</code></strong> <code>ts 1 </code></td></tr><tr><td style="text-align:left;"><code>qosCommand</code></td><td style="text-align:left;"><code>QoS</code></td><td style="text-align:left;">QOS for command, command responses and command response subscriptions messages <strong><code>Default</code></strong> <code>ts 1 </code></td></tr><tr><td style="text-align:left;"><code>shareTopicName</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the name of the shared topic (similar to pubsub name) <strong><code>Default</code></strong> <code>ts sharedpurista </code></td></tr><tr><td style="text-align:left;"><code>shareTopicPrefix</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix to be used to dynamically create topic names for shared subscriptions <strong><code>Default</code></strong> <code>ts $share </code></td></tr><tr><td style="text-align:left;"><code>topicPrefix</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix for topic to prevent name collisions <strong><code>Default</code></strong> <code>ts purista </code></td></tr></tbody></table><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4>',7),ke={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/getDefaultMqttBridgeConfig.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"},Te=i('<hr><h3 id="getsharedtopicname" tabindex="-1"><a class="header-anchor" href="#getsharedtopicname" aria-hidden="true">#</a> getSharedTopicName</h3><p>▸ <strong>getSharedTopicName</strong>(<code>this</code>, <code>topic</code>): <code>string</code></p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',4),ve=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Me=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),Se={style:{"text-align":"left"}},Ce=e("code",null,"MqttBridge",-1),Be=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"topic")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")])],-1),Ie=e("h4",{id:"returns-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-5","aria-hidden":"true"},"#"),t(" Returns")],-1),Ne=e("p",null,[e("code",null,"string")],-1),Pe=e("h4",{id:"defined-in-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-7","aria-hidden":"true"},"#"),t(" Defined in")],-1),we={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getSharedTopicName.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"},De=e("hr",null,null,-1),Re=e("h3",{id:"getsubscriptionhandler",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getsubscriptionhandler","aria-hidden":"true"},"#"),t(" getSubscriptionHandler")],-1),Ee=e("strong",null,"getSubscriptionHandler",-1),Le=e("code",null,"_subscription",-1),Ae=e("code",null,"cb",-1),Fe=e("code",null,"IncomingMessageFunction",-1),He=i('<h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>_subscription</code></td><td style="text-align:left;"><code>Subscription</code></td></tr><tr><td style="text-align:left;"><code>cb</code></td><td style="text-align:left;">(<code>message</code>: <code>EBMessage</code>) =&gt; <code>Promise</code>&lt;<code>undefined</code> | <code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>string</code> ; <code>contentType</code>: <code>string</code> ; <code>correlationId?</code>: <code>string</code> ; <code>eventName</code>: <code>string</code> ; <code>id</code>: <code>string</code> ; <code>messageType</code>: <code>CustomMessage</code> ; <code>otp?</code>: <code>string</code> ; <code>payload?</code>: <code>unknown</code> ; <code>principalId?</code>: <code>string</code> ; <code>receiver?</code>: <code>EBMessageAddress</code> ; <code>sender</code>: { serviceName: string; serviceVersion: string; serviceTarget: string; instanceId: string; } ; <code>timestamp</code>: <code>number</code> ; <code>traceId?</code>: <code>string</code> }, <code>&quot;id&quot;</code> | <code>&quot;timestamp&quot;</code>&gt;&gt;</td></tr></tbody></table><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4>',3),Qe=e("code",null,"IncomingMessageFunction",-1),Ve=e("h4",{id:"defined-in-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-8","aria-hidden":"true"},"#"),t(" Defined in")],-1),Oe={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/handler/getSubscriptionHandler.impl.ts#L21",target:"_blank",rel:"noopener noreferrer"},je=i('<hr><h3 id="getsubscriptiontopic" tabindex="-1"><a class="header-anchor" href="#getsubscriptiontopic" aria-hidden="true">#</a> getSubscriptionTopic</h3><p>▸ <strong>getSubscriptionTopic</strong>(<code>this</code>, <code>subscription</code>): <code>string</code></p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4>',4),Ge=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),Ue=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),$e={style:{"text-align":"left"}},ze=e("code",null,"MqttBridge",-1),Je=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"subscription")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Subscription")])],-1),Ke=e("h4",{id:"returns-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-7","aria-hidden":"true"},"#"),t(" Returns")],-1),We=e("p",null,[e("code",null,"string")],-1),Xe=e("h4",{id:"defined-in-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-9","aria-hidden":"true"},"#"),t(" Defined in")],-1),Ye={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getSubscriptionTopic.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},Ze=i('<hr><h3 id="gettopicname" tabindex="-1"><a class="header-anchor" href="#gettopicname" aria-hidden="true">#</a> getTopicName</h3><p>▸ <strong>getTopicName</strong>(<code>this</code>, <code>message</code>): <code>string</code></p><p>Calculates the MQTT topic name for a message which should be sent. Something like: purista/ message_type/ principal_id/ sender_instance_id/ sender_name/ sender_version/ sender_target/ eventname/ sender_instance_id/ receiver_name/ receiver_version/ receiver_target</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4>',5),et=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),tt=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),dt={style:{"text-align":"left"}},st=e("code",null,"MqttBridge",-1),ot=e("td",{style:{"text-align":"left"}},"-",-1),nt=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"message")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessage")]),e("td",{style:{"text-align":"left"}},"the message to send")],-1),it=e("h4",{id:"returns-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-8","aria-hidden":"true"},"#"),t(" Returns")],-1),at=e("p",null,[e("code",null,"string")],-1),rt=e("p",null,"the MQTT topic",-1),ct=e("h4",{id:"defined-in-10",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-10","aria-hidden":"true"},"#"),t(" Defined in")],-1),lt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/getTopicName.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"},ht=i('<hr><h3 id="handlecommandresponse" tabindex="-1"><a class="header-anchor" href="#handlecommandresponse" aria-hidden="true">#</a> handleCommandResponse</h3><p>▸ <strong>handleCommandResponse</strong>(<code>this</code>, <code>payload</code>, <code>packet</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4>',4),gt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),pt=e("td",{style:{"text-align":"left"}},[e("code",null,"this")],-1),ut={style:{"text-align":"left"}},mt=e("code",null,"MqttBridge",-1),ft=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"payload")]),e("td",{style:{"text-align":"left"}},[e("code",null,"EBMessage")])],-1),_t=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"packet")]),e("td",{style:{"text-align":"left"}},[e("code",null,"IPublishPacket")])],-1),bt=e("h4",{id:"returns-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),t(" Returns")],-1),yt=e("p",null,[e("code",null,"Promise"),t("<"),e("code",null,"void"),t(">")],-1),xt=e("h4",{id:"defined-in-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-11","aria-hidden":"true"},"#"),t(" Defined in")],-1),qt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/types/IncomingMessageFunction.ts#L6",target:"_blank",rel:"noopener noreferrer"},kt=i('<hr><h3 id="ismatchingtopic" tabindex="-1"><a class="header-anchor" href="#ismatchingtopic" aria-hidden="true">#</a> isMatchingTopic</h3><p>▸ <strong>isMatchingTopic</strong>(<code>input</code>, <code>pattern</code>): <code>boolean</code></p><p>Checks if a given topic is matching against a subscription pattern</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the real full topic</td></tr><tr><td style="text-align:left;"><code>pattern</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the topic subscription pattern</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code>boolean</code></p><h4 id="defined-in-12" tabindex="-1"><a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a> Defined in</h4>',9),Tt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/topic/isMatchingTopic.impl.ts#L8",target:"_blank",rel:"noopener noreferrer"},vt=i('<hr><h3 id="mstosec" tabindex="-1"><a class="header-anchor" href="#mstosec" aria-hidden="true">#</a> msToSec</h3><p>▸ <strong>msToSec</strong>(<code>ms</code>): <code>number</code></p><p>Convert milliseconds into seconds and round decimal to integer if needed.</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ms</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Value in millisconads</td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>rounded value in seconds</p><h4 id="defined-in-13" tabindex="-1"><a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a> Defined in</h4>',10),Mt={href:"https://github.com/sebastianwessel/purista/blob/master/packages/mqttbridge/src/msToSec.impl.ts#L7",target:"_blank",rel:"noopener noreferrer"};function St(Ct,Bt){const s=a("RouterLink"),n=a("ExternalLinkIcon");return c(),l("div",null,[e("p",null,[d(s,{to:"/api/"},{default:o(()=>[t("PURISTA API")]),_:1}),t(" / "),d(s,{to:"/api/modules.html"},{default:o(()=>[t("Modules")]),_:1}),t(" / @purista/mqttbridge")]),g,e("ul",null,[e("li",null,[d(s,{to:"/api/classes/purista_mqttbridge.AsyncClient.html"},{default:o(()=>[t("AsyncClient")]),_:1})]),e("li",null,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[t("MqttBridge")]),_:1})]),e("li",null,[d(s,{to:"/api/classes/purista_mqttbridge.TopicRouter.html"},{default:o(()=>[t("TopicRouter")]),_:1})])]),p,e("ul",null,[e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#isubscriptionresponse"},{default:o(()=>[t("ISubscriptionResponse")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:o(()=>[t("IncomingMessageFunction")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#mqttbridgeconfig"},{default:o(()=>[t("MqttBridgeConfig")]),_:1})])]),u,e("ul",null,[e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getcommandhandler"},{default:o(()=>[t("getCommandHandler")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getcommandresponsesubscriptiontopic"},{default:o(()=>[t("getCommandResponseSubscriptionTopic")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getcommandsubscriptiontopic"},{default:o(()=>[t("getCommandSubscriptionTopic")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getdefaultmqttbridgeconfig"},{default:o(()=>[t("getDefaultMqttBridgeConfig")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getsharedtopicname"},{default:o(()=>[t("getSharedTopicName")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getsubscriptionhandler"},{default:o(()=>[t("getSubscriptionHandler")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#getsubscriptiontopic"},{default:o(()=>[t("getSubscriptionTopic")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#gettopicname"},{default:o(()=>[t("getTopicName")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#handlecommandresponse"},{default:o(()=>[t("handleCommandResponse")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#ismatchingtopic"},{default:o(()=>[t("isMatchingTopic")]),_:1})]),e("li",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#mstosec"},{default:o(()=>[t("msToSec")]),_:1})])]),m,e("p",null,[e("a",f,[t("packages/mqttbridge/src/AsyncClient/AsyncClient.ts:12"),d(n)])]),_,b,e("p",null,[t("Ƭ "),y,t(": ("),x,t(": "),d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[q]),_:1}),t(", "),k,t(": "),T,t(", "),v,t(": "),M,t(") => "),S,t("<"),C,t(">")]),B,e("table",null,[I,e("tbody",null,[e("tr",null,[N,e("td",P,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[w]),_:1})])]),D,R])]),E,L,A,e("p",null,[e("a",F,[t("packages/mqttbridge/src/types/IncomingMessageFunction.ts:6"),d(n)])]),H,e("p",null,[e("a",Q,[t("packages/mqttbridge/src/types/MqttBridgeConfig.ts:7"),d(n)])]),V,O,e("p",null,[t("▸ "),j,t("("),G,t(", "),U,t(", "),$,t(", "),z,t("): "),d(s,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:o(()=>[J]),_:1})]),K,e("p",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:o(()=>[W]),_:1})]),X,e("p",null,[e("a",Y,[t("packages/mqttbridge/src/handler/getCommandHandler.impl.ts:27"),d(n)])]),Z,ee,te,de,e("table",null,[se,e("tbody",null,[e("tr",null,[oe,e("td",ne,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[ie]),_:1})])])])]),ae,re,ce,e("p",null,[e("a",le,[t("packages/mqttbridge/src/topic/getCommandResponseSubscriptionTopic.impl.ts:7"),d(n)])]),he,e("table",null,[ge,e("tbody",null,[e("tr",null,[pe,e("td",ue,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[me]),_:1})])]),fe])]),_e,be,ye,e("p",null,[e("a",xe,[t("packages/mqttbridge/src/topic/getCommandSubscriptionTopic.impl.ts:7"),d(n)])]),qe,e("p",null,[e("a",ke,[t("packages/mqttbridge/src/getDefaultMqttBridgeConfig.impl.ts:5"),d(n)])]),Te,e("table",null,[ve,e("tbody",null,[e("tr",null,[Me,e("td",Se,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[Ce]),_:1})])]),Be])]),Ie,Ne,Pe,e("p",null,[e("a",we,[t("packages/mqttbridge/src/topic/getSharedTopicName.impl.ts:5"),d(n)])]),De,Re,e("p",null,[t("▸ "),Ee,t("("),Le,t(", "),Ae,t("): "),d(s,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:o(()=>[Fe]),_:1})]),He,e("p",null,[d(s,{to:"/api/modules/purista_mqttbridge.html#incomingmessagefunction"},{default:o(()=>[Qe]),_:1})]),Ve,e("p",null,[e("a",Oe,[t("packages/mqttbridge/src/handler/getSubscriptionHandler.impl.ts:21"),d(n)])]),je,e("table",null,[Ge,e("tbody",null,[e("tr",null,[Ue,e("td",$e,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[ze]),_:1})])]),Je])]),Ke,We,Xe,e("p",null,[e("a",Ye,[t("packages/mqttbridge/src/topic/getSubscriptionTopic.impl.ts:7"),d(n)])]),Ze,e("table",null,[et,e("tbody",null,[e("tr",null,[tt,e("td",dt,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[st]),_:1})]),ot]),nt])]),it,at,rt,ct,e("p",null,[e("a",lt,[t("packages/mqttbridge/src/topic/getTopicName.impl.ts:7"),d(n)])]),ht,e("table",null,[gt,e("tbody",null,[e("tr",null,[pt,e("td",ut,[d(s,{to:"/api/classes/purista_mqttbridge.MqttBridge.html"},{default:o(()=>[mt]),_:1})])]),ft,_t])]),bt,yt,xt,e("p",null,[e("a",qt,[t("packages/mqttbridge/src/types/IncomingMessageFunction.ts:6"),d(n)])]),kt,e("p",null,[e("a",Tt,[t("packages/mqttbridge/src/topic/isMatchingTopic.impl.ts:8"),d(n)])]),vt,e("p",null,[e("a",Mt,[t("packages/mqttbridge/src/msToSec.impl.ts:7"),d(n)])])])}const Pt=r(h,[["render",St],["__file","purista_mqttbridge.html.vue"]]);export{Pt as default};
