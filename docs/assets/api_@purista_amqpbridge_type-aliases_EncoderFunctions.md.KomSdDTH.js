import{_ as a,c as t,o as r,ag as o}from"./chunks/framework.U_AETC1W.js";const h=JSON.parse('{"title":"Type Alias: EncoderFunctions","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/amqpbridge/type-aliases/EncoderFunctions.md","filePath":"api/@purista/amqpbridge/type-aliases/EncoderFunctions.md","lastUpdated":1739900666000}'),n={name:"api/@purista/amqpbridge/type-aliases/EncoderFunctions.md"};function s(c,e,d,i,p,l){return r(),t("div",null,e[0]||(e[0]=[o('<p><a href="./../README.html"><strong>@purista/amqpbridge v1.11.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/amqpbridge</a> / EncoderFunctions</p><h1 id="type-alias-encoderfunctions" tabindex="-1">Type Alias: EncoderFunctions <a class="header-anchor" href="#type-alias-encoderfunctions" aria-label="Permalink to &quot;Type Alias: EncoderFunctions&quot;">​</a></h1><blockquote><p><strong>EncoderFunctions</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/amqpbridge/src/types/EncoderFunctions.ts#L1" target="_blank" rel="noreferrer">amqpbridge/src/types/EncoderFunctions.ts:1</a></p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="decode" tabindex="-1">decode() <a class="header-anchor" href="#decode" aria-label="Permalink to &quot;decode()&quot;">​</a></h3><blockquote><p><strong>decode</strong>: &lt;<code>T</code>&gt;(<code>input</code>) =&gt; <code>Promise</code>&lt;<code>T</code>&gt;</p></blockquote><h4 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong></p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h5><p><code>Buffer</code></p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p><h3 id="encode" tabindex="-1">encode() <a class="header-anchor" href="#encode" aria-label="Permalink to &quot;encode()&quot;">​</a></h3><blockquote><p><strong>encode</strong>: &lt;<code>T</code>&gt;(<code>input</code>) =&gt; <code>Promise</code>&lt;<code>Buffer</code>&gt;</p></blockquote><h4 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>T</strong></p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="input-1" tabindex="-1">input <a class="header-anchor" href="#input-1" aria-label="Permalink to &quot;input&quot;">​</a></h5><p><code>T</code></p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>Buffer</code>&gt;</p>',25)]))}const m=a(n,[["render",s]]);export{h as __pageData,m as default};
