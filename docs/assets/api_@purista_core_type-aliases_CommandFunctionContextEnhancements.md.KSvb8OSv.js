import{_ as s,c as a,o as t,ag as i}from"./chunks/framework.U_AETC1W.js";const k=JSON.parse('{"title":"Type Alias: CommandFunctionContextEnhancements<MessagePayloadType, MessageParamsType, Resources, Invokes, EmitList>","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/CommandFunctionContextEnhancements.md","filePath":"api/@purista/core/type-aliases/CommandFunctionContextEnhancements.md","lastUpdated":1739900666000}'),n={name:"api/@purista/core/type-aliases/CommandFunctionContextEnhancements.md"};function o(r,e,p,l,h,c){return t(),a("div",null,e[0]||(e[0]=[i(`<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / CommandFunctionContextEnhancements</p><h1 id="type-alias-commandfunctioncontextenhancements-messagepayloadtype-messageparamstype-resources-invokes-emitlist" tabindex="-1">Type Alias: CommandFunctionContextEnhancements&lt;MessagePayloadType, MessageParamsType, Resources, Invokes, EmitList&gt; <a class="header-anchor" href="#type-alias-commandfunctioncontextenhancements-messagepayloadtype-messageparamstype-resources-invokes-emitlist" aria-label="Permalink to &quot;Type Alias: CommandFunctionContextEnhancements\\&lt;MessagePayloadType, MessageParamsType, Resources, Invokes, EmitList\\&gt;&quot;">​</a></h1><blockquote><p><strong>CommandFunctionContextEnhancements</strong>&lt;<code>MessagePayloadType</code>, <code>MessageParamsType</code>, <code>Resources</code>, <code>Invokes</code>, <code>EmitList</code>&gt;: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/types/commandType/CommandFunctionContext.ts#L17" target="_blank" rel="noreferrer">packages/core/src/core/types/commandType/CommandFunctionContext.ts:17</a></p><p>It provides the original command message with types for payload and parameter. Also, the methods:</p><ul><li><code>emit</code> which allows to emit custom events to the event bridge</li><li><code>invoke</code> which allows to call other commands</li></ul><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>MessagePayloadType</strong> = <code>unknown</code></p><p>• <strong>MessageParamsType</strong> = <code>unknown</code></p><p>• <strong>Resources</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><p>• <strong>Invokes</strong> <em>extends</em> <a href="./InvokeList.html"><code>InvokeList</code></a> = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><p>• <strong>EmitList</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>Schema</code>&gt; = <a href="./EmptyObject.html"><code>EmptyObject</code></a></p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="emit" tabindex="-1">emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;emit&quot;">​</a></h3><blockquote><p><strong>emit</strong>: <a href="./EmitCustomMessageFunction.html"><code>EmitCustomMessageFunction</code></a>&lt;<code>EmitList</code>&gt;</p></blockquote><p>emit a custom message</p><h3 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h3><blockquote><p><strong>message</strong>: <code>Readonly</code>&lt;<a href="./Command.html"><code>Command</code></a>&lt;<code>MessagePayloadType</code>, <code>MessageParamsType</code>&gt;&gt;</p></blockquote><p>the original message</p><h3 id="resources" tabindex="-1">resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;resources&quot;">​</a></h3><blockquote><p><strong>resources</strong>: <code>Resources</code></p></blockquote><p>Provides resources defined in service builder and set via config during service creation</p><h3 id="service" tabindex="-1">service <a class="header-anchor" href="#service" aria-label="Permalink to &quot;service&quot;">​</a></h3><blockquote><p><strong>service</strong>: <code>Invokes</code></p></blockquote><p>Invokes a command and returns the result. It is recommended to validate the result against a schema which only contains the data you actually need.</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// define your invocation in command builder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canInvoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ServiceA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, responseOutputSchema, payloadSchema, parameterSchema)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCommandFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputPayload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { my: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputParameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { search: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;for_me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.service.ServiceA[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputPayload,inputParameter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,29)]))}const m=s(n,[["render",o]]);export{k as __pageData,m as default};
