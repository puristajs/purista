import{_ as t,c as s,o as a,ag as i}from"./chunks/framework.U_AETC1W.js";const p=JSON.parse('{"title":"Structure of a message","description":"A deeper look into internals of PURISTA typescript application backend framework.","frontmatter":{"title":"Structure of a message","description":"A deeper look into internals of PURISTA typescript application backend framework.","order":209910},"headers":[],"relativePath":"handbook/2_building_business-logic/advanced/structure_of_a_message.md","filePath":"handbook/2_building_business-logic/advanced/structure_of_a_message.md","lastUpdated":1706444636000}'),r={name:"handbook/2_building_business-logic/advanced/structure_of_a_message.md"};function n(d,e,o,c,h,l){return a(),s("div",null,e[0]||(e[0]=[i('<h1 id="structure-of-a-message" tabindex="-1">Structure of a message <a class="header-anchor" href="#structure-of-a-message" aria-label="Permalink to &quot;Structure of a message&quot;">​</a></h1><h2 id="id-s" tabindex="-1">ID&#39;s <a class="header-anchor" href="#id-s" aria-label="Permalink to &quot;ID&#39;s&quot;">​</a></h2><h3 id="traceid" tabindex="-1">traceId <a class="header-anchor" href="#traceid" aria-label="Permalink to &quot;traceId&quot;">​</a></h3><p>The trace id is a id, which will be used for one complete process.</p><p>As an example:</p><p>The Frontend makes a url request, which invokes a service function A. The service function A invokes a service function B. Service function A is returning a result back to the frontend. There is also a subscription C which listens for success responses of service A.</p><p>The traceId will be the same for all the messages and responses between the frontend, different service functions and subscriptions.</p><p>This allows to track the whole flow.</p><h3 id="instanceid" tabindex="-1">instanceId <a class="header-anchor" href="#instanceid" aria-label="Permalink to &quot;instanceId&quot;">​</a></h3><p>The instance id is the unique id of the current event bridge (client) instance. This id is auto generated by default, but can be set as config parameter. This id might be used by some event bridge adapter. It can also be used for monitoring.</p><h3 id="correlationid" tabindex="-1">correlationId <a class="header-anchor" href="#correlationid" aria-label="Permalink to &quot;correlationId&quot;">​</a></h3><p>The correlation id is a unique id that is used for a request (command) message and the corresponding response. While the traceId stays the same for a whole process flow, the correlationId is only valid and used for a single call.</p><h3 id="id-message-id" tabindex="-1">id (message id) <a class="header-anchor" href="#id-message-id" aria-label="Permalink to &quot;id (message id)&quot;">​</a></h3><p>Each message has a unique id, which might be used by the underlying event bridge/infrastructure or for persistence purposes.</p><h3 id="principalid" tabindex="-1">principalId <a class="header-anchor" href="#principalid" aria-label="Permalink to &quot;principalId&quot;">​</a></h3><p>The principal id is an optional field, which can be set by business logic to the user id. The principal id should be some technical user id and not something like an email, as it might be logged. It is recommended to use the message principal id for any authentication/authorization, because this way, there is no need to look into the message payload, which might be encrypted or not present.</p><p>The principal id is propagated down - like the trace id - in the whole process flow. So it will be available in subscriptions and function invocations. Each message has a unique id, which might be used by the underlying event bridge/infrastructure or for persistence purposes.</p><h3 id="tenantid" tabindex="-1">tenantId <a class="header-anchor" href="#tenantid" aria-label="Permalink to &quot;tenantId&quot;">​</a></h3><p>The tenant id is an optional field, which can be set by business logic to the tenant id. The principal id should be some technical tenant id and not something like an company name, as it might be logged.</p><p>The tenant id is propagated down - like the principal id - in the whole process flow. So it will be available in subscriptions and function invocations. Each message has a unique id, which might be used by the underlying event bridge/infrastructure or for persistence purposes.</p><h2 id="message-structure" tabindex="-1">Message structure <a class="header-anchor" href="#message-structure" aria-label="Permalink to &quot;Message structure&quot;">​</a></h2><p>As PURISTA is a message based framework, the structure of messages might be interesting.</p><table tabindex="0"><thead><tr><th>field</th><th>required</th><th>description</th></tr></thead><tbody><tr><td>messageType</td><td>yes</td><td>the type of message eg. command, response, custom...</td></tr><tr><td>id</td><td>yes</td><td>the unique id off a single message</td></tr><tr><td>timestamp</td><td>yes</td><td>the timestamp as number in ms when the message was created</td></tr><tr><td>correlationId</td><td>only used in Command and CommandResponse messages</td><td>a unique id generated when a comman message is send. the command response is using same correlationId</td></tr><tr><td>principalId</td><td>no</td><td>the unique id of the user</td></tr><tr><td>tenantId</td><td>no</td><td>the unique id of the tenant</td></tr><tr><td>eventName</td><td>no</td><td>a string representing the business event name</td></tr><tr><td>sender</td><td>yes</td><td>the service function or subscription who sends the message</td></tr><tr><td>sender.serviceName</td><td>yes</td><td>the service name</td></tr><tr><td>sender.serviceVersion</td><td>yes</td><td>the service version</td></tr><tr><td>sender.serviceTarget</td><td>yes</td><td>the service function or subscription name</td></tr><tr><td>sender.instanceId</td><td>yes</td><td>the unique id of the event bridge instance which sends the message</td></tr><tr><td>receiver</td><td>depends on message type</td><td>the service function or subscription who should receive the message</td></tr><tr><td>receiver.serviceName</td><td>only for commands &amp; responses</td><td>the service name</td></tr><tr><td>receiver.serviceVersion</td><td>only for commands &amp; responses</td><td>the service version</td></tr><tr><td>receiver.serviceTarget</td><td>only for commands &amp; responses</td><td>the service function or subscription name</td></tr><tr><td>receiver.instanceId</td><td>only for command responses</td><td>the unique id of the event bridge instance which receives the message</td></tr><tr><td>payload</td><td>depends on message type</td><td>the message payload (business data)</td></tr><tr><td>otp</td><td>no</td><td>OpenTelemetry context propagation as json stringified string</td></tr></tbody></table>',23)]))}const m=t(r,[["render",n]]);export{p as __pageData,m as default};
