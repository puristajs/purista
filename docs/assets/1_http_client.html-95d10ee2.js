import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as t,c as o,b as n,d as p,e as i,a as c}from"./app-2c9217f0.js";const l={},r=c(`<h2 id="direct-usage" tabindex="-1"><a class="header-anchor" href="#direct-usage" aria-hidden="true">#</a> Direct usage</h2><p>The <code>HttpClient</code> is a wrapper class around the native <code>fetch</code> function.<br> It provides simple shortcut methods:</p><ul><li><code>.get</code> for GET requests</li><li><code>.post</code> for POST requests</li><li><code>.put</code> for PUT requests</li><li><code>.patch</code> for PATCH requests</li><li><code>.delete</code> for DELETE requests</li><li><code>.setBearerToken</code> set a bearer token to be used for requests</li></ul><p>Requests are also automatically added to the current OpenTelemetry trace.<br> The request header will also contain the standard OpenTelemetry headers. This way the requested server is able to use the tracing information.</p><p>Timeout handling is provided out of the box and can be configured in the constructor configuration property.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">LoginResponse</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  token<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    baseUrl<span class="token operator">:</span> <span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">,</span>
    defaultHeaders<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json; charset=utf-8&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> loginCredentials <span class="token operator">=</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">&#39;secret_thing&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// to a POST request to receive a bearer token</span>
  <span class="token keyword">const</span> loginResponse <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>LoginResponse<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> loginCredentials<span class="token punctuation">)</span>

  <span class="token comment">// set the bearer token for all following requests</span>
  client<span class="token punctuation">.</span><span class="token function">setBearerToken</span><span class="token punctuation">(</span>loginResponse<span class="token punctuation">.</span>token<span class="token punctuation">)</span>

  <span class="token comment">// make a GET request with bearer token set in header</span>
  <span class="token keyword">const</span> restrictedResponse <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/restricted/path&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// log the response from a protected route</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>restrictedResponse<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="response-handling" tabindex="-1"><a class="header-anchor" href="#response-handling" aria-hidden="true">#</a> Response handling</h2><p>You can provide the expected return type in the short hand functions.<br> The response will be automatically JSON-decoded if the header <code>Content-Type</code> is set to <code>application/json</code>.<br> Otherwise it will return the plain response as string.</p><p>In case the request fails or is returning an HTTP error, the methods will throw a <code>UnhandledError</code>.<br> This error object will contain in the data object:</p><ul><li>the HTTP status code</li><li>method</li><li>url</li><li>path</li><li>headers (array)</li><li>response (string or JSON parse result)</li></ul><p>Error responses are automatically logged and the error is added to the OpenTelemetry trace.</p><h2 id="alternative" tabindex="-1"><a class="header-anchor" href="#alternative" aria-hidden="true">#</a> Alternative</h2><p>If you have a OpenAPI definition for the endpoints you like to use, you can check out a pretty cool alternative:</p>`,14),d={href:"https://the-guild.dev/openapi/fets/client/quick-start",target:"_blank",rel:"noopener noreferrer"};function u(k,h){const s=a("ExternalLinkIcon");return t(),o("div",null,[r,n("p",null,[n("strong",null,[n("a",d,[p("feTS Client"),i(s)])])])])}const b=e(l,[["render",u],["__file","1_http_client.html.vue"]]);export{b as default};
