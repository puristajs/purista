import{_ as c,W as l,X as d,Z as s,$ as n,a0 as a,a1 as r,Y as t,D as e}from"./framework-d89ed822.js";const u={},k=s("p",null,[n("Error handling is one of the essentials of software development."),s("br"),n(" But it's not easy - especially when your complexity is growing.")],-1),h=s("p",null,"By implementing only happy path, without proper error handling, maintenance will quickly become a nightmare.",-1),v=s("p",null,"PURISTA is build with error handling in mind and helps developers to build understandable, predictable and secure applications.",-1),m=s("p",null,"Error handling is done in different layers of your application, and errors are also unified for better error handling.",-1),b={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),g=s("br",null,null,-1),w=t(`<h2 id="error-types" tabindex="-1"><a class="header-anchor" href="#error-types" aria-hidden="true">#</a> Error types</h2><p>There are two error types provided by PURISTA - <code>HandledError</code> and <code>UnhandledError</code>.<br> Both types are logged automatically as soon as they get thrown.</p><p>Using these both error types ensures, that we have a defined error structure.</p><h3 id="handlederror" tabindex="-1"><a class="header-anchor" href="#handlederror" aria-hidden="true">#</a> HandledError</h3><p>Handled errors are thrown by intention.<br> These errors are kind of &quot;Ok, I know there is something wrong, and I give back a proper response&quot;.</p><p>Use cases are something like an API call requests an entity by ID, but no entity for a given ID exist, or the requester does not have proper permissions to access the entity.<br> Also, every failing input validation in PURISTA is a <code>HandledError</code>, as we know what happens and how to react.</p><p>Example:</p><p>An API call is invoking a service function like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> dbRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> <span class="token string">&#39;entity not found&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will give the client who has called the API endpoint a response with HTTP status code <strong>404 NOT FOUND</strong> and with a payload like this:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;entity not found&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can provide additional data to that error response:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> <span class="token string">&#39;entity not found&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>which results in:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;entity not found&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is used, out of the box, for automatically generated errors, thrown by failing input validations.</p><h3 id="unhandlederrors" tabindex="-1"><a class="header-anchor" href="#unhandlederrors" aria-hidden="true">#</a> UnhandledErrors</h3><p>Unhandled Errors are more generic errors, where it is not clear, what exactly happened, or how we should handle it.</p><p>Let&#39;s take an example of a POST endpoint for creating a new Entity.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> dbRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConstraintViolation</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// give the client a propper answer, that he tries to insert a record, but a record with same id already exist</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Conflict<span class="token punctuation">,</span> <span class="token string">&#39;entity with same id already exist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// maybe our database is unreachable, so simply return a 500</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span><span class="token string">&#39;internal server error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the error is handled in the sense of <em>&quot;Ok there is something wrong, and I log this error, and I prevent the system to crash&quot;</em>, but from client side it is more like <em>&quot;Ups, something wrong - this should not happen - try again later&quot;</em></p><h3 id="error-js-ts" tabindex="-1"><a class="header-anchor" href="#error-js-ts" aria-hidden="true">#</a> Error (js/ts)</h3><p>It is totally fine, if you reduce your error handling in service functions and subscriptions to HandledErrors only.<br> It is JavaScript/typescript - so just let it throw!</p><p>Each service function, and each subscription itself, is wrapped by a try-catch, which will convert any error into a UnhandledError with error code 500. The error will be logged. And an error message is send. So no worries, that your whole system can break.</p><p>You can create subscriptions to track errors, you have the logs, the user gets a proper response, no information will be leaked.</p><p>Because of this, the example from <code>HandledError</code> is totally fine, and we do not need to write more code here.<br> We know that any database issue is handled and returned as <strong>500 INTERNAL SERVER ERROR</strong>.</p>`,26),f=t(`<p><strong>👎 BAD PRACTICE</strong></p><p>Do not catch and handle only <em>some</em> errors.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConstraintViolation</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// give the client a propper answer, that he tries to insert a record,</span>
    <span class="token comment">// but a record with same id already exist</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Conflict<span class="token punctuation">,</span> <span class="token string">&#39;entity with same id already exist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ANY NON-CONSTRAINT-ERROR is swallowed, because it is catched, but not handled</span>
  <span class="token comment">// if it is some other error you never get informed about it</span>
  <span class="token comment">// it will not throw and will not be logged</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_=t(`<p><strong>👍 GOOD PRACTICE</strong></p><p>Handle the things you can, and throw the rest.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConstraintViolation</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// give the client a propper answer, that he tries to insert a record,</span>
    <span class="token comment">// but a record with same id already exist</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Conflict<span class="token punctuation">,</span> <span class="token string">&#39;entity with same id already exist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// log the original (unknown) error</span>
  logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>err<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Houston we got a problem here&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// throw an unhandled error</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnhandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">,</span><span class="token string">&#39;internal server error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validation-errors" tabindex="-1"><a class="header-anchor" href="#validation-errors" aria-hidden="true">#</a> Validation errors</h2><p>Each service function has input and output validation enforced by design.</p><p>Data which is not included in the schema is automatically stripped out and not available inside the service function.<br> Same for function outputs - unknown is stripped out to prevent exposing sensitive data to the outside in result payload.</p><p>If an input validation fails (parameter or payload validation), the validation error is transformed into a HandledError with status <strong>400 BAD REQUEST</strong> and a more specific error detail is available in error response data object.<br> This is ok, because the one who invoked the function, does already know the input data, and we are safe to give some hints, what data is violating the schema.</p><p>On the other hand, output validation errors are transformed into UnhandledError with status <strong>500 INTERNAL SERVER ERROR</strong> and no additional data is provided within the error response. This way, we can be sure, that we do not accidentally expose data or further information which allows attackers to get more insights of our system.</p><p>Subscriptions should implement their own input validation.<br> Because a subscription can receive different message types, depending on the subscription settings, there is currently no way to automate it.</p><p>If a subscription throws some error, it is automatically transformed into an UnhandledError and the original error is logged.</p>`,10);function E(x,R){const p=e("ExternalLinkIcon"),o=e("RouterLink"),i=e("Badge");return l(),d("div",null,[k,h,v,m,s("p",null,[n("PURISTA has deeply integrated support for "),s("a",b,[n("OpenTelemetry"),a(p)]),n("."),y,n(" This provides an industrial standard way to keep track of errors and issues."),g,n(" See "),a(o,{to:"/handbook/2._start-building/2.6._advanced/1_logging.html"},{default:r(()=>[n("Logging")]),_:1}),n(" and "),a(o,{to:"/handbook/5._tracing/0_opentelemetry.html"},{default:r(()=>[n("Tracing")]),_:1}),n(" section.")]),w,a(i,{text:"Avoid swallowing errors",type:"danger"}),f,a(i,{text:"Log and throw",type:"tip"}),_])}const T=c(u,[["render",E],["__file","0_error-handling.html.vue"]]);export{T as default};
