import{_ as o,c,o as d,ag as r}from"./chunks/framework.U_AETC1W.js";const m=JSON.parse('{"title":"Function: createErrorResponse()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/functions/createErrorResponse.md","filePath":"api/@purista/core/functions/createErrorResponse.md","lastUpdated":1739900666000}'),t={name:"api/@purista/core/functions/createErrorResponse.md"};function a(s,e,n,i,p,g){return d(),c("div",null,e[0]||(e[0]=[r('<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / createErrorResponse</p><h1 id="function-createerrorresponse" tabindex="-1">Function: createErrorResponse() <a class="header-anchor" href="#function-createerrorresponse" aria-label="Permalink to &quot;Function: createErrorResponse()&quot;">​</a></h1><blockquote><p><strong>createErrorResponse</strong>(<code>instanceId</code>, <code>originalEBMessage</code>, <code>statusCode</code>, <code>error</code>?): <code>Readonly</code>&lt;<code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }, <code>&quot;instanceId&quot;</code>&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/helper/createErrorResponse.impl.ts#L19" target="_blank" rel="noreferrer">packages/core/src/core/helper/createErrorResponse.impl.ts:19</a></p><p>Creates a error response object based on original command Toggles sender and receiver</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="instanceid" tabindex="-1">instanceId <a class="header-anchor" href="#instanceid" aria-label="Permalink to &quot;instanceId&quot;">​</a></h3><p><code>string</code></p><h3 id="originalebmessage" tabindex="-1">originalEBMessage <a class="header-anchor" href="#originalebmessage" aria-label="Permalink to &quot;originalEBMessage&quot;">​</a></h3><p><code>Readonly</code>&lt;{ <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#command"><code>Command</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>parameter</code>: <code>unknown</code>; <code>payload</code>: <code>unknown</code>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: <a href="./../type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a>; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p><h3 id="statuscode" tabindex="-1">statusCode <a class="header-anchor" href="#statuscode" aria-label="Permalink to &quot;statusCode&quot;">​</a></h3><p><a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a> = <code>StatusCode.InternalServerError</code></p><h3 id="error" tabindex="-1">error? <a class="header-anchor" href="#error" aria-label="Permalink to &quot;error?&quot;">​</a></h3><p><code>unknown</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Readonly</code>&lt;<code>Omit</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }, <code>&quot;instanceId&quot;</code>&gt;&gt;</p><p>CommandErrorResponse message object</p>',19)]))}const u=o(t,[["render",a]]);export{m as __pageData,u as default};
