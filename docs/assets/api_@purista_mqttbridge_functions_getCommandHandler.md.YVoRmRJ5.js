import{_ as o,c as d,o as c,ag as a}from"./chunks/framework.U_AETC1W.js";const p=JSON.parse('{"title":"Function: getCommandHandler()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/mqttbridge/functions/getCommandHandler.md","filePath":"api/@purista/mqttbridge/functions/getCommandHandler.md","lastUpdated":1739900666000}'),t={name:"api/@purista/mqttbridge/functions/getCommandHandler.md"};function n(r,e,s,i,m,g){return c(),d("div",null,e[0]||(e[0]=[a('<p><a href="./../README.html"><strong>@purista/mqttbridge v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/mqttbridge</a> / getCommandHandler</p><h1 id="function-getcommandhandler" tabindex="-1">Function: getCommandHandler() <a class="header-anchor" href="#function-getcommandhandler" aria-label="Permalink to &quot;Function: getCommandHandler()&quot;">​</a></h1><blockquote><p><strong>getCommandHandler</strong>(<code>address</code>, <code>cb</code>, <code>_metadata</code>, <code>_eventBridgeConfig</code>): <a href="./../type-aliases/IncomingMessageFunction.html"><code>IncomingMessageFunction</code></a></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/mqttbridge/src/handler/getCommandHandler.impl.ts#L29" target="_blank" rel="noreferrer">mqttbridge/src/handler/getCommandHandler.impl.ts:29</a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="address" tabindex="-1">address <a class="header-anchor" href="#address" aria-label="Permalink to &quot;address&quot;">​</a></h3><p><a href="./../../core/type-aliases/EBMessageAddress.html"><code>EBMessageAddress</code></a></p><h3 id="cb" tabindex="-1">cb <a class="header-anchor" href="#cb" aria-label="Permalink to &quot;cb&quot;">​</a></h3><p>(<code>message</code>) =&gt; <code>Promise</code>&lt;{ <code>contentEncoding</code>: <code>&quot;utf-8&quot;</code>; <code>contentType</code>: <code>&quot;application/json&quot;</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>isHandledError</code>: <code>boolean</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#commanderrorresponse"><code>CommandErrorResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: { <code>data</code>: <code>unknown</code>; <code>message</code>: <code>string</code>; <code>status</code>: <a href="./../../core/enumerations/StatusCode.html"><code>StatusCode</code></a>; }; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; } | { <code>contentEncoding</code>: <code>string</code>; <code>contentType</code>: <code>string</code>; <code>correlationId</code>: <code>string</code>; <code>eventName</code>: <code>string</code>; <code>id</code>: <code>string</code>; <code>messageType</code>: <a href="./../../core/enumerations/EBMessageType.html#commandsuccessresponse"><code>CommandSuccessResponse</code></a>; <code>otp</code>: <code>string</code>; <code>payload</code>: <code>unknown</code>; <code>principalId</code>: <code>string</code>; <code>receiver</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>sender</code>: { <code>instanceId</code>: <code>string</code>; <code>serviceName</code>: <code>string</code>; <code>serviceTarget</code>: <code>string</code>; <code>serviceVersion</code>: <code>string</code>; }; <code>tenantId</code>: <code>string</code>; <code>timestamp</code>: <code>number</code>; <code>traceId</code>: <code>string</code>; }&gt;</p><h3 id="metadata" tabindex="-1">_metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;\\_metadata&quot;">​</a></h3><p><a href="./../../core/type-aliases/CommandDefinitionMetadataBase.html"><code>CommandDefinitionMetadataBase</code></a></p><h3 id="eventbridgeconfig" tabindex="-1">_eventBridgeConfig <a class="header-anchor" href="#eventbridgeconfig" aria-label="Permalink to &quot;\\_eventBridgeConfig&quot;">​</a></h3><p><a href="./../../core/type-aliases/DefinitionEventBridgeConfig.html"><code>DefinitionEventBridgeConfig</code></a></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../type-aliases/IncomingMessageFunction.html"><code>IncomingMessageFunction</code></a></p>',17)]))}const h=o(t,[["render",n]]);export{p as __pageData,h as default};
