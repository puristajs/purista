import{_ as t,c as a,o,ag as r}from"./chunks/framework.U_AETC1W.js";const u=JSON.parse('{"title":"Type Alias: ContextBase","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/type-aliases/ContextBase.md","filePath":"api/@purista/core/type-aliases/ContextBase.md","lastUpdated":1740066608000}'),s={name:"api/@purista/core/type-aliases/ContextBase.md"};function c(n,e,i,l,d,h){return o(),a("div",null,e[0]||(e[0]=[r('<p><a href="./../README.html"><strong>@purista/core v2.0.5</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / ContextBase</p><h1 id="type-alias-contextbase" tabindex="-1">Type Alias: ContextBase <a class="header-anchor" href="#type-alias-contextbase" aria-label="Permalink to &quot;Type Alias: ContextBase&quot;">​</a></h1><blockquote><p><strong>ContextBase</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/core/types/ContextBase.ts#L12" target="_blank" rel="noreferrer">packages/core/src/core/types/ContextBase.ts:12</a></p><p>The ContextBase provides is a basic type. Each context for command function, subscription function and all Hooks and transformers will have at least the properties of this type.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="configs" tabindex="-1">configs <a class="header-anchor" href="#configs" aria-label="Permalink to &quot;configs&quot;">​</a></h3><blockquote><p><strong>configs</strong>: <code>object</code></p></blockquote><p>the config store</p><h4 id="configs-getconfig" tabindex="-1">configs.getConfig <a class="header-anchor" href="#configs-getconfig" aria-label="Permalink to &quot;configs.getConfig&quot;">​</a></h4><blockquote><p><strong>configs.getConfig</strong>: <a href="./ConfigGetterFunction.html"><code>ConfigGetterFunction</code></a></p></blockquote><p>get a config value from the config store</p><h4 id="configs-removeconfig" tabindex="-1">configs.removeConfig <a class="header-anchor" href="#configs-removeconfig" aria-label="Permalink to &quot;configs.removeConfig&quot;">​</a></h4><blockquote><p><strong>configs.removeConfig</strong>: <a href="./ConfigDeleteFunction.html"><code>ConfigDeleteFunction</code></a></p></blockquote><p>delete a config value from the config store</p><h4 id="configs-setconfig" tabindex="-1">configs.setConfig <a class="header-anchor" href="#configs-setconfig" aria-label="Permalink to &quot;configs.setConfig&quot;">​</a></h4><blockquote><p><strong>configs.setConfig</strong>: <a href="./ConfigSetterFunction.html"><code>ConfigSetterFunction</code></a></p></blockquote><p>set a config value in the config store</p><h3 id="logger" tabindex="-1">logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;logger&quot;">​</a></h3><blockquote><p><strong>logger</strong>: <a href="./../classes/Logger.html"><code>Logger</code></a></p></blockquote><p>the logger instance</p><h3 id="secrets" tabindex="-1">secrets <a class="header-anchor" href="#secrets" aria-label="Permalink to &quot;secrets&quot;">​</a></h3><blockquote><p><strong>secrets</strong>: <code>object</code></p></blockquote><p>the secret store</p><h4 id="secrets-getsecret" tabindex="-1">secrets.getSecret <a class="header-anchor" href="#secrets-getsecret" aria-label="Permalink to &quot;secrets.getSecret&quot;">​</a></h4><blockquote><p><strong>secrets.getSecret</strong>: <a href="./SecretGetterFunction.html"><code>SecretGetterFunction</code></a></p></blockquote><p>get a secret from the secret store</p><h4 id="secrets-removesecret" tabindex="-1">secrets.removeSecret <a class="header-anchor" href="#secrets-removesecret" aria-label="Permalink to &quot;secrets.removeSecret&quot;">​</a></h4><blockquote><p><strong>secrets.removeSecret</strong>: <a href="./SecretDeleteFunction.html"><code>SecretDeleteFunction</code></a></p></blockquote><p>delete a secret from the secret store</p><h4 id="secrets-setsecret" tabindex="-1">secrets.setSecret <a class="header-anchor" href="#secrets-setsecret" aria-label="Permalink to &quot;secrets.setSecret&quot;">​</a></h4><blockquote><p><strong>secrets.setSecret</strong>: <a href="./SecretSetterFunction.html"><code>SecretSetterFunction</code></a></p></blockquote><p>set a secret in the secret store</p><h3 id="startactivespan" tabindex="-1">startActiveSpan() <a class="header-anchor" href="#startactivespan" aria-label="Permalink to &quot;startActiveSpan()&quot;">​</a></h3><blockquote><p><strong>startActiveSpan</strong>: &lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>context</code>, <code>fn</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>wrap given function in an opentelemetry active span</p><h4 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>F</strong></p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h5><p><code>string</code></p><h5 id="opts" tabindex="-1">opts <a class="header-anchor" href="#opts" aria-label="Permalink to &quot;opts&quot;">​</a></h5><p><code>SpanOptions</code></p><h5 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h5><p><code>Context</code> | <code>undefined</code></p><h5 id="fn" tabindex="-1">fn <a class="header-anchor" href="#fn" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p><h3 id="states" tabindex="-1">states <a class="header-anchor" href="#states" aria-label="Permalink to &quot;states&quot;">​</a></h3><blockquote><p><strong>states</strong>: <code>object</code></p></blockquote><p>the state store</p><h4 id="states-getstate" tabindex="-1">states.getState <a class="header-anchor" href="#states-getstate" aria-label="Permalink to &quot;states.getState&quot;">​</a></h4><blockquote><p><strong>states.getState</strong>: <a href="./StateGetterFunction.html"><code>StateGetterFunction</code></a></p></blockquote><p>get a state value from the state store</p><h4 id="states-removestate" tabindex="-1">states.removeState <a class="header-anchor" href="#states-removestate" aria-label="Permalink to &quot;states.removeState&quot;">​</a></h4><blockquote><p><strong>states.removeState</strong>: <a href="./StateDeleteFunction.html"><code>StateDeleteFunction</code></a></p></blockquote><p>delete a state value from the state store</p><h4 id="states-setstate" tabindex="-1">states.setState <a class="header-anchor" href="#states-setstate" aria-label="Permalink to &quot;states.setState&quot;">​</a></h4><blockquote><p><strong>states.setState</strong>: <a href="./StateSetterFunction.html"><code>StateSetterFunction</code></a></p></blockquote><p>set a state value in the state store</p><h3 id="wrapinspan" tabindex="-1">wrapInSpan() <a class="header-anchor" href="#wrapinspan" aria-label="Permalink to &quot;wrapInSpan()&quot;">​</a></h3><blockquote><p><strong>wrapInSpan</strong>: &lt;<code>F</code>&gt;(<code>name</code>, <code>opts</code>, <code>fn</code>, <code>context</code>?) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p></blockquote><p>wrap given function in an opentelemetry span</p><h4 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>F</strong></p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="name-1" tabindex="-1">name <a class="header-anchor" href="#name-1" aria-label="Permalink to &quot;name&quot;">​</a></h5><p><code>string</code></p><h5 id="opts-1" tabindex="-1">opts <a class="header-anchor" href="#opts-1" aria-label="Permalink to &quot;opts&quot;">​</a></h5><p><code>SpanOptions</code></p><h5 id="fn-1" tabindex="-1">fn <a class="header-anchor" href="#fn-1" aria-label="Permalink to &quot;fn&quot;">​</a></h5><p>(<code>span</code>) =&gt; <code>Promise</code>&lt;<code>F</code>&gt;</p><h5 id="context-1" tabindex="-1">context? <a class="header-anchor" href="#context-1" aria-label="Permalink to &quot;context?&quot;">​</a></h5><p><code>Context</code></p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>F</code>&gt;</p>',79)]))}const g=t(s,[["render",c]]);export{u as __pageData,g as default};
