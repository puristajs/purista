import{_ as o,c as t,o as a,ag as r}from"./chunks/framework.U_AETC1W.js";const g=JSON.parse('{"title":"Function: getLoggerMock()","description":"","frontmatter":{},"headers":[],"relativePath":"api/@purista/core/functions/getLoggerMock.md","filePath":"api/@purista/core/functions/getLoggerMock.md","lastUpdated":1739900666000}'),s={name:"api/@purista/core/functions/getLoggerMock.md"};function c(n,e,u,d,b,l){return a(),t("div",null,e[0]||(e[0]=[r('<p><a href="./../README.html"><strong>@purista/core v2.0.0</strong></a></p><hr><p><a href="./../../../packages.html">PURISTA API</a> / <a href="./../README.html">@purista/core</a> / getLoggerMock</p><h1 id="function-getloggermock" tabindex="-1">Function: getLoggerMock() <a class="header-anchor" href="#function-getloggermock" aria-label="Permalink to &quot;Function: getLoggerMock()&quot;">​</a></h1><blockquote><p><strong>getLoggerMock</strong>(<code>sandbox</code>?): <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/puristajs/purista/blob/master/packages/core/src/mocks/getLogger.mock.ts#L11" target="_blank" rel="noreferrer">packages/core/src/mocks/getLogger.mock.ts:11</a></p><p>Mocks the logger and methods are stubs</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="sandbox" tabindex="-1">sandbox? <a class="header-anchor" href="#sandbox" aria-label="Permalink to &quot;sandbox?&quot;">​</a></h3><p><code>SinonSandbox</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>object</code></p><p>logger mocked</p><h3 id="mock" tabindex="-1">mock <a class="header-anchor" href="#mock" aria-label="Permalink to &quot;mock&quot;">​</a></h3><blockquote><p><strong>mock</strong>: <a href="./../classes/Logger.html"><code>Logger</code></a></p></blockquote><h3 id="stubs" tabindex="-1">stubs <a class="header-anchor" href="#stubs" aria-label="Permalink to &quot;stubs&quot;">​</a></h3><blockquote><p><strong>stubs</strong>: <code>object</code></p></blockquote><h4 id="stubs-debug" tabindex="-1">stubs.debug <a class="header-anchor" href="#stubs-debug" aria-label="Permalink to &quot;stubs.debug&quot;">​</a></h4><blockquote><p><strong>stubs.debug</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h4 id="stubs-error" tabindex="-1">stubs.error <a class="header-anchor" href="#stubs-error" aria-label="Permalink to &quot;stubs.error&quot;">​</a></h4><blockquote><p><strong>stubs.error</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h4 id="stubs-fatal" tabindex="-1">stubs.fatal <a class="header-anchor" href="#stubs-fatal" aria-label="Permalink to &quot;stubs.fatal&quot;">​</a></h4><blockquote><p><strong>stubs.fatal</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h4 id="stubs-info" tabindex="-1">stubs.info <a class="header-anchor" href="#stubs-info" aria-label="Permalink to &quot;stubs.info&quot;">​</a></h4><blockquote><p><strong>stubs.info</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h4 id="stubs-trace" tabindex="-1">stubs.trace <a class="header-anchor" href="#stubs-trace" aria-label="Permalink to &quot;stubs.trace&quot;">​</a></h4><blockquote><p><strong>stubs.trace</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote><h4 id="stubs-warn" tabindex="-1">stubs.warn <a class="header-anchor" href="#stubs-warn" aria-label="Permalink to &quot;stubs.warn&quot;">​</a></h4><blockquote><p><strong>stubs.warn</strong>: <code>SinonStub</code>&lt;<code>any</code>[], <code>any</code>&gt;</p></blockquote>',29)]))}const h=o(s,[["render",c]]);export{g as __pageData,h as default};
