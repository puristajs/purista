import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,a as e}from"./app.0777453f.js";const t={},o=e(`<h1 id="custom-events" tabindex="-1"><a class="header-anchor" href="#custom-events" aria-hidden="true">#</a> Custom events</h1><p>To be able to build real world systems, you will need to send events, which will be consumed by subscriptions or third party providers. The sender does/should not need to know, who is consuming this information.</p><p>Emitting custom events is quite easy. The function context and the subscription context containing a helper function <code>emit</code>.<br> This async <code>emit</code> function has two parameters. The event name and the optional payload to be sent.</p><p>Example:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>
<span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> emit <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> _param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;MyEventName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> some<span class="token operator">:</span> <span class="token string">&#39;Payload&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// you can also set a type for payload</span>

<span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> emit <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> _param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;MyEventName&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The emitted message will have the current service (name &amp; version &amp; function/subscription-name) as sender address.<br> But there is no receiver defined at all. Emitting a custom event will be broadcasted without a specific receiver. It is up to you, to ensure, that there is somebody who listens for this event.</p>`,6),p=[o];function c(i,u){return s(),a("div",null,p)}var d=n(t,[["render",c],["__file","5_custom_events.html.vue"]]);export{d as default};
