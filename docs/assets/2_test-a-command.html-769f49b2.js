import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as u,b as s,d as n,e as a,w as p,a as c}from"./app-ccf1f840.js";const r={},d=s("br",null,null,-1),k={href:"https://jestjs.io",target:"_blank",rel:"noopener noreferrer"},m=s("br",null,null,-1),v={href:"https://sinonjs.org",target:"_blank",rel:"noopener noreferrer"},b=c(`<p>A generated test file looks like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getCommandContextMock<span class="token punctuation">,</span> getEventBridgeMock<span class="token punctuation">,</span> getLoggerMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSandbox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;sinon&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> userV1Service <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../userV1Service&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUpCommandBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUpCommandBuilder&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserV1SignUpInputParameter<span class="token punctuation">,</span> UserV1SignUpInputPayload <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;service User version 1 - command signUp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sandbox <span class="token operator">=</span> <span class="token function">createSandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    sandbox <span class="token operator">=</span> <span class="token function">createSandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    sandbox<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;does not throw&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> service <span class="token operator">=</span> userV1Service<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token function">getEventBridgeMock</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">.</span>mock<span class="token punctuation">,</span> <span class="token punctuation">{</span> logger<span class="token operator">:</span> <span class="token function">getLoggerMock</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">.</span>mock <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> signUp <span class="token operator">=</span> signUpCommandBuilder<span class="token punctuation">.</span><span class="token function">getCommandFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>

    <span class="token keyword">const</span> payload<span class="token operator">:</span> UserV1SignUpInputPayload <span class="token operator">=</span> <span class="token keyword">undefined</span>

    <span class="token keyword">const</span> parameter<span class="token operator">:</span> UserV1SignUpInputParameter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">getCommandContextMock</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> sandbox<span class="token punctuation">)</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">signUp</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>mock<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A Sinon.js sandbox is created before and restored after each single test.<br> Using a sandbox allows to clean everything after each test, even if the test has failed.</p><p>The test itself is pretty straight-forward.<br> For testing our command function, we will simply call the function.</p><p>A command function is running in the <code>this</code>-scope of the service. Because of this, we need a instance of the service.<br> For creating a service instance, an event bridge instance is needed.</p><p>Also, the command function is called with a command function context.</p><p>PURISTA provides some helpers for creating mocks and stubs.<br> Because of this, creation of the event bridge instance, the service instance and function context is pretty easy.</p><p>Now, the command function can be called with some test data input.<br> The result can now be tested and validated.</p><h2 id="test-helper" tabindex="-1"><a class="header-anchor" href="#test-helper" aria-hidden="true">#</a> Test helper</h2>`,9),h=s("br",null,null,-1),f=s("br",null,null,-1),g=c(`<h2 id="mocks" tabindex="-1"><a class="header-anchor" href="#mocks" aria-hidden="true">#</a> Mocks</h2><p>PURISTA comes with some simple mocks, which should developers help to write tests fast and simple.<br> In general, the mock helper will work similar.</p><p>As optional input, a Sinon.js sandbox can be provided.<br> Mock creation helpers will return a object with the two properties <code>mock</code> and <code>stubs</code>.<br> The <code>mock</code> property contains the mocked instance or object.<br> The <code>stubs</code> property returns the Sinon.js stubs, used in the mocked instance or object.</p><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> mockedLogger <span class="token operator">=</span> <span class="token function">getLoggerMock</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span>

mockedLogger<span class="token punctuation">.</span>mock<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>mockedLogger<span class="token punctuation">.</span>stubs<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">calledWith</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function w(y,_){const e=o("ExternalLinkIcon"),t=o("RouterLink");return l(),u("div",null,[s("p",null,[n("The CLI tool will automatically create a unit test file for added commands."),d,n(" Generated unit test files expecting the usage of "),s("a",k,[n("Jest"),a(e)]),n(", or an API compatible test framework."),m,n(" For stubbing and mocking, "),s("a",v,[n("Sinon.js"),a(e)]),n(" will be used.")]),b,s("p",null,[n("You can find a list of test helper can be found in the "),a(t,{to:"/api/modules/purista_core.html#unit-test-helper"},{default:p(()=>[n("API documentation: Unit test helper")]),_:1}),n(".")]),s("p",null,[n("There are also some helpfull general helper functions available."),h,n(" They can help developers to create test data."),f,n(" You can find them in the "),a(t,{to:"/api/modules/purista_core.html#helper"},{default:p(()=>[n("API documentation: Helper")]),_:1})]),g])}const S=i(r,[["render",w],["__file","2_test-a-command.html.vue"]]);export{S as default};
