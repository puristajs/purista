import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as v,c as h,e as a,w as s,b as e,d as n,a as l}from"./app-2c9217f0.js";const m="/graphic/add_service.png",b={},f=l('<p><img src="'+m+'" alt="Add service with cli"></p><p>A service is a logical group of functions and subscriptions. This is where the domain driven aspect comes in.<br> In our example, we will use the classic example - Users.</p><p>At the end, we want to have two domains - <em>User</em> and <em>Email</em>.</p><p>We will need to have this functionality:</p><ul><li>sign up a new user</li><li>get a user by email</li><li>send a welcome email to user</li></ul><h2 id="set-up-a-new-service" tabindex="-1"><a class="header-anchor" href="#set-up-a-new-service" aria-hidden="true">#</a> Set up a new service</h2><p>First, we need to create a new service.<br> You can simply add a new service by using the CLI tool.</p>',7),g=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("purista "),e("span",{class:"token function"},"add"),n(),e("span",{class:"token function"},"service"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),k=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("npx @purista/cli "),e("span",{class:"token function"},"add"),n(),e("span",{class:"token function"},"service"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),y=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("bunx @purista/cli "),e("span",{class:"token function"},"add"),n(),e("span",{class:"token function"},"service"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),w=l(`<p>The CLI will guide you through all steps, and will create all files for your.<br> In the first step, you will asked for the name of our new service.<br> We will start with <em>User</em>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>? What is the name <span class="token punctuation">(</span>or domain<span class="token punctuation">)</span> of your new <span class="token function">service</span> <span class="token punctuation">(</span>something like: user or account<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>::: hint Service names should be short and in best case a single word - like user or email.<br> You can enter the name in natural way. The CLI tool will take care of casing and whitespaces.<br> For example, if you have a domain <em>bank account</em>, you can simply type in <em>bank account</em>. The CLI tool will convert it to something like <em>bankAccount</em> :::</p><p>After you have confirm your input by pressing the enter key, you will be asked for a short description of the service.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>? What is the matter of <span class="token function">service</span> <span class="token string">&quot;user&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here, you should enter some short, general description, which will be used for some human-facing documentation.<br> So, please provide here something like: <em>manages data related to users</em>.</p><p>In the last step, you will be asked for the version of your service. It defaults to <em>1</em>, which you can simply confirm by pressing the enter key.<br> If you need to create a new version of an existing service, you can enter any integer number larger than <em>1</em>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Version number of this <span class="token function">service</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now, all files should be generated. A list of generated files will be printed out.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>✔  ++ /src/service/ServiceEvent.enum.ts 
✔  ++ /src/service/user/generalUserServiceInfo.ts
✔  ++ /src/service/user/v1/userV1Service.ts
✔  ++ /src/service/user/v1/userV1Service.test.ts
✔  ++ /src/service/user/v1/userV1ServiceBuilder.ts
✔  ++ /src/service/user/v1/index.ts
✔  ++ /src/service/user/v1/userServiceConfig.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>From here, you are ready to add commands and subscriptions to the new service <em>user</em>.</p><p>But, for our example, please redo the steps, and create an additional service <em>email</em>.<br> You can skip the first step, if you provide the service name at the CLI call.</p>`,12),_=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("purista "),e("span",{class:"token function"},"add"),n(),e("span",{class:"token function"},"service"),n(` email
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),S=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("npx @purista/cli "),e("span",{class:"token function"},"add"),n(),e("span",{class:"token function"},"service"),n(` email
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),x=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("bunx @purista/cli "),e("span",{class:"token function"},"add"),n(),e("span",{class:"token function"},"service"),n(` email
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),I=e("h2",{id:"structure",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#structure","aria-hidden":"true"},"#"),n(" Structure")],-1),T=e("br",null,null,-1),C=l('<h3 id="serviceevent-enum-ts" tabindex="-1"><a class="header-anchor" href="#serviceevent-enum-ts" aria-hidden="true">#</a> ServiceEvent.enum.ts</h3><p>This file <code>/src/service/ServiceEvent.enum.ts</code> contains a typescript enum, which should contain all event names, used in the repository.<br> The enum will be enhanced by the CLI tool, if you add commands or subscriptions, and the response refers to an event name.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Prevent hardcoding of event names as simple strings in your code. Use this global enum instead.</p></div><h3 id="generaluserserviceinfo-ts" tabindex="-1"><a class="header-anchor" href="#generaluserserviceinfo-ts" aria-hidden="true">#</a> generalUserServiceInfo.ts</h3><p>This file <code>/src/service/user/generalUserServiceInfo.ts</code> contains the basic information for your service:</p><ul><li>service name</li><li>service description</li></ul><p>You only need to change the file, if you need to align the description.</p><h3 id="userv1service-ts" tabindex="-1"><a class="header-anchor" href="#userv1service-ts" aria-hidden="true">#</a> userV1Service.ts</h3><p>This file <code>/src/service/user/v1/userV1Service.ts</code> only contains the registration of commands and subscriptions in the service builder. It <strong>should not contain</strong> any further service builder configurations. Any other configuration should be done in the service builder file itself.</p><h3 id="userv1service-test-ts" tabindex="-1"><a class="header-anchor" href="#userv1service-test-ts" aria-hidden="true">#</a> userV1Service.test.ts</h3><p>The file <code>/src/service/user/v1/userV1Service.test.ts</code>, is a unit test file, which will check the final configurations in the service builder.</p><h3 id="userv1servicebuilder-ts" tabindex="-1"><a class="header-anchor" href="#userv1servicebuilder-ts" aria-hidden="true">#</a> userV1ServiceBuilder.ts</h3><p>The <code>/src/service/user/v1/userV1ServiceBuilder.ts</code> file, is the initial service builder for your service. In this file, the basic service configuration will be made.<br> Also, the optional custom service configuration will be add here.<br> If you want to create a new version of a service, you can simply copy the whole service version folder and align the service version in this file.</p><div class="hint-container danger"><p class="hint-container-title">Do not add commands or subscriptions here</p><p>because of:</p><ul><li>cycling dependencies! the command and subscription builders are created by that builder</li><li>this is used by PURISTA to be able to deploy as FaaS</li></ul></div><h3 id="userserviceconfig-ts" tabindex="-1"><a class="header-anchor" href="#userserviceconfig-ts" aria-hidden="true">#</a> userServiceConfig.ts</h3><p>In the file <code>/src/service/user/v1/userServiceConfig.ts</code>, the custom service configuration can be made.</p><h2 id="service-configurations" tabindex="-1"><a class="header-anchor" href="#service-configurations" aria-hidden="true">#</a> Service configurations</h2><p>A custom configuration relates to your business logic and your requirements. It is not used by PURISTA itself.<br> The custom service config will be available in all commands and subscriptions of this service via <code>this.config</code>.<br> Custom service configurations are one option to pass configuration values to commands and subscriptions.<br> But, you can also use stores.</p><p>Service configuration and stores addressing different data. Here is a table, that will help you to understand the differences.</p>',19),A=e("th",null,null,-1),V=e("th",null,"custom config",-1),B=e("tbody",null,[e("tr",null,[e("td",null,"provided/managed by"),e("td",null,"infrastructure & deployment"),e("td",null,"database or vendor solution"),e("td",null,"vendor solution")]),e("tr",null,[e("td",null,"addresses"),e("td",null,"technical configuration"),e("td",null,"business configuration"),e("td",null,"secrets & confidential data")]),e("tr",null,[e("td",null,"value"),e("td",null,"is set once, during instance creation"),e("td",null,"fetched per usage"),e("td",null,"fetched per usage")]),e("tr",null,[e("td",null,"change effects"),e("td",null,"instance restart/next deployment"),e("td",null,"on next usage"),e("td",null,"on next usage")]),e("tr",null,[e("td",null,"value type"),e("td",null,"object (nested)"),e("td",null,"object, string, number, boolean (key-value)"),e("td",null,"string (key-value)")]),e("tr",null,[e("td",null,[n("can be set "),e("em",null,"("),n(")*")]),e("td",null,"🛑 no"),e("td",null,"✅ yes"),e("td",null,"✅ yes")]),e("tr",null,[e("td",null,[n("can be deleted "),e("em",null,"("),n(")*")]),e("td",null,"🛑 no"),e("td",null,"✅ yes"),e("td",null,"✅ yes")]),e("tr",null,[e("td",null,"use for confidential data"),e("td",null,"🙏🏻 please no, technically possible"),e("td",null,"🙏🏻 please no, technically possible"),e("td",null,"✅ yes")]),e("tr",null,[e("td",null,"use cases"),e("td",null,"third-party url, ports, timeout settings"),e("td",null,"feature flag, business data like currency exchange values"),e("td",null,"passwords, auth tokens, certificates")])],-1),U=e("p",null,[e("em",null,"(*)"),n(" by commands and subscriptions")],-1),L={href:"https://zod.dev",target:"_blank",rel:"noopener noreferrer"},E=e("br",null,null,-1),P=l(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> userServiceV1ConfigSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  myOption<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UserServiceV1Config</span> <span class="token operator">=</span> z<span class="token punctuation">.</span>input<span class="token operator">&lt;</span><span class="token keyword">typeof</span> userServiceV1ConfigSchema<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, in the example a string option entry <code>myOption</code> is added. This filed is marked as optional. Because of this, in the generated type <code>UserServiceV1Config</code>, the <code>myOption</code> is also optional.</p><p>Now, in the builder file <code>userV1ServiceBuilder.ts</code> in the same directory, typescript will complain on <code>.setDefaultConfig({})</code>.<br> Setting the default configuration, requires to set all root fields of the default configuration. The optional flag, only relates to the input, when you create a service instance and provide a service configuration.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>PURISTA follows the pattern, to always have default values, which can be overwritten, but only when there is a actual need for it.</p></div><p>Because of this, you need to change it in the builder file <code>userV1ServiceBuilder.ts</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> userV1ServiceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceBuilder</span><span class="token punctuation">(</span>userServiceInfo<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setConfigSchema</span><span class="token punctuation">(</span>userServiceV1ConfigSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    myOption<span class="token operator">:</span> <span class="token string">&#39;something&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">Be aware</p><p>PURISTA does not deep merge configurations! If you have nested configurations, you should be aware of.</p></div><h2 id="create-a-service-instance" tabindex="-1"><a class="header-anchor" href="#create-a-service-instance" aria-hidden="true">#</a> Create a service instance</h2><p>To get a real service instance, you can use the service builder from <code>userV1Service.ts</code>, which includes the configuration for the service with all commands and subscriptions.</p><p>To create a service instance, you need to provide at least an event bridge instance.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// get instance of user</span>
<span class="token keyword">const</span> userInstance <span class="token operator">=</span> userV1Service<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>eventBridge<span class="token punctuation">)</span>
<span class="token comment">// initiate/start the user instance</span>
<span class="token comment">// it registers the commands and the subscriptions to the event bridge</span>
<span class="token keyword">await</span> theService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have a custom configuration, you can provide it like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> serviceConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  myOption<span class="token operator">:</span> <span class="token string">&#39;something&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// get instance of user with config</span>
<span class="token keyword">const</span> userInstance <span class="token operator">=</span> userV1Service<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>eventBridge<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    serviceConfig
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// which allows usage like</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInstance<span class="token punctuation">.</span>config<span class="token punctuation">.</span>myOption<span class="token punctuation">)</span> <span class="token comment">// outputs: something</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),R={class:"hint-container info"},N=e("p",{class:"hint-container-title"},"See",-1);function O(z,F){const u=r("CodeTabs"),c=r("RouterLink"),d=r("ExternalLinkIcon");return v(),h("div",null,[f,a(u,{id:"35",data:[{title:"global install"},{title:"local npm"},{title:"local bun"}],active:0,"tab-id":"shell"},{tab0:s(({title:t,value:i,isActive:o})=>[g]),tab1:s(({title:t,value:i,isActive:o})=>[k]),tab2:s(({title:t,value:i,isActive:o})=>[y]),_:1}),w,a(u,{id:"74",data:[{title:"global install"},{title:"local npm"},{title:"local bun"}],active:0,"tab-id":"shell"},{tab0:s(({title:t,value:i,isActive:o})=>[_]),tab1:s(({title:t,value:i,isActive:o})=>[S]),tab2:s(({title:t,value:i,isActive:o})=>[x]),_:1}),I,e("p",null,[n("PURISTA is using "),a(c,{to:"/handbook/1._get-started/3_builders.html"},{default:s(()=>[n("builders")]),_:1}),n(" to create services. The created files are no actual service class implementation."),T,n(" PURISTA creates a service builder with configurations. And the builder is able to create a service class instance, based on the configuration.")]),C,e("table",null,[e("thead",null,[e("tr",null,[A,V,e("th",null,[a(c,{to:"/handbook/2._start-building/2.5_stores/1_config_store.html"},{default:s(()=>[n("Config Store")]),_:1})]),e("th",null,[a(c,{to:"/handbook/2._start-building/2.5_stores/2_secret_store.html"},{default:s(()=>[n("Secret store")]),_:1})])])]),B]),U,e("p",null,[n("For a custom configuration, you must define a "),e("a",L,[n("zod schema"),a(d)]),n("."),E,n(" Example:")]),P,e("div",R,[N,e("p",null,[n("All available options can be found in "),a(c,{to:"/api/classes/purista_core.ServiceBuilder.html#getinstance"},{default:s(()=>[n("ServiceBuilder API documentation")]),_:1})])])])}const Y=p(b,[["render",O],["__file","1_create-new-service.html.vue"]]);export{Y as default};
