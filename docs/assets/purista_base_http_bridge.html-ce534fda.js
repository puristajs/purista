import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c,b as e,e as d,w as n,d as t,a}from"./app-9aedf0b4.js";const h={},g=a('<h1 id="module-purista-base-http-bridge" tabindex="-1"><a class="header-anchor" href="#module-purista-base-http-bridge" aria-hidden="true">#</a> Module: @purista/base-http-bridge</h1><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3>',3),p=e("h3",{id:"interfaces",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interfaces","aria-hidden":"true"},"#"),t(" Interfaces")],-1),f=e("h3",{id:"type-aliases",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-aliases","aria-hidden":"true"},"#"),t(" Type Aliases")],-1),u=e("h3",{id:"functions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),t(" Functions")],-1),b=a('<h2 id="type-aliases-1" tabindex="-1"><a class="header-anchor" href="#type-aliases-1" aria-hidden="true">#</a> Type Aliases</h2><h3 id="httpeventbridgeconfig" tabindex="-1"><a class="header-anchor" href="#httpeventbridgeconfig" aria-hidden="true">#</a> HttpEventBridgeConfig</h3><p>Ƭ <strong>HttpEventBridgeConfig</strong>: <code>Object</code></p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>apiPrefix?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix to be used if the command is configured as REST api endpoint according to the OpenAPI defintion needs to <code>enableRestApiExpose</code> set to <code>true</code></td></tr><tr><td style="text-align:left;"><code>commandPayloadAsCloudEvent?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">command invocations are wrapped in CloudEvent <strong><code>Link</code></strong> https://github.com/cloudevents/spec/tree/v1.0</td></tr><tr><td style="text-align:left;"><code>enableRestApiExpose?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">expose commands as regular REST endpoints when they are configured as endpoints</td></tr><tr><td style="text-align:left;"><code>name?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of the bridge</td></tr><tr><td style="text-align:left;"><code>pathPrefix?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix to be used for exposing commands as endpoints expecting a event bus message</td></tr><tr><td style="text-align:left;"><code>serve</code></td><td style="text-align:left;">(<code>options</code>: { <code>fetch</code>: (<code>request</code>: <code>Request</code>) =&gt; <code>Promise</code>&lt;<code>unknown</code>&gt; | <code>unknown</code> ; <code>hostname?</code>: <code>string</code> ; <code>port?</code>: <code>number</code> }) =&gt; <code>Server</code></td><td style="text-align:left;">The serve function is depending on the runtime. - Bun: <code>Bun.serve</code> - Node.js: <code>serve</code> function from additional package <code>@hono/hono-node-server</code> - Deno: <code>serve</code> function from package <code>https://deno.land/std/http/server.ts</code> <strong><code>See</code></strong> https://hono.dev</td></tr><tr><td style="text-align:left;"><code>serverHost?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Host of the server.</td></tr><tr><td style="text-align:left;"><code>serverPort?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Port of the server.</td></tr><tr><td style="text-align:left;"><code>subscriptionPayloadAsCloudEvent?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">subscription invocations are wrapped in CloudEvent <strong><code>Link</code></strong> https://github.com/cloudevents/spec/tree/v1.0</td></tr></tbody></table><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4>',6),x={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeConfig.ts#L3",target:"_blank",rel:"noopener noreferrer"},y=a('<hr><h3 id="routerfunction" tabindex="-1"><a class="header-anchor" href="#routerfunction" aria-hidden="true">#</a> RouterFunction</h3><p>Ƭ <strong>RouterFunction</strong>&lt;<code>T</code>&gt;: (<code>this</code>: <code>T</code>, <code>c</code>: <code>Context</code>) =&gt; <code>Promise</code>&lt;<code>Response</code>&gt;</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4>',4),m=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),_=e("td",{style:{"text-align":"left"}},[e("code",null,"T")],-1),v={style:{"text-align":"left"}},E=e("code",null,"HttpEventBridge",-1),B=e("code",null,"HttpEventBridgeConfig",-1),H=e("code",null,"HttpEventBridge",-1),C=e("code",null,"HttpEventBridgeConfig",-1),T=a('<h4 id="type-declaration-1" tabindex="-1"><a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a> Type declaration</h4><p>▸ (<code>this</code>, <code>c</code>): <code>Promise</code>&lt;<code>Response</code>&gt;</p><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>T</code></td></tr><tr><td style="text-align:left;"><code>c</code></td><td style="text-align:left;"><code>Context</code></td></tr></tbody></table><h5 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h5><p><code>Promise</code>&lt;<code>Response</code>&gt;</p><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4>',7),P={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/types/RouterFunction.ts#L6",target:"_blank",rel:"noopener noreferrer"},R=a('<h2 id="functions-1" tabindex="-1"><a class="header-anchor" href="#functions-1" aria-hidden="true">#</a> Functions</h2><h3 id="getdefaulthttpeventbridgeconfig" tabindex="-1"><a class="header-anchor" href="#getdefaulthttpeventbridgeconfig" aria-hidden="true">#</a> getDefaultHttpEventBridgeConfig</h3><p>▸ <strong>getDefaultHttpEventBridgeConfig</strong>(): <code>Object</code></p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>apiPrefix?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix to be used if the command is configured as REST api endpoint according to the OpenAPI defintion needs to <code>enableRestApiExpose</code> set to <code>true</code></td></tr><tr><td style="text-align:left;"><code>commandPayloadAsCloudEvent?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">command invocations are wrapped in CloudEvent <strong><code>Link</code></strong> https://github.com/cloudevents/spec/tree/v1.0</td></tr><tr><td style="text-align:left;"><code>defaultCommandTimeout?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Overwrite the hardcoded default timeout of command invocations</td></tr><tr><td style="text-align:left;"><code>enableRestApiExpose?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">expose commands as regular REST endpoints when they are configured as endpoints</td></tr><tr><td style="text-align:left;"><code>instanceId?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The instance id of the event bridge. If not set, a id will generated each time a instance is created. Use this if there is a need to always have the same instance id.</td></tr><tr><td style="text-align:left;"><code>logLevel?</code></td><td style="text-align:left;"><code>LogLevelName</code></td><td style="text-align:left;">If no logger instance is given, use this log level</td></tr><tr><td style="text-align:left;"><code>logger?</code></td><td style="text-align:left;"><code>Logger</code></td><td style="text-align:left;">A logger instance</td></tr><tr><td style="text-align:left;"><code>name?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">name of the bridge</td></tr><tr><td style="text-align:left;"><code>pathPrefix?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">the prefix to be used for exposing commands as endpoints expecting a event bus message</td></tr><tr><td style="text-align:left;"><code>serverHost?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Host of the server.</td></tr><tr><td style="text-align:left;"><code>serverPort?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Port of the server.</td></tr><tr><td style="text-align:left;"><code>spanProcessor?</code></td><td style="text-align:left;"><code>SpanProcessor</code></td><td style="text-align:left;">A OpenTelemetry span processor</td></tr><tr><td style="text-align:left;"><code>subscriptionPayloadAsCloudEvent?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">subscription invocations are wrapped in CloudEvent <strong><code>Link</code></strong> https://github.com/cloudevents/spec/tree/v1.0</td></tr></tbody></table><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4>',7),k={href:"https://github.com/sebastianwessel/purista/blob/master/packages/base-http-bridge/src/HttpEventBridge/getDefaultHttpEventBridgeConfig.impl.ts#L5",target:"_blank",rel:"noopener noreferrer"};function w(A,L){const o=i("RouterLink"),s=i("ExternalLinkIcon");return r(),c("div",null,[e("p",null,[d(o,{to:"/api/"},{default:n(()=>[t("PURISTA API")]),_:1}),t(" / "),d(o,{to:"/api/modules.html"},{default:n(()=>[t("Modules")]),_:1}),t(" / @purista/base-http-bridge")]),g,e("ul",null,[e("li",null,[d(o,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html"},{default:n(()=>[t("HttpEventBridge")]),_:1})])]),p,e("ul",null,[e("li",null,[d(o,{to:"/api/interfaces/purista_base_http_bridge.HttpEventBridgeClient.html"},{default:n(()=>[t("HttpEventBridgeClient")]),_:1})])]),f,e("ul",null,[e("li",null,[d(o,{to:"/api/modules/purista_base_http_bridge.html#httpeventbridgeconfig"},{default:n(()=>[t("HttpEventBridgeConfig")]),_:1})]),e("li",null,[d(o,{to:"/api/modules/purista_base_http_bridge.html#routerfunction"},{default:n(()=>[t("RouterFunction")]),_:1})])]),u,e("ul",null,[e("li",null,[d(o,{to:"/api/modules/purista_base_http_bridge.html#getdefaulthttpeventbridgeconfig"},{default:n(()=>[t("getDefaultHttpEventBridgeConfig")]),_:1})])]),b,e("p",null,[e("a",x,[t("base-http-bridge/src/HttpEventBridge/types/HttpEventBridgeConfig.ts:3"),d(s)])]),y,e("table",null,[m,e("tbody",null,[e("tr",null,[_,e("td",v,[t("extends "),d(o,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html"},{default:n(()=>[E]),_:1}),t("<"),d(o,{to:"/api/modules/purista_base_http_bridge.html#httpeventbridgeconfig"},{default:n(()=>[B]),_:1}),t("> = "),d(o,{to:"/api/classes/purista_base_http_bridge.HttpEventBridge.html"},{default:n(()=>[H]),_:1}),t("<"),d(o,{to:"/api/modules/purista_base_http_bridge.html#httpeventbridgeconfig"},{default:n(()=>[C]),_:1}),t(">")])])])]),T,e("p",null,[e("a",P,[t("base-http-bridge/src/HttpEventBridge/types/RouterFunction.ts:6"),d(s)])]),R,e("p",null,[e("a",k,[t("base-http-bridge/src/HttpEventBridge/getDefaultHttpEventBridgeConfig.impl.ts:5"),d(s)])])])}const N=l(h,[["render",w],["__file","purista_base_http_bridge.html.vue"]]);export{N as default};
