{{#if installStaticPlugin}}
import { resolve } from 'node:path'
{{/if}}

import { gracefulShutdown, initLogger, type Service } from '@purista/core'

{{#if installHttpService}}
import { serve } from '@hono/node-server'
import { serveStatic } from '@hono/node-server/serve-static'
import { swaggerUI } from '@hono/swagger-ui'
import { honoV1Service } from '@purista/hono-http-server'
{{/if}}

{{#if (eq eventBridge "DefaultEventBridge")}}
import { DefaultEventBridge } from '@purista/core'
{{/if}}
{{#if (eq eventBridge "AmqpEventBridge")}}
import { AmqpBridge } from '@purista/amqpbridge'
import amqpBridgeConfig from '../config/amqpBridgeConfig{{fileExt}}'
{{/if}}
{{#if (eq eventBridge "MqttEventBridge")}}
import { MqttBridge } from '@purista/mqttbridge'
import mqttBridgeConfig from '../config/mqttBridgeConfig{{fileExt}}'
{{/if}}
{{#if (eq eventBridge "NatsEventBridge")}}
import { NatsBridge } from '@purista/natsbridge'
import natsBridgeConfig from '../config/natsBridgeConfig{{fileExt}}'
{{/if}}

export const main = async () => {

  const logger = initLogger()

  const services: Service[] = []

  // initiate the event bridge as first step
  {{#if (eq eventBridge "DefaultEventBridge")}}
  const eventBridge = new DefaultEventBridge({ logger })
  await eventBridge.start()
  {{/if}}
  {{#if (eq eventBridge "AmqpEventBridge")}}
  const eventBridge = new AmqpBridge({ ...amqpBridgeConfig, logger })
  await eventBridge.start()
  {{/if}}
  {{#if (eq eventBridge "MqttEventBridge")}}
  const eventBridge = new MqttBridge({ ,,,mqttBridgeConfig, logger })
  await eventBridge.start()
  {{/if}}
  {{#if (eq eventBridge "NatsEventBridge")}}
  const eventBridge = new NatsBridge({ ...natsBridgeConfig, logger })
  await eventBridge.start()
  {{/if}}

  {{#if installHttpService}}
  // initiate the webserver service as second step

  const port = 3000

  const honoService = await honoV1Service.getInstance(eventBridge, { logger, serviceConfig: { services, enableDynamicRoutes: true } })
  honoService.app.get('/api', swaggerUI({ url: '/api/openapi.json' }))
  honoService.app.get('*', serveStatic({ root: './public' }))
  honoService.openApi.addServer({ url: `http://localhost:${port}`, description: 'the local server' })

  // start the webserver
  await honoService.start()

  const serverInstance = serve({
    fetch: honoService.app.fetch,
    port,
  })
  {{/if}}


  // add initiation and start of your services here
  // const yourService = await yourServiceBuilder.getInstance(eventBridge)
  // await yourService.start()
  // services.push(yourService)


  // try to shut down as clean as possible
  gracefulShutdown(logger, [
  {{#if installHttpService}}
    honoService.prepareDestroy(),
    {{/if}}
    eventBridge,
    ...services,
    {{#if installHttpService}}
    {
      name: `${honoService.serviceInfo.serviceName} ${honoService.serviceInfo.serviceVersion} close socket`,
      destroy: async () => {
        serverInstance.close()
      }
    },
    honoService,
    {{/if}}
  ])
}

main()