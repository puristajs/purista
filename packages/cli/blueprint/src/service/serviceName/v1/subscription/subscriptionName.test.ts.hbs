import { getEventBridgeMock, getLoggerMock, getSubscriptionContextMock } from '@purista/core'
import { createSandbox } from 'sinon'

import { {{properCase service.name}}V{{service.version}}Service } from '../../{{properCase service.name}}V{{service.version}}Service'
import { {{properCase subscriptionName}}CommandBuilder } from './{{properCase subscriptionName}}CommandBuilder'

describe('service {{properCase service.name}} version {{service.version}} - subscription {{camelCase subscriptionName}}', () => {
  let sandbox = createSandbox()
  beforeEach(() => {
    sandbox = createSandbox()
  })

  afterEach(() => {
    sandbox.restore()
  })

  test('does not throw', async () => {
    const service = {{properCase service.name}}V{{service.version}}Service.getInstance(getEventBridgeMock(sandbox).mock, { logger: getLoggerMock(sandbox).mock })

    const {{camelCase subscriptionName}} = {{properCase subscriptionName}}CommandBuilder.getSubscriptionFunction().bind(service)

    const payload = undefined

    const parameter = {}

    const context = getSubscriptionContextMock(payload, parameter, sandbox)

    const result = await {{camelCase subscriptionName}}(context.mock, payload, parameter)

    expect(result).toBeUndefined()
  })
})
