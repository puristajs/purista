import { getEventBridgeMock, getLoggerMock, safeBind } from '@purista/core'
import { createSandbox } from 'sinon'

import { {{camelCase service.name}}V{{service.version}}Service } from '../../{{camelCase service.name}}V{{service.version}}Service{{fileExt}}'
import { {{camelCase name}}CommandBuilder } from './{{camelCase name}}CommandBuilder{{fileExt}}'
import { {{properCase service.name}}V{{service.version}}{{properCase name}}InputPayload, {{properCase service.name}}V{{service.version}}{{properCase name}}InputParameter } from './types{{fileExt}}'

describe('service {{properCase service.name}} version {{service.version}} - command {{camelCase name}}', () => {
  const sandbox = createSandbox()
  beforeEach(() => {
    // add your before each here
  })

  afterEach(() => {
    sandbox.restore()
  })

  test('does not throw', async () => {
    const service = await {{camelCase service.name}}V{{service.version}}Service.getInstance(getEventBridgeMock(sandbox).mock, { logger: getLoggerMock(sandbox).mock })

    const {{camelCase name}} = safeBind({{camelCase name}}CommandBuilder.getCommandFunction(), service)

    const payload: {{properCase service.name}}V{{service.version}}{{properCase name}}InputPayload = undefined

    const parameter: {{properCase service.name}}V{{service.version}}{{properCase name}}InputParameter = {}

    const context = {{camelCase name}}CommandBuilder.getCommandContextMock(payload, parameter, sandbox)

    const result = await {{camelCase name}}(context.mock, payload, parameter)

    expect(result).toBeUndefined()
  })
})
